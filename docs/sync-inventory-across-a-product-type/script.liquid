{% assign product_types = options.product_types_to_monitor__array_required %}
{% assign only_sync_active_products = options.only_sync_active_products__boolean %}

{% assign primary_location = shop.locations[shop.primary_location_id] %}

{% if event.topic == "mechanic/user/trigger" %}
  {% for product_type in product_types %}
    {% assign available_quantites = array %}
    {% assign cursor = nil %}

    {% capture search_query -%}
      location_id:{{ shop.primary_location_id }} product_type:{{ product_type | json }} managed:true
    {%- endcapture %}

    {% if only_sync_active_products %}
      {% assign search_query = search_query | append: " product_status:active" %}
    {% endif %}

    {% for n in (0..200) %}
      {% capture query %}
        query {
          productVariants(
            first: 200
            query: {{ search_query | json }}
            after: {{ cursor | json }}
          ) {
            pageInfo {
              hasNextPage
              endCursor
            }
            nodes {
              inventoryItem {
                id
                inventoryLevel(locationId: {{ primary_location.admin_graphql_api_id | json }}) {
                  quantities(names: "available") {
                    name
                    quantity
                  }
                }
              }
            }
          }
        }
      {% endcapture %}

      {% assign result = query | shopify %}

      {% if event.preview %}
        {% capture result_json %}
          {
            "data": {
              "productVariants": {
                "nodes": [
                  {
                    "id": "gid://shopify/ProductVariant/1234567890",
                    "inventoryItem": {
                      "inventoryLevel": {
                        "quantities": [
                          {
                            "name": "available",
                            "quantity": 30
                          }
                        ]
                      }
                    }
                  },
                  {
                    "id": "gid://shopify/ProductVariant/2345678901",
                    "inventoryItem": {
                      "inventoryLevel": {
                        "quantities": [
                          {
                            "name": "available",
                            "quantity": 30
                          }
                        ]
                      }
                    }
                  }
                ]
              }
            }
          }
        {% endcapture %}

        {% assign result = result_json | parse_json %}
      {% endif %}

      {% for variant in result.data.productVariants.nodes %}
        {% assign available_quantites = available_quantites | push: variant.inventoryItem.inventoryLevel.quantities.first.quantity %}
      {% endfor %}

      {% if result.data.productVariants.pageInfo.hasNextPage %}
        {% assign cursor = result.data.productVariants.pageInfo.endCursor %}
      {% else %}
        {% break %}
      {% endif %}
    {% endfor %}

    {% assign inventory_total = available_quantites | sum %}
    {% assign expected_inventory_total = available_quantites.first | times: available_quantites.size %}

    {% if inventory_total != expected_inventory_total %}
      {% error
        message: "Not all inventory levels are in sync. Manually ensure everything is at the same level, then try again.",
        product_type: product_type,
        expected_inventory_total: expected_inventory_total,
        inventory_total: inventory_total,
        available_quantites: available_quantites
      %}

    {% else %}
      {% assign cache_key = "inventory_by_product_type:" | append: product_type | sha256 %}
      {% action "cache", "set", cache_key, available_quantites.first %}
    {% endif %}
  {% endfor %}

{% elsif event.topic contains "mechanic/scheduler/" %}
  {% for product_type in product_types %}
    {% assign cache_key = "inventory_by_product_type:" | append: product_type | sha256 %}
    {% assign inventory_old = cache[cache_key] %}

    {% if event.preview %}
      {% assign inventory_old = 30 %}
    {% endif %}

    {% if inventory_old == blank %}
      {% error
        message: "The inventory for this product type has not yet been cached. Manually synchronize the inventory for this product type and run this task manually per steps 2 and 3 in the task instructions.",
        product_type: product_type
      %}
    {% endif %}

    {% assign variants = array %}
    {% assign available_quantites = array %}
    {% assign cursor = nil %}

    {% capture search_query -%}
      location_id:{{ shop.primary_location_id }} product_type:{{ product_type | json }} managed:true
    {%- endcapture %}

    {% if only_sync_active_products %}
      {% assign search_query = search_query | append: " product_status:active" %}
    {% endif %}

    {% for n in (0..200) %}
      {% capture query %}
        query {
          productVariants(
            first: 200
            query: {{ search_query | json }}
            after: {{ cursor | json }}
          ) {
            pageInfo {
              hasNextPage
              endCursor
            }
            nodes {
              id
              sku
              inventoryItem {
                id
                inventoryLevel(locationId: {{ primary_location.admin_graphql_api_id | json }}) {
                  quantities(names: "available") {
                    name
                    quantity
                  }
                }
              }
            }
          }
        }
      {% endcapture %}

      {% assign result = query | shopify %}

      {% if event.preview %}
        {% capture result_json %}
          {
            "data": {
              "productVariants": {
                "nodes": [
                  {
                    "id": "gid://shopify/ProductVariant/1234567890",
                    "inventoryItem": {
                      "id": "gid://shopify/InventoryItem/1234567890",
                      "inventoryLevel": {
                        "quantities": [
                          {
                            "name": "available",
                            "quantity": 25
                          }
                        ]
                      }
                    }
                  },
                  {
                    "id": "gid://shopify/ProductVariant/2345678901",
                    "inventoryItem": {
                      "id": "gid://shopify/InventoryItem/2345678901",
                      "inventoryLevel": {
                        "quantities": [
                          {
                            "name": "available",
                            "quantity": 31
                          }
                        ]
                      }
                    }
                  }
                ]
              }
            }
          }
        {% endcapture %}

        {% assign result = result_json | parse_json %}
      {% endif %}

      {% assign variants = result.data.productVariants.nodes | concat: variants %}

      {% if result.data.productVariants.pageInfo.hasNextPage %}
        {% assign cursor = result.data.productVariants.pageInfo.endCursor %}
      {% else %}
        {% break %}
      {% endif %}
    {% endfor %}

    {% for variant in variants %}
      {% assign available_quantites = available_quantites | push: variant.inventoryItem.inventoryLevel.quantities.first.quantity %}
    {% endfor %}

    {% assign inventory_total_old = inventory_old | times: available_quantites.size %}
    {% assign inventory_total_new = available_quantites | sum %}
    {% assign inventory_total_diff = inventory_total_new | minus: inventory_total_old %}
    {% assign inventory_new = inventory_old | plus: inventory_total_diff %}

    {% log
      inventory_old: inventory_old,
      inventory_total_old: inventory_total_old,
      inventory_total_new: inventory_total_new,
      inventory_total_diff: inventory_total_diff,
      inventory_new: inventory_new,
      product_type: product_type,
      variants_count: variants.size,
      variants: variants
    %}

    {% if inventory_new == inventory_old %}
      {% log "No inventory adjustments needed for this product type." %}
      {% continue %}
    {% endif %}

    {% action "cache", "set", cache_key, inventory_new %}

    {% assign inventory_adjustments = array %}

    {% for variant in variants %}
      {% assign inventory_adjustment = hash %}
      {% assign inventory_adjustment["inventoryItemId"] = variant.inventoryItem.id %}
      {% assign inventory_adjustment["locationId"] = primary_location.admin_graphql_api_id %}
      {% assign inventory_adjustment["delta"] = inventory_new | minus: variant.inventoryItem.inventoryLevel.quantities.first.quantity %}
      {% assign inventory_adjustments = inventory_adjustments | push: inventory_adjustment %}
    {% endfor %}

    {% if inventory_adjustments != blank %}
      {% assign groups_of_inventory_adjustments = inventory_adjustments | in_groups_of: 250, fill_with: false %}

      {% for group_of_inventory_adjustments in groups_of_inventory_adjustments %}
        {% action "shopify" %}
          mutation {
            inventoryAdjustQuantities(
              input: {
                reason: "correction"
                name: "available"
                changes: {{ group_of_inventory_adjustments | graphql_arguments }}
              }
            ) {
              inventoryAdjustmentGroup {
                reason
                changes {
                  name
                  delta
                  quantityAfterChange
                  item {
                    id
                    sku
                  }
                  location {
                    name
                  }
                }
              }
              userErrors {
                code
                field
                message
              }
            }
          }
        {% endaction %}
      {% endfor %}
    {% endif %}
  {% endfor %}
{% endif %}
