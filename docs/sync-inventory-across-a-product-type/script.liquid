{% assign product_types = options.product_types_to_monitor__array_required %}

{% if event.topic == "mechanic/user/trigger" %}
  {% for product_type in product_types %}
    {% assign inventory_list = array %}
    {% assign cursor = nil %}

    {% for n in (0..100) %}
      {% capture inventory_query %}
        query {
          productVariants(
            first: 250
            query: {{ product_type | json | prepend: "product_type:" | json }}
            after: {{ cursor | json }}
          ) {
            pageInfo {
              hasNextPage
            }
            edges {
              node {
                inventoryQuantity
              }
            }
          }
        }
      {% endcapture %}

      {% assign inventory_query_result = inventory_query | shopify %}

      {% if event.preview %}
        {% capture inventory_query_result_json %}
          {
            "data": {
              "productVariants": {
                "pageInfo": {
                  "hasNextPage": false
                },
                "edges": [
                  {
                    "node": {
                      "inventoryQuantity": 30
                    }
                  },
                  {
                    "node": {
                      "inventoryQuantity": 30
                    }
                  },
                  {
                    "node": {
                      "inventoryQuantity": 30
                    }
                  }
                ]
              }
            }
          }
        {% endcapture %}

        {% assign inventory_query_result = inventory_query_result_json | parse_json %}
      {% endif %}

      {% assign inventory_list = inventory_query_result.data.productVariants.edges | map: "node" | map: "inventoryQuantity" | concat: inventory_list %}

      {% if inventory_query_result.data.productVariants.pageInfo.hasNextPage %}
        {% assign cursor = inventory_query_result.data.productVariants.edges.last.cursor %}
        {% continue %}
      {% endif %}

      {% break %}
    {% endfor %}

    {% assign inventory_total = inventory_list | sum %}
    {% assign expected_inventory_total = inventory_list.first | times: inventory_list.size %}
    {% if inventory_total != expected_inventory_total %}
      {% error message: "Not all inventory levels are in sync. Manually ensure everything is at the same level, and try again.", product_type: product_type %}
    {% else %}
      {% assign cache_key = "inventory_by_product_type:" | append: product_type | sha256 %}
      {% action "cache", "set", cache_key, inventory_list.first %}
    {% endif %}
  {% endfor %}
{% elsif event.topic contains "mechanic/scheduler/" %}
  {% capture primary_location_query %}
    query {
      location {
        id
      }
    }
  {% endcapture %}

  {% assign primary_location_query_result = primary_location_query | shopify %}

  {% if event.preview %}
    {% capture primary_location_result_json %}
      {
        "data": {
          "location": {
            "id": "gid://shopify/Location/1234567890"
          }
        }
      }
    {% endcapture %}

    {% assign primary_location_query_result = primary_location_result_json | parse_json %}
  {% endif %}

  {% assign primary_location_id = primary_location_query_result.data.location.id %}

  {% for product_type in product_types %}
    {% assign cache_key = "inventory_by_product_type:" | append: product_type | sha256 %}
    {% assign inventory_old = cache[cache_key] %}

    {% if event.preview %}
      {% assign inventory_old = 30 %}
    {% endif %}

    {% if inventory_old == blank %}
      {% error message: "The inventory for this product type has not yet been cached. Manually synchronize the inventory for this product type and run this task manually per steps 2 and 3 in the task instructions.", product_type: product_type %}
    {% endif %}

    {% assign variants = array %}
    {% assign cursor = nil %}

    {% assign variants = array %}

    {% for n in (0..100) %}
      {% capture inventory_query %}
        query {
          productVariants(
            first: 250
            query: {{ product_type | json | prepend: "product_type:" | json }}
            after: {{ cursor | json }}
          ) {
            pageInfo {
              hasNextPage
            }
            edges {
              node {
                inventoryQuantity
                inventoryItem {
                  id
                }
              }
              cursor
            }
          }
        }
      {% endcapture %}

      {% assign inventory_query_result = inventory_query | shopify %}

      {% if event.preview %}
        {% capture inventory_query_result_json %}
          {
            "data": {
              "productVariants": {
                "pageInfo": {
                  "hasNextPage": false
                },
                "edges": [
                  {
                    "node": {
                      "inventoryQuantity": 29,
                      "inventoryItem": {
                        "id": "gid://shopify/InventoryItem/1234567890"
                      }
                    },
                    "cursor": "eyJsYXN0X2lkIjozMTcxMTYwMDkwMjI0MSwibGFzdF92YWx1ZSI6IjMxNzExNjAwOTAyMjQxIn0="
                  },
                  {
                    "node": {
                      "inventoryQuantity": 25,
                      "inventoryItem": {
                        "id": "gid://shopify/InventoryItem/2345678901"
                      }
                    },
                    "cursor": "eyJsYXN0X2lkIjozMTcxMTYwMTgxOTc0NSwibGFzdF92YWx1ZSI6IjMxNzExNjAxODE5NzQ1In0="
                  },
                  {
                    "node": {
                      "inventoryQuantity": 30,
                      "inventoryItem": {
                        "id": "gid://shopify/InventoryItem/3456789012"
                      }
                    },
                    "cursor": "eyJsYXN0X2lkIjozMTcxMzYwNDc2Mzc0NSwibGFzdF92YWx1ZSI6IjMxNzEzNjA0NzYzNzQ1In0="
                  }
                ]
              }
            }
          }
        {% endcapture %}

        {% assign inventory_query_result = inventory_query_result_json | parse_json %}
      {% endif %}

      {% assign variants = inventory_query_result.data.productVariants.edges | map: "node" | concat: variants %}

      {% if inventory_query_result.data.productVariants.pageInfo.hasNextPage %}
        {% assign cursor = inventory_query_result.data.productVariants.edges.last.cursor %}
        {% continue %}
      {% endif %}

      {% break %}
    {% endfor %}

    {% assign inventory_list = variants | map: "inventoryQuantity" %}
    {% assign inventory_total_old = inventory_old | times: inventory_list.size %}
    {% assign inventory_total_new = inventory_list | sum %}
    {% assign inventory_total_diff = inventory_total_new | minus: inventory_total_old %}
    {% assign inventory_new = inventory_old | plus: inventory_total_diff %}

    {% log inventory_old: inventory_old, inventory_total_old: inventory_total_old, inventory_total_new: inventory_total_new, inventory_total_diff: inventory_total_diff, inventory_new: inventory_new, product_type: product_type, variants_count: variants.size, variants: variants %}

    {% if inventory_new == inventory_old %}
      {% log message: "No inventory adjustments needed" %}
    {% else %}
      {% action "cache", "set", cache_key, inventory_new %}

      {% assign inventory_item_adjustments = array %}

      {% for variant in variants %}
        {% assign adjustment = hash %}
        {% assign adjustment["inventoryItemId"] = variant.inventoryItem.id %}
        {% assign adjustment["availableDelta"] = inventory_new | minus: variant.inventoryQuantity %}
        {% assign index = inventory_item_adjustments.size %}
        {% assign inventory_item_adjustments[index] = adjustment %}
      {% endfor %}

      {% assign batch_size = 100 %}
      {% assign batch_count = inventory_item_adjustments.size | times: 1.0 | divided_by: batch_size | ceil %}
      {% for n in (1..batch_count) %}
        {% assign batch = array %}
        {% assign start_index = batch_size | times: forloop.index0 %}
        {% assign stop_index = start_index | plus: batch_size | minus: 1 %}

        {% for m in (start_index..stop_index) %}
          {% if inventory_item_adjustments[m] %}
            {% assign batch[batch.size] = inventory_item_adjustments[m] %}
          {% endif %}
        {% endfor %}

        {% action "shopify" %}
          mutation {
            inventoryBulkAdjustQuantityAtLocation(
              inventoryItemAdjustments: {{ batch | graphql_arguments }}
              locationId: {{ primary_location_id | json }}
            ) {
              inventoryLevels {
                id
              }
              userErrors {
                field
                message
              }
            }
          }
        {% endaction %}
      {% endfor %}
    {% endif %}
  {% endfor %}
{% endif %}
