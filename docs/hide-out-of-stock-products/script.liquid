{% assign out_of_stock_inventory_quantity = options.out_of_stock_inventory_quantity__number_required %}
{% assign sales_channel_names = options.sales_channel_names__required_array %}
{% assign inclusion_tags = options.only_include_products_with_any_of_these_tags__array %}
{% assign exclusion_tags = options.always_exclude_products_with_any_of_these_tags__array %}
{% assign email_notification_recipient = options.email_notification_recipient__email %}

{% comment %}
  -- get all of the sales channels in the shop
{% endcomment %}

{% capture query %}
  query {
    publications(first: 250) {
      nodes {
        id
        name
      }
    }
  }
{% endcapture %}

{% assign result = query | shopify %}

{% assign publication_ids = array %}
{% assign publication_names_by_id = hash %}

{% for publication in result.data.publications.nodes %}
  {% if sales_channel_names contains publication.name %}
    {% assign publication_ids[publication_ids.size] = publication.id %}
    {% assign publication_names_by_id[publication.id] = publication.name %}
  {% endif %}
{% endfor %}

{% comment %}
  -- make sure the configured sales channel names match what is in the shop; send alert email otherwise
{% endcomment %}

{% unless event.preview %}
  {% assign available_channels = result.data.publications.nodes | map: "name" %}

  {% if publication_ids.size != sales_channel_names.size %}
    {% error
      message: "Each sales channel configured in this task must exist in the shop. Check the list of available channels and verify each configured channel exists.",
      available_sales_channel_names: available_channels,
      configured_sales_channel_names: sales_channel_names
    %}
  {% endif %}
{% endunless %}

{% if event.preview %}
  {% action "shopify" %}
    mutation {
      publishableUnpublish1: publishableUnpublish(
        id: "gid://shopify/Product/1234567890"
        input: {
          publicationId: "gid://shopify/Publication/1234567809"
        }
      ) {
        userErrors {
          field
          message
        }
      }
    }
  {% endaction %}

  {% if email_notification_recipient != blank %}
    {% capture email_subject %}
      Out of stock: Short Sleeve T-shirt
    {% endcapture %}

    {% capture email_body %}
      Hi there,

      Your product is out of stock!

      <a href="https://{{ shop.domain }}/admin/products/12345">Manage this product</a>

      Thanks,
      - Mechanic, for {{ shop.name }}
    {% endcapture %}

    {% action "email" %}
      {
        "to": {{ email_notification_recipient | json }},
        "subject": {{ email_subject | unindent | strip | json }},
        "body": {{ email_body | unindent | strip | newline_to_br | json }}
      }
    {% endaction %}
  {% endif %}

{% elsif event.topic == "mechanic/user/trigger" %}
  {% assign unpublished_product_links = array %}
  {% assign cursor = nil %}
  {% assign search_query = out_of_stock_inventory_quantity | prepend: "inventory_total:<=" %}

  {% comment %}
    -- if inclusion or exclusion tags are configured, use them to refine the search query in order to reduce the number of products to be processed
  {% endcomment %}

  {% if inclusion_tags != blank %}
    {% assign inclusion_tag_filters = array %}

    {% for inclusion_tag in inclusion_tags %}
      {% assign inclusion_tag_filter
        = inclusion_tag
        | json
        | prepend: "tag:"
      %}
      {% assign inclusion_tag_filters = inclusion_tag_filters | push: inclusion_tag_filter %}
    {% endfor %}

    {% capture search_query %}{{ search_query }} AND ({{ inclusion_tag_filters | join: " OR " }}){% endcapture %}
  {% endif %}

  {% if exclusion_tags != blank %}
    {% assign exclusion_tag_filters = array %}

    {% for exclusion_tag in exclusion_tags %}
      {% assign exclusion_tag_filter
        = exclusion_tag
        | json
        | prepend: "tag_not:"
      %}
      {% assign exclusion_tag_filters = exclusion_tag_filters | push: exclusion_tag_filter %}
    {% endfor %}

    {% capture search_query -%}
      {{ search_query }} AND {{ exclusion_tag_filters | join: " AND " }}
    {%- endcapture %}
  {% endif %}

  {% log search_query: search_query %}

  {% comment %}
    -- use paginated query to get all products in the shop at or below the inventory threshold, optionaly filtered by inclusion or exclusion tags
  {% endcomment %}

  {% for n in (0..100) %}
    {% capture query %}
      query {
        products(
          first: 250
          after: {{ cursor | json }}
          query: {{ search_query | json }}
        ) {
          pageInfo {
            hasNextPage
            endCursor
          }
          nodes {
            id
            legacyResourceId
            title
            totalInventory
            tags
            {% for publication_id in publication_ids %}
              published{{ forloop.index }}: publishedOnPublication(publicationId: {{ publication_id | json }})
            {% endfor %}
          }
        }
      }
    {% endcapture %}

    {% assign result = query | shopify %}

    {% comment %}
      -- process this batch of returned products, unpublishing as needed and saving links for optional email output
    {% endcomment %}

    {% for product in result.data.products.nodes %}
      {% assign mutations = array %}
      {% assign publication_names = array %}

      {% for publication_id in publication_ids %}
        {% assign key = "published" | append: forloop.index %}

        {% if product[key] == false %}
          {% continue %}
        {% endif %}

        {% assign publication_names[publication_names.size] = publication_names_by_id[publication_id] %}

        {% capture mutation %}
          publishableUnpublish{{ forloop.index}}: publishableUnpublish(
            id: {{ product.id | json }}
            input: {
              publicationId: {{ publication_id | json }}
            }
          ) {
            userErrors {
              field
              message
            }
          }
        {% endcapture %}

        {% assign mutations[mutations.size] = mutation %}
      {% endfor %}

      {% if mutations != empty %}
        {% action "shopify" %}
          mutation {
            {{ mutations | join: newline }}
          }
        {% endaction %}

        {% capture link %}<li><a href="https://{{ shop.domain }}/admin/products/{{ product.legacyResourceId }}">{{ product.title }}</a> ({{ product.totalInventory }} - unpublished from {{ publication_names | join: ", " }})</li>{% endcapture %}

        {% assign unpublished_product_links[unpublished_product_links.size] = link %}
      {% endif %}
    {% endfor %}

    {% if result.data.products.pageInfo.hasNextPage %}
      {% assign cursor = result.data.products.pageInfo.endCursor %}
    {% else %}
      {% break %}
    {% endif %}
  {% endfor %}

  {% if unpublished_product_links == blank %}
    {% log "No products qualified to be unpublished during this task run." %}
    {% break %}
  {% endif %}

  {% if email_notification_recipient != blank %}
    {% capture email_subject %}
      Found {{ unpublished_product_links.size }} {{ unpublished_product_links.size | pluralize: "product", "products" }} out of stock
    {% endcapture %}

    {% capture email_body %}
      Hi there,
      <br><br>
      These products were found to be under your out of stock minimum quantity ({{ out_of_stock_inventory_quantity }}), when adding up the inventory for each product.
      <br>
      <ul>{{ unpublished_product_links | join: "" }}</ul>
      <br>
      Thanks,
      <br>
      - Mechanic, for {{ shop.name }}
    {% endcapture %}

    {% action "email" %}
      {
        "to": {{ email_notification_recipient | json }},
        "subject": {{ email_subject | unindent | strip | json }},
        "body": {{ email_body | unindent | strip | json }}
      }
    {% endaction %}
  {% endif %}

{% elsif event.topic contains "shopify/inventory_levels/" %}
  {% comment %}
    -- query the inventory level to get the product data needed for this task
  {% endcomment %}

  {% capture query %}
    query {
      inventoryLevel(
        id: {{ inventory_level.admin_graphql_api_id | json }}
      ) {
        item {
          variant {
            product {
              id
              legacyResourceId
              title
              totalInventory
              tags
              {% for publication_id in publication_ids %}
                published{{ forloop.index }}: publishedOnPublication(publicationId: {{ publication_id | json }})
              {% endfor %}
            }
          }
        }
      }
    }
  {% endcapture %}

  {% assign result = query | shopify %}

  {% assign product = result.data.inventoryLevel.item.variant.product %}

  {% comment %}
    -- check to see if product is included or excluded (i.e. whether to process) by any configured tags
  {% endcomment %}

  {% assign product_included_by_tag = nil %}
  {% assign product_excluded_by_tag = nil %}

  {% if inclusion_tags != blank %}
    {% for inclusion_tag in inclusion_tags %}
      {% if product.tags contains inclusion_tag %}
        {% assign product_included_by_tag = true %}
      {% endif %}
    {% endfor %}
  {% endif %}

  {% if exclusion_tags != blank %}
    {% for exclusion_tag in exclusion_tags %}
      {% if product.tags contains exclusion_tag %}
        {% assign product_excluded_by_tag = true %}
      {% endif %}
    {% endfor %}
  {% endif %}

  {% comment %}
    -- check if a product has been excluded first, then only if there are inclusion tags configured check if it has been included
  {% endcomment %}

  {% if product_excluded_by_tag %}
    {% log
      message: "Product was excluded by a configured tag and will not be processed by this task.",
      exclusion_tags: exclusion_tags,
      product: product
    %}
    {% break %}

  {% elsif inclusion_tags != blank %}
    {% unless product_included_by_tag %}
      {% log
        message: "Product was not included by any configured tag and will not be processed by this task.",
        inclusion_tags: inclusion_tags,
        product: product
      %}
      {% break %}
    {% endunless %}
  {% endif %}

  {% comment %}
    -- unpublish the product from the configured sales channels if it is at or below the configured out of stock threshold and optioanlly send email notification
  {% endcomment %}

  {% if product.totalInventory <= out_of_stock_inventory_quantity %}
    {% assign mutations = array %}
    {% assign publication_names = array %}

    {% for publication_id in publication_ids %}
      {% assign key = "published" | append: forloop.index %}

      {% if product[key] == false %}
        {% continue %}
      {% endif %}

      {% assign publication_names[publication_names.size] = publication_names_by_id[publication_id] %}

      {% capture mutation %}
        publishableUnpublish{{ forloop.index}}: publishableUnpublish(
          id: {{ product.id | json }}
          input: {
            publicationId: {{ publication_id | json }}
          }
        ) {
          userErrors {
            field
            message
          }
        }
      {% endcapture %}

      {% assign mutations[mutations.size] = mutation %}
    {% endfor %}

    {% if mutations != empty %}
      {% action "shopify" %}
        mutation {
          {{ mutations | join: newline }}
        }
      {% endaction %}

      {% if email_notification_recipient != blank %}
        {% capture email_subject %}
          Out of stock: {{ product.title }}
        {% endcapture %}

        {% capture email_body %}
          Hi there,

          Your product is out of stock! This product has been unpublished from: {{ publication_names | join: ", " }}.

          <a href="https://{{ shop.domain }}/admin/products/{{ product.legacyResourceId }}">Manage this product</a>

          Thanks,
          - Mechanic, for {{ shop.name }}
        {% endcapture %}

        {% action "email" %}
          {
            "to": {{ email_notification_recipient | json }},
            "subject": {{ email_subject | unindent | strip | json }},
            "body": {{ email_body | unindent | strip | newline_to_br | json }}
          }
        {% endaction %}
      {% endif %}
    {% endif %}
  {% endif %}
{% endif %}
