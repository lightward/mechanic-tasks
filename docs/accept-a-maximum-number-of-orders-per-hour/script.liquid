{% comment %}
  Options order:

  {{ options.maximum_hourly_orders__number_required }}
  {{ options.only_clear_inventory_for_products_with_this_tag }}
  {{ options.restore_inventory_levels_the_next_hour__boolean }}
  {{ options.restore_inventory_levels_on_demand__boolean }}
{% endcomment %}

{% if options.maximum_hourly_orders__number_required <= 0 %}
  {% error "'Maximum hourly orders' must be at least 1. :)" %}
{% endif %}

{% if event.topic contains "shopify/orders" %}
  {% assign cursor = nil %}
  {% assign orders_this_hour = 0 %}
  {% assign previous_hour = "now" | date: "%Y-%m-%dT%H:00:00%z" %}
  {% assign previous_hour_s = previous_hour | date: "%s" %}
  {% assign cache_key = "inventory_to_restore:" | append: previous_hour_s %}
  {% assign inventory_levels_to_zero = cache[cache_key] | default: hash %}

  {% for n in (0..100) %}
    {% capture query %}
      query {
        orders(
          first: 250
          after: {{ cursor | json }}
          query: "created_at:>=\"{{ previous_hour }}\" -status:cancelled"
        ) {
          pageInfo {
            hasNextPage
          }
          edges {
            cursor
          }
        }
      }
    {% endcapture %}

    {% assign result = query | shopify %}

    {% if event.preview %}
      {% capture result_json %}
        {
          "data": {
            "orders": {
              "pageInfo": {
                "hasNextPage": false
              },
              "edges": [
                {% for n in (1..options.maximum_hourly_orders__number_required) %}
                  {
                    "cursor": "eyJsYXN0X2lkIjoyMTQ4MTQ2MjQ5NzczLCJsYXN0X3ZhbHVlIjoiMjAyMC0wNC0wMyAxNzowMjoxMyJ9"
                  }{% unless forloop.last %},{% endunless %}
                {% endfor %}
              ]
            }
          }
        }
      {% endcapture %}

      {% assign result = result_json | parse_json %}
    {% endif %}

    {% assign orders_this_hour = orders_this_hour | plus: result.data.orders.edges.size %}

    {% if result.data.orders.pageInfo.hasNextPage %}
      {% assign cursor = result.data.orders.edges.last.cursor %}
    {% else %}
      {% break %}
    {% endif %}
  {% endfor %}

  {% log orders_this_hour_thus_far: orders_this_hour %}

  {% if orders_this_hour == options.maximum_hourly_orders__number_required %}
    {% assign cursor = nil %}

    {% for n in (0..2000) %}
      {% capture query %}
        query {
          inventoryItems(
            first: 4
            after: {{ cursor | json }}
          ) {
            pageInfo {
              hasNextPage
            }
            edges {
              cursor
              node {
                variant {
                  product {
                    tags
                  }
                }
                inventoryLevels(
                  first: 100
                ) {
                  edges {
                    node {
                      id
                      quantities(names: "available") {
                        name
                        quantity
                      }
                    }
                  }
                }
              }
            }
          }
        }
      {% endcapture %}

      {% assign result = query | shopify %}

      {% if event.preview %}
        {% capture result_json %}
          {
            "data": {
              "inventoryItems": {
                "pageInfo": {
                  "hasNextPage": false
                },
                "edges": [
                  {
                    "cursor": "eyJsYXN0X2lkIjozNTIxODc4MTAxMjAxMywibGFzdF92YWx1ZSI6IjM1MjE4NzgxMDEyMDEzIn0=",
                    "node": {
                      "variant": {
                        "product": {
                          "tags": [
                            {% if options.only_clear_inventory_for_products_with_this_tag != blank %}
                              {{ options.only_clear_inventory_for_products_with_this_tag | json }}
                            {% endif %}
                          ]
                        }
                      },
                      "inventoryLevels": {
                        "edges": [
                          {
                            "node": {
                              "id": "gid://shopify/InventoryLevel/1234567890?inventory_item_id=1234567890",
                              "quantities": [
                                {
                                  "name": "available",
                                  "quantity": 20
                                }
                              ]
                            }
                          }
                        ]
                      }
                    }
                  }
                ]
              }
            }
          }
        {% endcapture %}

        {% assign result = result_json | parse_json %}
      {% endif %}

      {% for inventoryItem_edge in result.data.inventoryItems.edges %}
        {% if options.only_clear_inventory_for_products_with_this_tag != blank %}
          {% unless inventoryItem_edge.node.variant.product.tags contains options.only_clear_inventory_for_products_with_this_tag %}
            {% continue %}
          {% endunless %}
        {% endif %}

        {% for inventoryLevel_edge in inventoryItem_edge.node.inventoryLevels.edges %}
          {% if inventoryLevel_edge.node.quantities.first.quantity <= 0 %}
            {% continue %}
          {% endif %}

          {% assign inventory_levels_to_zero[inventoryLevel_edge.node.id] = inventoryLevel_edge.node.quantities.first.quantity %}
        {% endfor %}
      {% endfor %}

      {% if result.data.inventoryItems.pageInfo.hasNextPage %}
        {% assign cursor = result.data.inventoryItems.edges.last.cursor %}
      {% else %}
        {% break %}
      {% endif %}
    {% endfor %}

    {% if inventory_levels_to_zero.size > 0 %}
      {% for keyval in inventory_levels_to_zero %}
        {% assign inventory_level_id = keyval[0] %}
        {% assign inventory_level_available = keyval[1] %}

        {% action "shopify" %}
          mutation {
            inventoryAdjustQuantity(
              input: {
                inventoryLevelId: {{ inventory_level_id | json }}
                availableDelta: {{ inventory_level_available | times: -1 | json }}
              }
            ) {
              inventoryLevel {
                quantities(names: "available") {
                  name
                  quantity
                }
              }
              userErrors {
                field
                message
              }
            }
          }
        {% endaction %}
      {% endfor %}

      {% if options.restore_inventory_levels_the_next_hour__boolean or options.restore_inventory_levels_on_demand__boolean %}
        {% action "cache", "set", cache_key, inventory_levels_to_zero %}
      {% endif %}
    {% endif %}
  {% endif %}
{% elsif event.topic contains "mechanic/" %}
  {% assign proceed = false %}

  {% if event.topic == "mechanic/scheduler/hourly" and options.restore_inventory_levels_the_next_hour__boolean %}
    {% assign proceed = true %}
  {% elsif event.topic == "mechanic/user/trigger" and options.restore_inventory_levels_on_demand__boolean %}
    {% assign proceed = true %}
  {% endif %}

  {% if proceed %}
    {% assign hour_in_s = 60 | times: 60 %}
    {% assign previous_hour = "now" | date: "%s" | minus: hour_in_s | date: "%Y-%m-%dT%H:00:00%z" %}
    {% assign previous_hour_s = previous_hour | date: "%s" %}
    {% assign cache_key = "inventory_to_restore:" | append: previous_hour_s %}

    {% assign inventory_levels_to_restore = cache[cache_key] | default: hash %}

    {% if inventory_levels_to_restore == blank %}
      {% assign previous_hour = "now" | date: "%Y-%m-%dT%H:00:00%z" %}
      {% assign previous_hour_s = previous_hour | date: "%s" %}
      {% assign cache_key = "inventory_to_restore:" | append: previous_hour_s %}
      {% assign inventory_levels_to_restore = cache[cache_key] | default: hash %}
    {% endif %}

    {% if event.preview %}
      {% assign inventory_levels_to_restore = hash %}
      {% assign id = "gid://shopify/InventoryLevel/1234567890?inventory_item_id=1234567890" %}
      {% assign inventory_levels_to_restore[id] = 20 %}
    {% endif %}

    {% log inventory_levels_to_restore_count: inventory_levels_to_restore.size, inventory_levels_to_restore: inventory_levels_to_restore, since: previous_hour %}

    {% for keyval in inventory_levels_to_restore %}
      {% assign inventory_level_id = keyval[0] %}
      {% assign inventory_level_available = keyval[1] %}

      {% action "shopify" %}
        mutation {
          inventoryAdjustQuantity(
            input: {
              inventoryLevelId: {{ inventory_level_id | json }}
              availableDelta: {{ inventory_level_available | json }}
            }
          ) {
            inventoryLevel {
              available
            }
            userErrors {
              field
              message
            }
          }
        }
      {% endaction %}
    {% endfor %}

    {% if inventory_levels_to_restore != blank %}
      {% action "cache", "del", cache_key %}
    {% endif %}
  {% endif %}
{% endif %}
