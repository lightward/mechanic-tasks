{% assign back_in_stock_inventory_level = options.back_in_stock_inventory_level__number_required %}
{% assign product_tags_and_maximum_age_in_days = options.product_tags_and_maximum_age_in_days__keyval_number_required %}

{% assign now_s = "now" | date: "%s"%}

{% if event.topic == "mechanic/user/trigger" or event.topic contains "mechanic/scheduler" %}
  {% comment %}
    -- run bulk op query for all products in the shop, to get inventory, tags, and metafield values
  {% endcomment %}

  {% capture bulk_operation_query %}
    query {
      products {
        edges {
          node {
            __typename
            id
            title
            tags
            totalInventory
            back_in_stock_metafield: metafield(
              namespace: "mechanic"
              key: "back_in_stock_s"
            ) {
              value
            }
            back_in_stock_first_seen_metafield: metafield(
              namespace: "mechanic"
              key: "back_in_stock_first_seen_s"
            ) {
              value
            }
          }
        }
      }
    }
  {% endcapture %}

  {% action "shopify" %}
    mutation {
      bulkOperationRunQuery(
        query: {{ bulk_operation_query | json }}
      ) {
        bulkOperation {
          id
          status
        }
        userErrors {
          field
          message
        }
      }
    }
  {% endaction %}

{% elsif event.topic == "mechanic/shopify/bulk_operation" %}
  {% if event.preview %}
    {% capture bulkOperation_objects_jsonl %}
      {"id":"gid:\/\/shopify\/Product\/1234567890","back_in_stock_metafield":{"value": {{ now_s | json }}},"back_in_stock_first_seen_metafield":{"value": "1"}}
      {"id":"gid:\/\/shopify\/Product\/2345678901","tags":[{{ product_tags_and_maximum_age_in_days.first.first | json }}],"back_in_stock_first_seen_metafield":{"value": "1"}}
      {"id":"gid:\/\/shopify\/Product\/3456789012","tags":[{{ product_tags_and_maximum_age_in_days.first.first | json }}]}
    {% endcapture %}

    {% assign bulkOperation = hash %}
    {% assign bulkOperation["objects"] = bulkOperation_objects_jsonl | parse_jsonl %}
  {% endif %}

  {% comment %}
    -- loop through products and decide which tags should be added/removed based only on metafield values; inventory is not checked here
  {% endcomment %}

  {% assign first_seen_product_ids = array %}

  {% for product in bulkOperation.objects %}
    {% comment %}
      -- check if this product has been seen by this task before; if not, save the ID and move to next product
    {% endcomment %}

    {% if product.back_in_stock_first_seen_metafield == blank %}
      {% assign first_seen_product_ids = first_seen_product_ids | push: product.id %}
      {% continue %}
    {% endif %}

    {% assign back_in_stock_s = product.back_in_stock_metafield.value | times: 1 %}
    {% assign back_in_stock_first_seen_s = product.back_in_stock_first_seen_metafield.value | times: 1 %}

    {% assign do_not_add_tags = nil %}

    {% comment %}
      -- don't add tags unless the back in stock timestamp value is newer than the first seen timestamp
    {% endcomment %}

    {% unless back_in_stock_s > back_in_stock_first_seen_s %}
      {% assign do_not_add_tags = true %}
    {% endunless %}

    {% comment %}
      -- check the threshold times for each tag
    {% endcomment %}

    {% assign tags_to_add = array %}
    {% assign tags_to_remove = array %}

    {% for keyval in product_tags_and_maximum_age_in_days %}
      {% assign tag = keyval[0] %}
      {% assign maximum_age_s = keyval[1] | times: 86400 %}
      {% assign threshold_timestamp_s = now_s | minus: maximum_age_s %}

      {% if back_in_stock_s >= threshold_timestamp_s %}
        {% unless product.tags contains tag or do_not_add_tags %}
          {% assign tags_to_add[tags_to_add.size] = tag %}
        {% endunless %}

      {% else %}
        {% comment %}
          -- back in stock metafield doesn't exist or the value doesn't exceed the threshold; remove tag if it is present
        {% endcomment %}

        {% if product.tags contains tag %}
          {% assign tags_to_remove[tags_to_remove.size] = tag %}
        {% endif %}
      {% endif %}
    {% endfor %}

    {% if tags_to_add != blank or tags_to_remove != blank %}
      {% action "shopify" %}
        mutation {
          {% if tags_to_add != blank %}
            tagsAdd(
              id: {{ product.id | json }}
              tags: {{ tags_to_add | json }}
            ) {
              userErrors {
                field
                message
              }
            }
          {% endif %}

          {% if tags_to_remove != blank %}
            tagsRemove(
              id: {{ product.id | json }}
              tags: {{ tags_to_remove | json }}
            ) {
              userErrors {
                field
                message
              }
            }
          {% endif %}
        }
      {% endaction %}
    {% endif %}
  {% endfor %}

  {% comment %}
    -- set a metafield timestamp value of "now" on any products that were first seen on this run
  {% endcomment %}

  {% if first_seen_product_ids != blank %}
    {% log
      message: "Products first seen on this task run, which will have a first seen metafield set, but will not have new tags added.",
      first_seen_product_ids: first_seen_product_ids
    %}

    {% assign groups_of_product_ids = first_seen_product_ids | in_groups_of: 25, fill_with: false %}

    {% for group_of_product_ids in groups_of_product_ids %}
      {% action "shopify" %}
        mutation {
          metafieldsSet(
            metafields: [
              {% for product_id in group_of_product_ids %}
                {
                  ownerId: {{ product_id | json }}
                  namespace: "mechanic"
                  key: "back_in_stock_first_seen_s"
                  type: "number_integer"
                  value: {{ now_s | json }}
                }
              {% endfor %}
            ]
          ) {
            userErrors {
              code
              field
              message
            }
          }
        }
      {% endaction %}
    {% endfor %}
  {% endif %}

{% elsif event.topic contains "shopify/inventory_levels/" %}
  {% comment %}
    -- on inventory level changes, check the total inventory and set metafields as needed; no tagging decisions occur here
  {% endcomment %}

  {% capture query %}
    query {
      inventoryLevel(id: {{ inventory_level.admin_graphql_api_id | json }}) {
        item {
          variant {
            product {
              id
              totalInventory
              back_in_stock_metafield: metafield(
                namespace: "mechanic"
                key: "back_in_stock_s"
              ) {
                id
                value
              }
              back_in_stock_first_seen_metafield: metafield(
                namespace: "mechanic"
                key: "back_in_stock_first_seen_s"
              ) {
                id
                value
              }
            }
          }
        }
      }
    }
  {% endcapture %}

  {% assign result = query | shopify %}

  {% if event.preview %}
    {% capture result_json %}
      {
        "data": {
          "inventoryLevel": {
            "item": {
              "variant": {
                "product": {
                  "id": "gid://shopify/Product/1234567890",
                  "totalInventory": {{ back_in_stock_inventory_level }}
                }
              }
            }
          }
        }
      }
    {% endcapture %}

    {% assign result = result_json | parse_json %}
  {% endif %}

  {% assign product = result.data.inventoryLevel.item.variant.product %}

  {% log product: product, back_in_stock_inventory_level: back_in_stock_inventory_level %}

  {% assign metafield_inputs = array %}

  {% comment %}
    -- save the first seen time in a metafield if it doesn't already exist
  {% endcomment %}

  {% if product.back_in_stock_first_seen_metafield == blank %}
    {% assign metafield_input = hash %}
    {% assign metafield_input["namespace"] = "mechanic" %}
    {% assign metafield_input["key"] = "back_in_stock_first_seen_s" %}
    {% assign metafield_input["type"] = "number_integer" %}
    {% assign metafield_input["value"] = now_s %}
    {% assign metafield_inputs = metafield_inputs | push: metafield_input %}
  {% endif %}

  {% if product.totalInventory >= back_in_stock_inventory_level %}
    {% comment %}
      -- product inventory meets the back in stock threshold; save the time in the metafield IF a value does not already exist
    {% endcomment %}

    {% if product.back_in_stock_metafield == blank %}
      {% assign metafield_input = hash %}
      {% assign metafield_input["namespace"] = "mechanic" %}
      {% assign metafield_input["key"] = "back_in_stock_s" %}
      {% assign metafield_input["type"] = "number_integer" %}
      {% assign metafield_input["value"] = now_s %}
      {% assign metafield_inputs = metafield_inputs | push: metafield_input %}
    {% endif %}

  {% elsif product.back_in_stock_metafield != blank  %}
    {% comment %}
      -- product inventory is less than the back in stock threshold and the back in stock metafield exists; delete it
    {% endcomment %}

    {% action "shopify" %}
      mutation {
        metafieldDelete(
          input: {
            id: {{ product.back_in_stock_metafield.id | json }}
          }
        ) {
          userErrors {
            field
            message
          }
        }
      }
    {% endaction %}
  {% endif %}

  {% if metafield_inputs != blank %}
    {% action "shopify" %}
      mutation {
        productUpdate(
          input: {
            id: {{ product.id | json }}
            metafields: {{ metafield_inputs | graphql_arguments }}
          }
        ) {
          userErrors {
            field
            message
          }
        }
      }
    {% endaction %}
  {% endif %}

{% elsif event.topic contains "shopify/products/create" %}
  {% comment %}
    -- for new products, set the first seen metafield value using the product created date
  {% endcomment %}

  {% action "shopify" %}
    mutation {
      metafieldsSet(
        metafields: [
          {
            ownerId: {{ product.admin_graphql_api_id | json }}
            namespace: "mechanic"
            key: "back_in_stock_first_seen_s"
            type: "number_integer"
            value: {{ product.created_at | date: "%s" | json }}
          }
        ]
      ) {
        userErrors {
          code
          field
          message
        }
      }
    }
  {% endaction %}
{% endif %}
