{% comment %}
  Preferred option order

  {{ options.only_process_orders_having_this_tag }}
  {{ options.ignore_orders_having_this_tag }}
  {{ options.period_to_wait_before_checking_each_order__number_required }}
  {{ options.period_to_wait_is_in_hours__boolean }}
  {{ options.period_to_wait_is_in_days__boolean }}
  {{ options.tag_to_add_to_the_order }}
  {{ options.void_payment_when_possible__boolean }}
  {{ options.restock_line_items__boolean }}
  {{ options.send_cancellation_email_to_customer__boolean }}
  {{ options.test_mode__boolean }}
{% endcomment %}

{% if options.period_to_wait_before_checking_each_order__number_required <= 0 %}
  {% error "Period must be positive! :)" %}
{% elsif options.period_to_wait_is_in_hours__boolean == false and options.period_to_wait_is_in_days__boolean == false %}
  {% error "Choose either 'Period to wait is in hours' or 'Period to wait is in days'." %}
{% elsif options.period_to_wait_is_in_hours__boolean and options.period_to_wait_is_in_days__boolean %}
  {% error "Choose exactly one of 'Period to wait is in hours' or 'Period to wait is in days'. :)" %}
{% elsif options.period_to_wait_is_in_hours__boolean %}
  {% assign period_unit = 60 | times: 60 %}
{% elsif options.period_to_wait_is_in_days__boolean %}
  {% assign period_unit = 60 | times: 60 | times: 24 %}
{% endif %}

{% assign period_s = period_unit | times: options.period_to_wait_before_checking_each_order__number_required %}
{% assign maximum_date_s = "now" | date: "%s" | minus: period_s %}

{% if options.test_mode__boolean %}
  {% assign test_mode_summaries = array %}
{% endif %}

{% capture orders_query %}
  financial_status:pending
  {% if options.only_process_orders_having_this_tag != blank %}
    AND tag:{{ options.only_process_orders_having_this_tag | strip | json }}
  {% endif %}
  {% if options.ignore_orders_having_this_tag != blank %}
    AND -tag:{{ options.ignore_orders_having_this_tag | strip | json }}
  {% endif %}
{% endcapture %}

{% assign orders_query = orders_query | strip_newlines %}

{% log orders_query: orders_query %}

{% assign cursor = nil %}

{% for n in (0..100) %}
  {% capture query %}
    query {
      orders(
        first: 50
        after: {{ cursor | json }}
        query: {{ orders_query | json }}
      ) {
        pageInfo {
          hasNextPage
        }
        edges {
          cursor
          node {
            id
            legacyResourceId
            name
            createdAt
            processedAt
            cancelledAt
            closedAt
            tags
            suggestedRefund(suggestFullRefund: true) {
              refundLineItems {
                lineItem {
                  id
                  fulfillableQuantity
                  quantity
                  restockable
                }
                location {
                  id
                }
              }
            }
            transactions {
              id
              gateway
            }
          }
        }
      }
    }
  {% endcapture %}

  {% assign result = query | shopify %}

  {% if event.preview %}
    {% capture result_json %}
      {
        "data": {
          "orders": {
            "edges": [
              {
                "node": {
                  "id": "gid://shopify/Order/1234567890",
                  "legacyResourceId": "1234567890",
                  "name": "#1234",
                  "processedAt": "1990-01-01",
                  "cancelledAt": null,
                  "closedAt": null,
                  "tags": [
                    {{ options.only_process_orders_having_this_tag | strip | json }}
                  ],
                  "suggestedRefund": {
                    "refundLineItems": [
                      {
                        "lineItem": {
                          "id": "gid://shopify/LineItem/1234567890",
                          "fulfillableQuantity": 5,
                          "restockable": true
                        },
                        "location": {
                          "id": "gid://shopify/Location/1234567890"
                        }
                      }
                    ]
                  },
                  "transactions": [
                    {
                      "id": "gid://shopify/OrderTransaction/1234567890",
                      "gateway": "bogus"
                    }
                  ]
                }
              }
            ]
          }
        }
      }
    {% endcapture %}

    {% assign result = result_json | parse_json %}
  {% endif %}

  {% for edge in result.data.orders.edges %}
    {% assign order = edge.node %}

    {% assign processed_at_s = order.processedAt | default: order.createdAt | date: "%s" | times: 1 %}

    {% if processed_at_s > maximum_date_s %}
      {% continue %}
    {% endif %}

    {% assign summary = hash %}
    {% assign summary["order_name"] = order.name %}
    {% assign summary["order_id"] = order.id %}
    {% assign summary["order_processed_at"] = processed_at_s | date: "%FT%T%:z" %}
    {% assign summary["threshold_processed_at"] = maximum_date_s | date: "%FT%T%:z" %}

    {% if order.cancelledAt == blank %}
      {% assign summary["qualifies_for_cancellation"] = true %}
    {% else %}
      {% assign summary["qualifies_for_cancellation"] = false %}
    {% endif %}

    {% if order.closedAt == blank %}
      {% assign summary["qualifies_for_closing"] = true %}
    {% else %}
      {% assign summary["qualifies_for_closing"] = false %}
    {% endif %}

    {% assign summary["qualifies_for_tagging"] = false %}
    {% if options.tag_to_add_to_the_order != blank %}
      {% assign order_tags = order.tags | join: "," | downcase | split: "," %}
      {% assign order_tag_to_match = options.tag_to_add_to_the_order | downcase | strip %}
      {% unless order_tags contains order_tag_to_match %}
        {% assign summary["qualifies_for_tagging"] = true %}
      {% endunless %}
    {% endif %}

    {% unless summary.qualifies_for_cancellation or summary.qualifies_for_closing or summary.qualifies_for_tagging %}
      {% continue %}
    {% endunless %}

    {% if options.test_mode__boolean %}
      {% assign test_mode_summaries[test_mode_summaries.size] = summary %}
      {% continue %}
    {% endif %}

    {% log summary %}

    {% if summary.qualifies_for_cancellation %}
      {% action "shopify" %}
        mutation {
          refundCreate(input: {
            orderId: {{ order.id | json }}
            {% assign transaction = order.transactions.first %}
            {% if options.void_payment_when_possible__boolean and transaction != nil %}
              transactions: [
                {
                  amount: "0.0"
                  gateway: {{ transaction.gateway | json }}
                  kind: VOID
                  orderId: {{ order.id | json }}
                  parentId: {{ transaction.id | json }}
                }
              ]
            {% endif %}
            refundLineItems: [
              {% for refund_line_item in order.suggestedRefund.refundLineItems %}
                {% assign line_item = refund_line_item.lineItem %}
                {
                  lineItemId: {{ line_item.id | json }}
                  {% if options.restock_line_items__boolean and line_item.restockable %}
                    locationId: {{ refund_line_item.location.id | json }}
                    quantity: {{ line_item.fulfillableQuantity | default: line_item.quantity | json }}
                    restockType: CANCEL
                  {% else %}
                    quantity: 0
                    restockType: NO_RESTOCK
                  {% endif %}
                }
                {% unless forloop.last %}
                  ,
                {% endunless %}
              {% endfor %}
            ]
            notify: false
            note: {{ task.name | json }}
          }) {
            userErrors {
              field
              message
            }
          }
        }
      {% endaction %}

      {% action "shopify" %}
        [
          "post",
          "/admin/orders/{{ order.legacyResourceId }}/cancel.json",
          {
            "email": {{ options.send_cancellation_email_to_customer__boolean | json }}
          }
        ]
      {% endaction %}
    {% endif %}

    {% if summary.qualifies_for_closing or summary.qualifies_for_tagging %}
      {% action "shopify" %}
        mutation {
          {% if summary.qualifies_for_closing %}
            orderClose(
              input: {
                id: {{ order.id | json }}
              }
            ) {
              order {
                closed
                closedAt
              }
              userErrors {
                field
                message
              }
            }
          {% endif %}

          {% if summary.qualifies_for_tagging %}
            tagsAdd(
              id: {{ order.id | json }}
              tags: {{ options.tag_to_add_to_the_order | json }}
            ) {
              userErrors {
                field
                message
              }
            }
          {% endif %}
        }
      {% endaction %}
    {% endif %}
  {% endfor %}

  {% if result.data.orders.pageInfo.hasNextPage %}
    {% assign cursor = result.data.orders.edges.last.cursor %}
  {% else %}
    {% break %}
  {% endif %}
{% endfor %}

{% if options.test_mode__boolean %}
  {% action "echo" orders_count: test_mode_summaries.size, order_summaries: test_mode_summaries %}
{% endif %}
