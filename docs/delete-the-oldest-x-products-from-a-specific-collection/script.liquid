{% assign collection_id = options.collection_id__number_required %}
{% assign number_of_products_to_delete_at_once = options.number_of_products_to_delete_at_once__number_required %}
{% assign test_mode = options.test_mode__boolean %}

{% if number_of_products_to_delete_at_once > 250 %}
  {% error "This task only supports deleting up to 250 products in a single task run." %}
{% endif %}

{% comment %}
  -- get X oldest products that are in the collection
{% endcomment %}

{% capture query %}
  query {
    collection(id: {{ collection_id | prepend: "gid://shopify/Collection/" | json }}) {
      products(
        first: {{ number_of_products_to_delete_at_once }}
        sortKey: CREATED
      ) {
        nodes {
          id
          title
          createdAt
        }
      }
    }
  }
{% endcapture %}

{% assign result = query | shopify %}

{% if event.preview %}
  {% capture result_json %}
    {
      "data": {
        "collection": {
          "products": {
            "nodes": [
              {
                "id": "gid://shopify/Product/1234567890",
                "createdAt": "2020-02-02T01:01:00Z"
              }
            ]
          }
        }
      }
    }
  {% endcapture %}

  {% assign result = result_json | parse_json %}
{% endif %}

{% assign collection = result.data.collection %}
{% assign products = collection.products.nodes %}

{% if collection == blank %}
  {% error "Unable to find a collection by the configured ID in this shop." %}
{% endif %}

{% log products_to_delete: products %}

{% if test_mode %}
  {% break %}
{% endif %}

{% comment %}
  -- delete all returned products asynchronously in case they have many variants and/or media (which could cause an API timeout)
{% endcomment %}

{% for product in collection.products.nodes %}
  {% action "shopify" %}
    mutation {
      productDelete(
        input: {
          id: {{ product.id | json }}
        }
        synchronous: false
      ) {
        productDeleteOperation {
          id
          product {
            legacyResourceId
            title
          }
        }
        userErrors {
          field
          message
        }
      }
    }
  {% endaction %}
{% endfor %}
