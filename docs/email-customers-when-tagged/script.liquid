{% assign approval_tag = options.tag_to_watch_for__required %}

{% if options.ignore_tag_case__boolean %}
  {% assign approval_tag = options.tag_to_watch_for__required | downcase %}
{% endif %}

{% capture email_sent_tag %}{{ approval_tag }}-email-sent{% endcapture %}
{% assign tag_processed_metafield_key = task.created_at | date: "%s" | append: approval_tag | append: "tag-processed" | sha256 | slice: 0, 5 | prepend: "-" | prepend: approval_tag %}
{% assign customers_scanned_metafield_key = task.created_at | date: "%s" | append: approval_tag | append: "customers-scanned" | sha256 | slice: 0, 5 | prepend: "-" | prepend: approval_tag %}

{% if event.topic contains "shopify/customers/" %}
  {% assign customer_tags = customer.tags | split: ", " %}

  {% if options.ignore_tag_case__boolean %}
    {% assign customer_tags = customer.tags | downcase | split: ", " %}
  {% endif %}

  {% assign customer_qualifies = true %}
  {% unless customer_tags contains approval_tag %}
    {% assign customer_qualifies = false %}
    {% log "The customer does not have the required tag." %}
  {% endunless %}

  {% if options.autotag_customers_after_emailing__boolean %}
    {% if customer_tags contains email_sent_tag %}
      {% assign customer_qualifies = false %}
      {% log "According to the customer's tags, this customer has already received this email." %}
    {% endif %}
  {% endif %}

  {% if customer_qualifies %}
    {% capture query %}
      query {
        customer(id: {{ customer.admin_graphql_api_id | json }}) {
          metafield(namespace: "mechanic", key: {{ tag_processed_metafield_key | json }}) {
            value
          }
        }
      }
    {% endcapture %}
    {% assign result = query | shopify %}

    {% if event.preview %}
      {% capture result_json %}
        {
          "data": {
            "customer": {
              "metafield": {
                "value": "1"
              }
            }
          }
        }
      {% endcapture %}
      {% assign result = result_json | parse_json %}
    {% endif %}

    {% if result.data.customer.metafield %}
      {% assign customer_qualifies = false %}
      {% log "According to a stored metafield, this customer has already received this email, or was already tagged when this task was initially set up." %}
    {% endif %}
  {% endif %}

  {% if customer_qualifies %}
    {% capture query %}
      query {
        shop {
          metafield(namespace: "mechanic", key: {{ customers_scanned_metafield_key | json }}) {
            value
          }
        }
      }
    {% endcapture %}
    {% assign result = query | shopify %}

    {% if event.preview %}
      {% capture result_json %}
        {
          "data": {
            "shop": {
              "metafield": {
                "value": "1"
              }
            }
          }
        }
      {% endcapture %}
      {% assign result = result_json | parse_json %}
    {% endif %}

    {% if result.data.shop.metafield == nil %}
      {% error "Please use this task's 'Run task' button to manually scan your existing customers. Mechanic will take note of everyone who's already tagged, so as to *not* send them an email in the future." %}
    {% endif %}
  {% endif %}

  {% if event.preview or customer_qualifies %}
    {% action "email" %}
      {
        "to": {{ customer.email | json }},
        "subject": {{ options.email_subject__required | json }},
        "body": {{ options.email_body__required_multiline | strip | newline_to_br | json }},
        "reply_to": {{ shop.customer_email | json }},
        "from_display_name": {{ shop.name | json }}
      }
    {% endaction %}

    {% action "shopify" %}
      mutation {
        {% if options.autotag_customers_after_emailing__boolean %}
          tagsAdd(
            id: {{ customer.admin_graphql_api_id | json }}
            tags: {{ email_sent_tag | json }}
          ) {
            userErrors {
              field
              message
            }
          }
        {% endif %}

        customerUpdate(input: {
          id: {{ customer.admin_graphql_api_id | json }}
          metafields: [
            {
              namespace: "mechanic"
              key: {{ tag_processed_metafield_key | json }}
              type: "number_integer"
              value: "1"
            }
          ]
        }) {
          userErrors {
            field
            message
          }
        }
      }
    {% endaction %}
  {% endif %}
{% elsif event.topic == "mechanic/user/trigger" %}
  {% assign customer_ids_to_mark = array %}
  {% assign cursor = nil %}

  {% for n in (0..100) %}
    {% capture query %}
      query {
        customers(
          first: 250
          query: {{ approval_tag | json | prepend: "tag:" | json }}
          after: {{ cursor | json }}
        ) {
          pageInfo {
            hasNextPage
          }
          edges {
            cursor
            node {
              id
              metafield(
                namespace: "mechanic"
                key: {{ tag_processed_metafield_key | json }}
              ) {
                value
              }
            }
          }
        }
      }
    {% endcapture %}

    {% assign result = query | shopify %}

    {% if event.preview %}
      {% capture result_json %}
        {
          "data": {
            "customers": {
              "pageInfo": {
                "hasNextPage": false
              },
              "edges": [
                {
                  "node": {
                    "id": "gid://shopify/Customer/1234567890",
                    "metafield": null
                  }
                }
              ]
            }
          }
        }
      {% endcapture %}

      {% assign result = result_json | parse_json %}
    {% endif %}

    {% for edge in result.data.customers.edges %}
      {% if edge.node.metafield %}
        {% continue %}
      {% endif %}

      {% assign customer_ids_to_mark[customer_ids_to_mark.size] = edge.node.id %}
    {% endfor %}

    {% if result.data.customers.pageInfo.hasNextPage %}
      {% assign cursor = result.data.customers.edges.last.cursor %}
    {% else %}
      {% break %}
    {% endif %}
  {% endfor %}

  {% assign metafields = array %}

  {% for customer_id in customer_ids_to_mark %}
    {% capture metafield %}
      {
        ownerId: {{ customer_id | json }}
        namespace: "mechanic"
        key: {{ tag_processed_metafield_key | json }}
        type: "number_integer"
        value: "1"
      }
    {% endcapture %}

    {% assign metafields = metafields | push: metafield %}
  {% endfor %}

  {% assign groups_of_metafields = metafields | in_groups_of: 25, fill_with: false %}

  {% for group_of_metafields in groups_of_metafields %}
    {% action "shopify" %}
      mutation {
        metafieldsSet(
          metafields: [
            {{ group_of_metafields | join: newline }}
          ]
        ) {
          metafields {
            id
            namespace
            key
            type
            value
            owner {
              ... on Customer {
                id
              }
            }
          }
          userErrors {
            code
            field
            message
          }
        }
      }
    {% endaction %}
  {% endfor %}

  {% action "shopify" %}
    mutation {
      metafieldsSet(
        metafields: [
          {
            ownerId: {{ "gid://shopify/Shop/" | append: shop.id | json }}
            namespace: "mechanic"
            key: {{ customers_scanned_metafield_key | json }}
            type: "number_integer"
            value: "1"
          }
        ]
      ) {
        metafields {
          id
          namespace
          key
          type
          value
          owner {
            ... on Shop {
              id
            }
          }
        }
        userErrors {
          code
          field
          message
        }
      }
    }
  {% endaction %}
{% endif %}
