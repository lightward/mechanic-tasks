{
  "docs": "This task removes the matched tags from all products in your shop. Optionally, choose to remove partial tag matches as well (e.g. configured tag: \"sale\", matched tags: \"sale\", \"sale 10\", \"on sale\", etc.).\n\n**Important!** - First run this task with \"Test mode\" enabled, and it will only log out the products and matched tags that it will delete, without making actual tag updates. This is especially important when choosing to remove partal tag matches.",
  "halt_action_run_sequence_on_error": false,
  "name": "Remove matched tags from all products",
  "online_store_javascript": null,
  "options": {
    "tags_list__required_array": null,
    "remove_partial_tag_matches__boolean": null,
    "test_mode__boolean": true
  },
  "order_status_javascript": null,
  "perform_action_runs_in_sequence": false,
  "preview_event_definitions": [],
  "script": "{% assign tags_list = options.tags_list__required_array %}\n{% assign remove_partial_tag_matches = options.remove_partial_tag_matches__boolean %}\n{% assign test_mode = options.test_mode__boolean %}\n\n{% comment %}\n  -- tag searches are case-insensitive, but Liquid comparisons are not, so downcase the list for later use in products loop\n{% endcomment %}\n\n{% assign tags_list_downcase\n  = tags_list\n  | join: \"|||\"\n  | downcase\n  | split: \"|||\"\n%}\n\n{% comment %}\n  -- build the tag filter for use in the products query\n{% endcomment %}\n\n{% assign tags_query = array %}\n\n{% for tag in tags_list %}\n  {% assign tags_query[tags_query.size] = tag | json | prepend: \"tag:\" %}\n{% endfor %}\n\n{% assign tags_query = tags_query | join: \" OR \" %}\n\n{% log tags_query: tags_query %}\n\n{% comment %}\n  -- use paginated query to get up to 25K partial tag matches (this is by API design, no way around this)\n{% endcomment %}\n\n{% assign products = array %}\n{% assign cursor = nil %}\n\n{% for n in (1..100) %}\n  {% capture query %}\n    query {\n      products(\n        first: 250\n        after: {{ cursor | json }}\n        query: {{ tags_query | json }}\n      ) {\n        pageInfo {\n          hasNextPage\n          endCursor\n        }\n        nodes {\n          id\n          title\n          tags\n        }\n      }\n    }\n  {% endcapture %}\n\n  {% assign result = query | shopify %}\n\n  {% if event.preview %}\n    {% capture result_json %}\n      {\n        \"data\": {\n          \"products\": {\n            \"nodes\": [\n              {\n                \"id\": \"gid://shopify/Product/1234567890\",\n                \"title\": \"ACME Widget\",\n                \"tags\": {{ tags_list.first | json }}\n              }\n            ]\n          }\n        }\n      }\n    {% endcapture %}\n\n    {% assign result = result_json | parse_json %}\n  {% endif %}\n\n  {% assign products = products | concat: result.data.products.nodes %}\n\n  {% if result.data.products.pageInfo.hasNextPage %}\n    {% assign cursor = result.data.products.pageInfo.endCursor %}\n  {% else %}\n    {% break %}\n  {% endif %}\n{% endfor %}\n\n{% comment %}\n  -- find tag matches, partial or exact based on task configuration\n{% endcomment %}\n\n{% assign products_and_matched_tags = array %}\n\n{% for product in products %}\n  {% assign matched_tags = array %}\n\n  {% comment %}\n    -- tag searches are case-insensitive, but Liquid comparisons are not, so use downcase\n    -- don't break out of any of these loops after a match, in case partial matching is enabled\n  {% endcomment %}\n\n  {% for product_tag in product.tags %}\n    {% assign product_tag_downcase = product_tag | downcase %}\n\n    {% for tag in tags_list %}\n      {% assign tag_downcase = tag | downcase %}\n\n      {% if remove_partial_tag_matches %}\n        {% if product_tag_downcase contains tag_downcase %}\n          {% assign matched_tags = matched_tags | push: product_tag %}\n        {% endif %}\n\n      {% elsif product_tag_downcase == tag_downcase %}\n        {% assign matched_tags = matched_tags | push: product_tag %}\n      {% endif %}\n    {% endfor %}\n  {% endfor %}\n\n  {% if matched_tags != blank %}\n    {% assign product_data = hash %}\n    {% assign product_data[\"id\"] = product.id %}\n    {% assign product_data[\"title\"] = product.title %}\n    {% assign product_data[\"matched_tags\"] = matched_tags | uniq %}\n    {% assign products_and_matched_tags = products_and_matched_tags | push: product_data %}\n  {% endif %}\n{% endfor %}\n\n{% if remove_partial_tag_matches %}\n  {% log count_of_products_with_partial_tag_matches: products_and_matched_tags.size %}\n{% else %}\n  {% log count_of_products_with_exact_tag_matches: products_and_matched_tags.size %}\n{% endif %}\n\n{% log\n  message: \"Found these products with matched tags to remove\",\n  remove_partial_tag_matches: remove_partial_tag_matches,\n  products_and_matched_tags: products_and_matched_tags\n%}\n\n{% comment %}\n  -- rmeove the tags unless test mode is enabled\n{% endcomment %}\n\n{% unless test_mode %}\n  {% for product_data in products_and_matched_tags %}\n    {% action \"shopify\" %}\n      mutation {\n        tagsRemove(\n          id: {{ product_data.id | json }}\n          tags: {{ product_data.matched_tags | json }}\n        ) {\n          node {\n            ... on Product {\n              title\n              tags\n            }\n          }\n          userErrors {\n            field\n            message\n          }\n        }\n      }\n    {% endaction %}\n  {% endfor %}\n{% endunless %}\n",
  "subscriptions": [
    "mechanic/user/trigger"
  ],
  "subscriptions_template": "mechanic/user/trigger",
  "tags": [
    "Products",
    "Untag"
  ]
}
