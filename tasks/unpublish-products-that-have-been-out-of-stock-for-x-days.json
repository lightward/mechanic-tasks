{
  "docs": "This task watches for inventory updates. When a product's total inventory becomes 0 or less, the current time will be recorded for that product. Then, on an hourly basis, this task will unpublish any products with a recorded out-of-stock time of at least x days ago.\n\nNotes:\n\n* The first time the hourly scan runs, it may encounter products that were already out of stock, before this task was installed. For those products, the _current_ time will be recorded as their out-of-stock time. This means that these products will wait for another x days before being automatically unpublished.\n* If a product that this task unpublishes is manually published, and its total inventory is still 0 or less, this task will unpublish it again during its next hourly scan.\n* This task includes a test mode. Enable it to have the task report what it _would_ do, if test mode was disabled.",
  "halt_action_run_sequence_on_error": false,
  "name": "Unpublish products that have been out of stock for x days",
  "online_store_javascript": null,
  "options": {
    "number_of_days_to_wait_before_unpublishing__number_required": null,
    "sales_channel_names__required_array": [
      "Online Store"
    ],
    "only_include_products_matching_this_search_query": null,
    "test_mode__boolean": true
  },
  "order_status_javascript": null,
  "perform_action_runs_in_sequence": false,
  "script": "{% comment %}\n  1. Watch for updates to inventory levels.\n  2. Look up the associated product, when an update comes in.\n  3. If the product's total inventory is <=0, record the current time in a metafield. If the\n     total inventory is not 0, delete that metafield, if it exists.\n  4. Scan all products, on a schedule, retrieving each product's out-of-stock time metafield.\n     For products found with a total inventory of <=0, with a recorded time that's at least a\n     configurable distance in days from the current time, unpublish the product.\n{% endcomment %}\n\n{% assign number_of_days_to_wait_before_unpublishing = options.number_of_days_to_wait_before_unpublishing__number_required %}\n{% assign sales_channel_names = options.sales_channel_names__required_array %}\n{% assign only_include_products_matching_this_search_query = options.only_include_products_matching_this_search_query %}\n{% assign test_mode = options.test_mode__boolean %}\n\n{% assign time_format = \"%FT%T%z\" %}\n\n{% if event.topic == \"shopify/inventory_levels/update\" %}\n  {% capture query %}\n    query {\n      inventoryLevel(\n        id: {{ inventory_level.admin_graphql_api_id | json }}\n      ) {\n        item {\n          variant {\n            product {\n              id\n              title\n              totalInventory\n              metafield(\n                namespace: \"mechanic\"\n                key: \"out_of_stock_at\"\n              ) {\n                value\n              }\n            }\n          }\n        }\n      }\n    }\n  {% endcapture %}\n\n  {% assign result = query | shopify %}\n\n  {% if event.preview %}\n    {% capture result_json %}\n      {\n        \"data\": {\n          \"inventoryLevel\": {\n            \"item\": {\n              \"variant\": {\n                \"product\": {\n                  \"id\": \"gid://shopify/Product/1234567890\",\n                  \"title\": \"Short sleeve t-shirt\",\n                  \"totalInventory\": 0\n                }\n              }\n            }\n          }\n        }\n      }\n    {% endcapture %}\n\n    {% assign result = result_json | parse_json %}\n  {% endif %}\n\n  {% assign product = result.data.inventoryLevel.item.variant.product %}\n\n  {% if product.totalInventory <= 0 and product.metafield == blank %}\n    {% if test_mode %}\n      {% log %}\n        {%- capture message -%}\n          Product {{ product.title | json }} ({{ product.id }}) is out of stock. Its out-of-stock time should be recorded.\n        {%- endcapture -%}\n        {{ message | json }}\n      {% endlog %}\n\n    {% else %}\n      {% action \"shopify\" %}\n        mutation {\n          metafieldsSet(\n            metafields: [\n              {\n                ownerId: {{ product.id | json }}\n                namespace: \"mechanic\"\n                key: \"out_of_stock_at\"\n                type: \"date_time\"\n                value: {{ \"now\" | date: time_format | json }}\n              }\n            ]\n          ) {\n            metafields {\n              id\n              namespace\n              key\n              type\n              value\n              owner {\n                ... on Product {\n                  id\n                  title\n                }\n              }\n            }\n            userErrors {\n              code\n              field\n              message\n            }\n          }\n        }\n      {% endaction %}\n    {% endif %}\n\n  {% elsif product.totalInventory > 0 and product.metafield != blank %}\n    {% if test_mode %}\n      {% log %}\n        {%- capture message -%}\n          Product {{ product.title | json }} ({{ product.id }}) is back in stock. Its out-of-stock time should be cleared.\n        {%- endcapture -%}\n        {{ message | json }}\n      {% endlog %}\n\n    {% else %}\n      {% action \"shopify\" %}\n        mutation {\n          metafieldsDelete(\n            metafields: [\n              {\n                ownerId: {{ product.id | json }}\n                namespace: \"mechanic\"\n                key: \"out_of_stock_at\"\n              }\n            ]\n          ) {\n            deletedMetafields {\n              ownerId\n              namespace\n              key\n            }\n            userErrors {\n              field\n              message\n            }\n          }\n        }\n      {% endaction %}\n    {% endif %}\n  {% endif %}\n\n{% elsif event.topic contains \"mechanic/scheduler/\" or event.topic == \"mechanic/user/trigger\" %}\n  {% assign now_s = \"now\" | date: \"%s\" | times: 1 %}\n  {% assign minimum_out_of_stock_at_distance_s = number_of_days_to_wait_before_unpublishing | times: 24 | times: 60 | times: 60 %}\n\n  {% comment %}\n    -- get all of the sales channel names (i.e. publications aka app catalogs) in the shop\n  {% endcomment %}\n\n  {% capture query %}\n    query {\n      publications(\n        first: 250\n        catalogType:APP\n      ) {\n        nodes {\n          id\n          catalog {\n            ... on AppCatalog {\n              apps(first: 1) {\n                nodes {\n                  title\n                }\n              }\n            }\n          }\n        }\n      }\n    }\n  {% endcapture %}\n\n  {% assign result = query | shopify %}\n\n  {% if event.preview %}\n    {% capture result_json %}\n      {\n        \"data\": {\n          \"publications\": {\n            \"nodes\": [\n              {\n                \"id\": \"gid://shopify/Publication/1234567890\",\n                \"catalog\": {\n                  \"apps\": {\n                    \"nodes\": [\n                      {\n                        \"title\": {{ sales_channel_names.first | json }}\n                      }\n                    ]\n                  }\n                }\n              }\n            ]\n          }\n        }\n      }\n    {% endcapture %}\n\n    {% assign result = result_json | parse_json %}\n  {% endif %}\n\n  {% comment %}\n    -- save the publication IDs for all of the configured sales channel names\n  {% endcomment %}\n\n  {% assign publication_ids = array %}\n  {% assign available_sales_channel_names = array %}\n\n  {% for publication in result.data.publications.nodes %}\n    {% assign publication_name = publication.catalog.apps.nodes.first.title %}\n\n    {% assign available_sales_channel_names = available_sales_channel_names | push: publication_name %}\n\n    {% if sales_channel_names contains publication_name %}\n      {% assign publication_ids = publication_ids | push: publication.id %}\n    {% endif %}\n  {% endfor %}\n\n  {% if publication_ids == blank  %}\n    {% error\n      message: \"None of the sales channels configured in this task exist in the shop. Check the list of available channels and verify each configured channel exists.\",\n      configured_sales_channel_names: sales_channel_names,\n      available_sales_channel_names: available_sales_channel_names\n    %}\n\n    {% break %}\n\n  {% elsif publication_ids.size != sales_channel_names.size %}\n    {% unless event.preview %}\n      {% comment %}\n        -- using action error here so the task will continue with any other configured and matched sales channels\n      {% endcomment %}\n\n      {% action \"echo\"\n        __error: \"One or more configured sales channel names do not match any of the publication names available in this shop.\",\n        configured_sales_channel_names: sales_channel_names,\n        available_sales_channel_names: available_sales_channel_names\n      %}\n    {% endunless %}\n  {% endif %}\n\n  {% comment %}\n    -- query for all active, out of stock products (up to 25K); optionally filter the products with configured query\n  {% endcomment %}\n\n  {% assign search_query = \"status:active AND inventory_total:<=0\" %}\n\n  {% if only_include_products_matching_this_search_query != blank %}\n    {%- capture search_query -%}\n      {{ search_query }} AND ({{ only_include_products_matching_this_search_query }})\n    {%- endcapture -%}\n\n    {% log search_query: search_query %}\n  {% endif %}\n\n  {% assign cursor = nil %}\n  {% assign products = array %}\n  {% assign metafields_to_set = array %}\n\n  {% for n in (1..100) %}\n    {% capture query %}\n      query {\n        products(\n          first: 250\n          query: {{ search_query | json }}\n          after: {{ cursor | json }}\n        ) {\n          pageInfo {\n            hasNextPage\n            endCursor\n          }\n          nodes {\n            id\n            title\n            totalInventory\n            {% for publication_id in publication_ids %}\n              publishedOnPublication{{ forloop.index }}: publishedOnPublication(publicationId: {{ publication_id | json }})\n            {% endfor %}\n            metafield(\n              namespace: \"mechanic\"\n              key: \"out_of_stock_at\"\n            ) {\n              id\n              value\n            }\n          }\n        }\n      }\n    {% endcapture %}\n\n    {% assign result = query | shopify %}\n\n    {% if event.preview %}\n      {% capture result_json %}\n        {\n          \"data\": {\n            \"products\": {\n              \"nodes\": [\n                {\n                  \"id\": \"gid://shopify/Product/1234567890\",\n                  \"title\": \"Short sleeve t-shirt\",\n                  \"totalInventory\": 0,\n                  \"publishedOnPublication1\": true,\n                  \"metafield\": {\n                    \"value\": {{ now_s | minus: minimum_out_of_stock_at_distance_s | minus: 1 | append: \"\" | json }}\n                  }\n                }\n              ]\n            }\n          }\n        }\n      {% endcapture %}\n\n      {% assign result = result_json | parse_json %}\n    {% endif %}\n\n    {% assign products = products | concat: result.data.products.nodes %}\n\n    {% if result.data.products.pageInfo.hasNextPage %}\n      {% assign cursor = result.data.products.pageInfo.endCursor %}\n    {% else %}\n      {% break %}\n    {% endif %}\n  {% endfor %}\n\n  {% for product in products %}\n    {% if product.metafield == blank %}\n      {% log %}\n        \"Product {{ product.id }} is out of stock, but its out-of-stock time was not recorded. This product will not be unpublished now, but its out-of-stock time will be set to the current time.\"\n      {% endlog %}\n\n      {% assign metafield_to_set = hash %}\n      {% assign metafield_to_set[\"ownerId\"] = product.id %}\n      {% assign metafield_to_set[\"namespace\"] = \"mechanic\" %}\n      {% assign metafield_to_set[\"key\"] = \"out_of_stock_at\" %}\n      {% assign metafield_to_set[\"type\"] = \"date_time\" %}\n      {% assign metafield_to_set[\"value\"] = \"now\" | date: time_format %}\n      {% assign metafields_to_set = metafields_to_set | push: metafield_to_set %}\n\n      {% continue %}\n    {% endif %}\n\n    {% assign out_of_stock_at_s = product.metafield.value | date: \"%s\" | times: 1 %}\n    {% assign out_of_stock_at_distance_s = now_s | minus: out_of_stock_at_s %}\n\n    {% assign unpublishings = array %}\n\n    {% for publication_id in publication_ids %}\n      {% assign key = \"publishedOnPublication\" | append: forloop.index %}\n\n      {% if product[key] %}\n        {% assign unpublishings[unpublishings.size] = array | push: product.id, publication_id %}\n      {% endif %}\n    {% endfor %}\n\n    {% if unpublishings == blank %}\n      {% log %}\n        {%- capture message -%}\n          Product {{ product.title | json }} ({{ product.id }}) has been out of stock for {{ out_of_stock_at_distance_s | divided_by: 86400 | round: 2 }} day(s), but is not published - nothing to do.\n        {%- endcapture -%}\n        {{ message | json }}\n      {% endlog %}\n      {% continue %}\n    {% endif %}\n\n    {% if out_of_stock_at_distance_s < minimum_out_of_stock_at_distance_s %}\n      {% log %}\n        {%- capture message -%}\n          Product {{ product.title | json }} ({{ product.id }}) is out of stock, and is published, but has only been out of stock for {{ out_of_stock_at_distance_s | divided_by: 86400 | round: 2 }} day(s).\n        {%- endcapture -%}\n        {{ message | json }}\n      {% endlog %}\n      {% continue %}\n    {% endif %}\n\n    {% if test_mode %}\n      {% log %}\n        {%- capture message -%}\n          Product {{ product.title | json }} ({{ product.id }}) is out of stock, and has been out of stock for {{ out_of_stock_at_distance_s | divided_by: 86400 | round: 2 }} day(s). It should be unpublished.\n        {%- endcapture -%}\n        {{ message | json }}\n      {% endlog %}\n\n    {% else %}\n      {% action \"shopify\" %}\n        mutation {\n          {% for unpublishing in unpublishings %}\n            publishableUnpublish{{ forloop.index }}: publishableUnpublish(\n              id: {{ unpublishing[0] | json }}\n              input: {\n                publicationId: {{ unpublishing[1] | json }}\n              }\n            ) {\n              userErrors {\n                field\n                message\n              }\n            }\n          {% endfor %}\n        }\n      {% endaction %}\n    {% endif %}\n  {% endfor %}\n\n  {% if metafields_to_set != blank %}\n    {% if test_mode %}\n      {% log %}\n        \"Found {{ metafields_to_set.size }} out of stock products which do not yet have their out of stock time recorded. This task has test mode enabled, so these metafields will not be set on this task run.\"\n      {% endlog %}\n\n      {% break %}\n    {% endif %}\n\n    {% assign groups_of_metafields_to_set = metafields_to_set | in_groups_of: 25, fill_with: false %}\n\n    {% for group_of_metafields_to_set in groups_of_metafields_to_set %}\n      {% action \"shopify\" %}\n        mutation {\n          metafieldsSet(\n            metafields: {{ group_of_metafields_to_set | graphql_arguments }}\n          ) {\n            metafields {\n              id\n              namespace\n              key\n              type\n              value\n              owner {\n                ... on Product {\n                  id\n                  title\n                }\n              }\n            }\n            userErrors {\n              code\n              field\n              message\n            }\n          }\n        }\n      {% endaction %}\n    {% endfor %}\n  {% endif %}\n{% endif %}\n",
  "subscriptions": [
    "shopify/inventory_levels/update",
    "mechanic/scheduler/hourly",
    "mechanic/user/trigger"
  ],
  "subscriptions_template": "shopify/inventory_levels/update\nmechanic/scheduler/hourly\nmechanic/user/trigger",
  "tags": [
    "Inventory",
    "Products",
    "Unpublish"
  ]
}
