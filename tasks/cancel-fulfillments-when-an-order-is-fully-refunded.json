{
  "name": "Cancel fulfillments when an order is fully refunded",
  "options": {
    "cancel_pending_fulfillments__boolean": true,
    "cancel_open_fulfillments__boolean": false,
    "cancel_successful_fulfillments__boolean": false
  },
  "subscriptions": [
    "mechanic/user/trigger",
    "shopify/refunds/create"
  ],
  "subscriptions_template": "mechanic/user/trigger\r\nshopify/refunds/create",
  "script": "{% assign fulfillment_statuses_to_cancel = array %}\n\n{% if options.cancel_pending_fulfillments__boolean %}\n  {% assign fulfillment_statuses_to_cancel = fulfillment_statuses_to_cancel | push: \"PENDING\" %}\n{% endif %}\n\n{% if options.cancel_open_fulfillments__boolean %}\n  {% assign fulfillment_statuses_to_cancel = fulfillment_statuses_to_cancel | push: \"OPEN\" %}\n{% endif %}\n\n{% if options.cancel_successful_fulfillments__boolean %}\n  {% assign fulfillment_statuses_to_cancel = fulfillment_statuses_to_cancel | push: \"SUCCESS\" %}\n{% endif %}\n\n{% if fulfillment_statuses_to_cancel == blank %}\n  {% error \"Please select at least one fulfillment status for cancellation\" %}\n\n{% elsif event.preview %}\n  {% action \"shopify\" %}\n    mutation {\n      fulfillmentCancel(id: \"gid://shopify/Fulfillment/1234567890\") {\n        fulfillment {\n          id\n          status\n        }\n        userErrors {\n          field\n          message\n        }\n      }\n    }\n  {% endaction %}\n\n{% elsif event.topic == \"mechanic/user/trigger\" %}\n  {% assign cursor = nil %}\n  {% assign orders = array %}\n\n  {% for n in (1..100) %}\n    {% capture query %}\n      query {\n        orders(\n          first: 250\n          after: {{ cursor | json }}\n          query: \"financial_status:refunded\"\n        ) {\n          pageInfo {\n            hasNextPage\n            endCursor\n          }\n          nodes {\n            id\n            name\n            fulfillments {\n              id\n              status\n            }\n          }\n        }\n      }\n    {% endcapture %}\n\n    {% assign result = query | shopify %}\n\n    {% if event.preview %}\n      {% capture result_json %}\n        {\n          \"data\": {\n            \"orders\": {\n              \"nodes\": [\n                {\n                  \"id\": \"gid://shopify/Order/1234567890\",\n                  \"fulfillments\": [\n                    {\n                      \"id\": \"gid://shopify/Fulfillment/1234567890\",\n                      \"status\": \"PENDING\"\n                    },\n                    {\n                      \"id\": \"gid://shopify/Fulfillment/2345678901\",\n                      \"status\": \"OPEN\"\n                    },\n                    {\n                      \"id\": \"gid://shopify/Fulfillment/3456789012\",\n                      \"status\": \"SUCCESS\"\n                    }\n                  ]\n                }\n              ]\n            }\n          }\n        }\n      {% endcapture %}\n\n      {% assign result = result_json | parse_json %}\n    {% endif %}\n\n    {% assign orders = orders | concat: result.data.orders.nodes %}\n\n    {% if result.data.orders.pageInfo.hasNextPage %}\n      {% assign cursor = result.data.orders.pageInfo.endCursor %}\n    {% else %}\n      {% break %}\n    {% endif %}\n  {% endfor %}\n\n  {% for order in orders %}\n    {% for fulfillment in order.fulfillments %}\n      {% if fulfillment_statuses_to_cancel contains fulfillment.status %}\n        {% action \"shopify\" %}\n          mutation {\n            fulfillmentCancel(id: {{ fulfillment.id | json }}) {\n              fulfillment {\n                name\n                status\n              }\n              userErrors {\n                field\n                message\n              }\n            }\n          }\n        {% endaction %}\n      {% endif %}\n    {% endfor %}\n  {% endfor %}\n\n{% elsif refund.order.financial_status == \"refunded\" %}\n  {% for fulfillment in refund.order.fulfillments %}\n    {% assign fulfillment_status = fulfillment.status | upcase %}\n\n    {% if fulfillment_statuses_to_cancel contains fulfillment_status %}\n      {% action \"shopify\" %}\n        mutation {\n          fulfillmentCancel(id: {{ fulfillment.admin_graphql_api_id | json }}) {\n            fulfillment {\n              name\n              status\n            }\n            userErrors {\n              field\n              message\n            }\n          }\n        }\n      {% endaction %}\n    {% endif %}\n  {% endfor %}\n{% endif %}\n",
  "docs": "This task monitors for new refunds. When a new refund changes an order's status to fully refunded, this task will cancel all fulfillments for that order. This task supports running manually, to cancel all fulfillments for refunded orders, across your store's order history.\n\nRun this task manually to cancel fulfillments for refunded orders, across your store's order history. (To process orders older than 60 days, [enable \"read all orders\"](https://help.usemechanic.com/tutorials/enabling-read_all_orders).)\r\n\r\nThis task will also monitor for new refunds. When a new refund changes an order's status to fully refunded, this task will cancel all fulfillments for that order.\r\n\r\nConfigure this task to choose which fulfillment statuses Mechanic will look for.",
  "halt_action_run_sequence_on_error": false,
  "online_store_javascript": null,
  "order_status_javascript": null,
  "perform_action_runs_in_sequence": false,
  "tags": [
    "Cancel",
    "Fulfillment",
    "Orders",
    "Refunds"
  ]
}
