{
  "name": "Demonstration: Shopify Flow integration",
  "options": {
    "customer_id__number": "",
    "order_id__number": "",
    "product_id__number": "",
    "send_general_trigger__boolean": true
  },
  "subscriptions": [
    "mechanic/user/trigger",
    "user/flow/customer",
    "user/flow/order",
    "user/flow/product",
    "user/flow/general"
  ],
  "subscriptions_template": "mechanic/user/trigger\n\nuser/flow/customer\nuser/flow/order\nuser/flow/product\nuser/flow/general",
  "script": "{% comment %}\n  In this example we show how to use all four Shopify Flow tiggers:\n  1. General\n  2. Customer\n  3. Order\n  4. Product\n{% endcomment %}\n\n{% assign customer_id = options.customer_id__number %}\n{% assign order_id = options.order_id__number %}\n{% assign product_id = options.product_id__number %}\n\n{% if event.topic == \"mechanic/user/trigger\" %}\n  {% comment %}\n    Testing the Customer trigger for Flow\n  {% endcomment %}\n\n  {% if customer_id %}\n    {% action \"flow\" %}\n      {\n        \"customer_id\": {{ customer_id }},\n\n        \"user_number\":  55,\n        \"user_string\":  \"Love!\"\n      }\n    {% endaction %}\n  {% endif %}\n\n  {% if order_id %}\n    {% comment %}\n      Testing the Order trigger for Flow\n    {% endcomment %}\n\n    {% action \"flow\" %}\n      {\n        \"order_id\": {{ order_id }},\n\n        \"user_number\":  55,\n        \"user_string\":  \"Love!\"\n      }\n    {% endaction %}\n  {% endif %}\n\n  {% if product_id %}\n    {% comment %}\n      Testing the Product trigger for Flow\n    {% endcomment %}\n\n    {% action \"flow\" %}\n      {\n        \"product_id\": {{ product_id }},\n\n        \"user_number\":  55,\n        \"user_string\":  \"Love!\"\n      }\n    {% endaction %}\n  {% endif %}\n\n  {% if options.send_general_trigger__boolean %}\n    {% comment %}\n      Testing the General trigger for Flow\n    {% endcomment %}\n\n    {% action \"flow\" %}\n      {\n        {% comment %}\n          Keep as many of the following as you like. Any omitted\n          keys *will* be submitted anyway, using the default value\n          given below. If you don't want to use Mechanic's default\n          value, make sure to *keep* the key in place below, setting\n          it to whatever you like.\n        {% endcomment %}\n        \"user_boolean\": false,\n        \"user_email\":   \"hey@mechanic.invalid\",\n        \"user_number\":  0,\n        \"user_string\":  \"\",\n        \"user_url\":     \"https://mechanic.invalid/\"\n       }\n    {% endaction %}\n  {% endif %}\n{% endif %}\n\n{% comment %}\n  Next, we show triggering a Mechanic task from a Flow action.\n\n  A few quick points:\n   - This could be in any Mechanic task. we have this example as part\n     of this task for demonstration purposes.\n   - To exercise this part of the task, you'll need to set up a Shopify\n     Flow to send an action to this event topic.\n   - The event topic can be anything in the user domain. We use topics\n     starting with \"user/flow/\", but it could be something like\n     \"user/foo/bar\" too.\n\n  To quickly test echoing data from Mechanic *back* to Mechanic, add a\n  Mechanic action to your Flow workflow configured with the following\n  event data value:\n\n  {\n    \"user_boolean\": {{ userBoolean | json }},\n    \"user_email\": {{ userEmail | json }},\n    \"user_number\": {{ userNumber | json }},\n    \"user_string\": {{ userString | json }},\n    \"user_url\": {{ userUrl | json }},\n    \"mechanic_event_topic\": {{ mechanicEventTopic | json }},\n    \"mechanic_task_id\": {{ mechanicTaskId | json }},\n    \"mechanic_event_inspector_url\": {{ mechanicEventInspectorUrl | json }}\n  }\n{% endcomment %}\n\n{% if event.topic contains \"user/flow/\" %}\n  {% log flow_event_data: event.data %}\n{% endif %}",
  "docs": "This task demonstrates how to use the four Mechanic Shopify Flow triggers: General, Customer, Product, and Order.\n\nYou'll learn about the user-defined data that we can send to Shopify Flow: user_boolean, user_email, user_number, user_string, user_url.\n\nWe demonstrate subscribing to an event topic fired by a Shopify Flow action. You'll need to set up a workflow in the Shopify Flow app to trigger this event topic. This example could be in any Mechanic task; we have this as part of this task for demonstration purposes. The event topic can be anything in the user domain. We choose user/flow/customer (etc), but it could be something like user/flow/xyz.",
  "halt_action_run_sequence_on_error": false,
  "online_store_javascript": null,
  "order_status_javascript": null,
  "perform_action_runs_in_sequence": false,
  "tags": [
    "Demonstration",
    "Integration",
    "Shopify Flow"
  ]
}
