{
  "docs": "Use this task to quickly reset product types in bulk based on product titles. When run manually, it will query for all products in the shop and for each product with a matched keyword in the title, the task will assign the paired product type to it.\n\nConfigure the product types to set on the left, and the keyword(s) on the right. The task is pre-filled with a sample entry for \"Shirts\", which can be replaced if not needed.\n\n**Notes:**\n- The task will search for keywords in the order of entry in the task configuration, and it will stop once a match is made.\n- If a product title does not contain any of the configured keywords, then that product will be ignored.",
  "halt_action_run_sequence_on_error": false,
  "name": "Set product types by title keywords",
  "online_store_javascript": null,
  "options": {
    "product_types_and_keywords__keyval_multiline_required": {
      "Shirts": "shirt\nshirts\nt-shirt\nt-shirts\ntee\ntees"
    }
  },
  "order_status_javascript": null,
  "perform_action_runs_in_sequence": false,
  "preview_event_definitions": [],
  "script": "{% assign product_types_and_keywords = options.product_types_and_keywords__keyval_multiline_required %}\n\n{% comment %}\n  -- set preview values for the configuration field that will work with the preview query data\n{% endcomment %}\n\n{% if event.preview %}\n  {% capture product_types_and_keywords_json %}\n    {\n      \"Shirts\": \"shirt\\nshirts\\nt-shirt\\nt-shirts\\ntee\\ntees\"\n    }\n  {% endcapture %}\n\n  {% assign product_types_and_keywords = product_types_and_keywords_json | parse_json %}\n{% endif %}\n\n{% assign cursor = nil %}\n\n{% comment %}\n  -- query for all products in the shop (if > 25K products, the \"100\" loop value can be adjusted upward)\n{% endcomment %}\n\n{% for n in (1..100) %}\n  {% capture query %}\n    query {\n      products(\n        first: 250\n        after: {{ cursor | json }}\n      ) {\n        pageInfo {\n          hasNextPage\n          endCursor\n        }\n        nodes {\n          id\n          title\n          productType\n        }\n      }\n    }\n  {% endcapture %}\n\n  {% assign result = query | shopify %}\n\n  {% if event.preview %}\n    {% capture result_json %}\n      {\n        \"data\": {\n          \"products\": {\n            \"nodes\": [\n              {\n                \"id\": \"gid://shopify/Product/1234567890\",\n                \"title\": \"Super soft tees\",\n                \"productType\": \"Shoes\"\n              }\n            ]\n          }\n        }\n      }\n    {% endcapture %}\n\n    {% assign result = result_json | parse_json %}\n  {% endif %}\n\n  {% comment %}\n    -- process each product in this result before querying for more products\n  {% endcomment %}\n\n  {% for product in result.data.products.nodes %}\n    {% comment %}\n      -- use downcase on product title and configured keywords since the \"contains\" operator is case-sensitive\n      -- split on spaces in title to create an array of words to be compared to keywords\n    {% endcomment %}\n\n    {% assign product_title_words_downcase\n      = product.title\n      | downcase\n      | split: \" \"\n    %}\n    {% assign product_type_to_set = nil %}\n\n    {% for keyval in product_types_and_keywords %}\n      {% assign product_type = keyval.first %}\n      {% assign keywords = keyval.last | split: newline %}\n\n      {% for keyword in keywords %}\n        {% if keyword == blank or keyword == \"\" %}\n          {% comment %}\n            -- protect against accidental empty keyword lines in the task config\n          {% endcomment %}\n\n          {% continue %}\n        {% endif %}\n\n        {% assign keyword_downcase = keyword | downcase %}\n\n        {% if product_title_words_downcase contains keyword_downcase %}\n          {% assign product_type_to_set = product_type %}\n          {% break %}\n        {% endif %}\n      {% endfor %}\n\n      {% if product_type_to_set != blank %}\n        {% break %}\n      {% endif %}\n    {% endfor %}\n\n    {% comment %}\n      -- set a new product type if a keyword match was made and the product does not already have that type\n    {% endcomment %}\n\n    {% if product_type_to_set != blank and product_type_to_set != product.productType %}\n      {% action \"shopify\" %}\n        mutation {\n          productUpdate(\n            input: {\n              id: {{ product.id | json }}\n              productType: {{ product_type_to_set | json }}\n            }\n          ) {\n            product {\n              title\n              productType\n            }\n            userErrors {\n              field\n              message\n            }\n          }\n        }\n      {% endaction %}\n    {% endif %}\n  {% endfor %}\n\n  {% if result.data.products.pageInfo.hasNextPage %}\n    {% assign cursor = result.data.products.pageInfo.endCursor %}\n  {% else %}\n    {% break %}\n  {% endif %}\n{% endfor %}\n",
  "subscriptions": ["mechanic/user/trigger"],
  "subscriptions_template": "mechanic/user/trigger",
  "tags": ["Products"]
}
