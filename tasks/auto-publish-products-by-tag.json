{
  "name": "Auto publish products by tag",
  "options": {
    "sales_channel_names__array_required": null,
    "product_tag__required": null
  },
  "subscriptions": [
    "shopify/products/update",
    "mechanic/user/trigger"
  ],
  "subscriptions_template": "shopify/products/update\nmechanic/user/trigger",
  "script": "{% assign sales_channel_names = options.sales_channel_names__array_required %}\n{% assign product_tag = options.product_tag__required %}\n\n{% capture query %}\n  query {\n    publications(first: 250) {\n      edges {\n        node {\n          id\n          name\n        }\n      }\n    }\n  }\n{% endcapture %}\n\n{% assign result = query | shopify %}\n\n{% if event.preview %}\n  {% capture result_json %}\n    {\n      \"data\": {\n        \"publications\": {\n          \"edges\": [\n            {\n              \"node\": {\n                \"id\": \"gid://shopify/Publication/1234567890\",\n                \"name\": \"Online Store\"\n              }\n            },\n            {\n              \"node\": {\n                \"id\": \"gid://shopify/Publication/2345678901\",\n                \"name\": \"Buy Button\"\n              }\n            }\n          ]\n        }\n      }\n    }\n  {% endcapture %}\n\n  {% assign result = result_json | parse_json %}\n{% endif %}\n\n{% assign publications = result.data.publications.edges | map: \"node\" %}\n{% assign publication_names = publications | map: \"name\" | sort %}\n{% assign publications_indexed_by_name = publications | index_by: \"name\" %}\n\n{% log available_publications: publication_names %}\n\n{% capture published_on_publications %}\n  {% for sales_channel_name in sales_channel_names %}\n    published_on_publication{{ forloop.index }}: publishedOnPublication(\n      publicationId: {{ publications_indexed_by_name[sales_channel_name].id | json }}\n    )\n  {%- endfor %}\n{% endcapture %}\n\n{% assign products = array %}\n\n{% if event.topic contains \"shopify/products/\" %}\n  {% capture query %}\n    query {\n      product(id: {{ product.admin_graphql_api_id | json }}) {\n        id\n        tags\n        {{ published_on_publications | join: newline }}\n      }\n    }\n  {% endcapture %}\n\n  {% assign result = query | shopify %}\n\n  {% assign products[0] = result.data.product %}\n\n{% elsif event.topic contains \"mechanic/user/trigger\" %}\n  {% assign cursor = nil %}\n\n  {% for n in (0..200) %}\n    {% capture query %}\n      query {\n        products(\n          first: 250\n          after: {{ cursor | json }}\n        ) {\n          pageInfo {\n            hasNextPage\n          }\n          edges {\n            node {\n              id\n              tags\n              {{ published_on_publications | join: newline }}\n            }\n          }\n        }\n      }\n    {% endcapture %}\n\n    {% assign result = query | shopify %}\n\n    {% assign products_batch = result.data.products.edges | map: \"node\" %}\n    {% assign products = products | concat: products_batch %}\n\n    {% if result.data.products.pageInfo.hasNextPage %}\n      {% assign cursor = result.data.products.edges.last.cursor %}\n    {% else %}\n      {% break %}\n    {% endif %}\n  {% endfor %}\n{% endif %}\n\n{% if event.preview %}\n  {% capture products_json %}\n    [\n      {\n        \"id\": \"gid://shopify/Product/1234567890\",\n        \"published_on_publication1\": false,\n        \"published_on_publication2\": true,\n        \"tags\": {{ product_tag | json }}\n      }\n    ]\n  {% endcapture %}\n\n  {% assign products = products_json | parse_json %}\n{% endif %}\n\n{% for product in products %}\n  {% assign mutations = array %}\n  {% assign should_be_published = false %}\n\n  {% if product.tags contains product_tag %}\n    {% assign should_be_published = true %}\n  {% endif %}\n\n  {% for publication in publications %}\n    {% assign publication_key = \"published_on_publication\" | append: forloop.index %}\n\n    {% if product[publication_key] %}\n      {% unless should_be_published %}\n        {% capture mutation %}\n          publishableUnpublish{{ forloop.index }}: publishableUnpublish(\n            id: {{ product.id | json }}\n            input: {\n              publicationId: {{ publication.id | json }}\n            }\n          ) {\n            userErrors {\n              field\n              message\n            }\n          }\n        {% endcapture %}\n\n        {% assign mutations = mutations | push: mutation %}\n      {% endunless %}\n\n    {% elsif should_be_published %}\n      {% capture mutation %}\n        publishablePublish{{ forloop.index }}: publishablePublish(\n          id: {{ product.id | json }}\n          input: {\n            publicationId: {{ publication.id | json }}\n          }\n        ) {\n          userErrors {\n            field\n            message\n          }\n        }\n      {% endcapture %}\n\n      {% assign mutations = mutations | push: mutation %}\n    {% endif %}\n  {% endfor %}\n\n  {% if mutations != blank %}\n    {% action \"shopify\" %}\n      mutation {\n        {{ mutations | join: newline }}\n      }\n    {% endaction %}\n  {% endif %}\n{% endfor %}",
  "docs": "This task runs when products are updated (which includes product creation) and manages publishing to the configured sales channels, according to whether or not the product has a certain tag. Products with the tag will be published on ALL of the configured sales channels; and those without the product tag will be unpublished from them.\n\nRun this task manually to scan your entire product catalog, publishing and unpublishing products by the presence or absence of the configured product tag.",
  "halt_action_run_sequence_on_error": false,
  "online_store_javascript": null,
  "order_status_javascript": null,
  "perform_action_runs_in_sequence": false,
  "tags": [
    "Products",
    "Publish",
    "Sales Channel",
    "Unpublish"
  ]
}
