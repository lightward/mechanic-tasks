{
  "docs": "Keep track of which products in your shop have incoming inventory with this task! Running when inventory levels are updated, this task will tag the product with the tag of your choice if _any_ of that product's variants at _any_ of your locations has an incoming transfer. Conversely, the tag will be removed when there are no pending transfers.\n\nThe task may also be run manually, and optionally on a schedule, in which case it will scan your _entire_ product catalog for incoming transfers, and tag products accordingly.\n\nNotes:\n- Transfers initiated from suppliers (i.e external locations) do __not__ trigger inventory level updates _until_ they are received. Use the \"Run on a schedule\" option to have the task identify and tag these incoming transfers.\n- Because the scheduled run option uses a [bulk operation query](https://learn.mechanic.dev/core/shopify/read/bulk-operations), by default it has been scheduled to run at 2 AM local shop time to avoid potential conflicts with other scheduled bulk operations. Adjust this [time](https://learn.mechanic.dev/core/tasks/subscriptions#offsets) and [frequency](https://learn.mechanic.dev/platform/events/topics#scheduler) as needed in the task subscriptions.",
  "halt_action_run_sequence_on_error": false,
  "name": "Auto-tag products with incoming inventory",
  "online_store_javascript": null,
  "options": {
    "product_tag_to_apply__required": null,
    "run_on_a_schedule__boolean": null
  },
  "order_status_javascript": null,
  "perform_action_runs_in_sequence": false,
  "script": "{% assign product_tag_to_apply = options.product_tag_to_apply__required | strip %}\n\n{% if event.topic == \"shopify/inventory_levels/update\" %}\n  {% assign qualifies_to_be_tagged = nil %}\n\n  {% assign cursor = nil %}\n\n  {% for n in (1..34) %}\n    {% capture query %}\n      query {\n        product(id: {{ inventory_level.variant.product.admin_graphql_api_id | json }}) {\n          id\n          tags\n          variants(\n            first: 3\n            after: {{ cursor | json }}\n          ) {\n            pageInfo {\n              hasNextPage\n              endCursor\n            }\n            nodes {\n              inventoryItem {\n                inventoryLevels(first: 100) {\n                  nodes {\n                    quantities(names: \"incoming\") {\n                      name\n                      quantity\n                    }\n                  }\n                }\n              }\n            }\n          }\n        }\n      }\n    {% endcapture %}\n\n    {% assign result = query | shopify %}\n\n    {% if event.preview %}\n      {% capture result_json %}\n        {\n          \"data\": {\n            \"product\": {\n              \"id\": \"gid://shopify/Product/1234567890\",\n              \"variants\": {\n                \"nodes\": [\n                  {\n                    \"inventoryItem\": {\n                      \"inventoryLevels\": {\n                        \"nodes\": [\n                          {\n                            \"quantities\": [\n                              {\n                                \"name\": \"incoming\",\n                                \"quantity\": 0\n                              }\n                            ]\n                          }\n                        ]\n                      }\n                    }\n                  }\n                ]\n              }\n            }\n          }\n        }\n      {% endcapture %}\n\n      {% assign result = result_json | parse_json %}\n    {% endif %}\n\n    {% assign product = result.data.product %}\n\n    {% for variant in product.variants.nodes %}\n      {% for inventory_level in variant.inventoryItem.inventoryLevels.nodes %}\n        {% if inventory_level.quantities.first.quantity > 0 %}\n          {% assign qualifies_to_be_tagged = true %}\n          {% break %}\n        {% endif %}\n      {% endfor %}\n\n      {% if qualifies_to_be_tagged %}\n        {% break %}\n      {% endif %}\n    {% endfor %}\n\n    {% if qualifies_to_be_tagged or product.variants.pageInfo.hasNextPage == false %}\n      {% break %}\n    {% else %}\n      {% assign cursor = product.variants.pageInfo.endCursor %}\n    {% endif %}\n  {% endfor %}\n\n  {% if qualifies_to_be_tagged %}\n    {% unless product.tags contains product_tag_to_apply %}\n      {% action \"shopify\" %}\n        mutation {\n          tagsAdd(\n            id: {{ product.id | json }}\n            tags: {{ product_tag_to_apply | json }}\n          ) {\n            userErrors {\n              field\n              message\n            }\n          }\n        }\n      {% endaction %}\n    {% endunless %}\n\n  {% else %}\n    {% if product.tags contains product_tag_to_apply %}\n      {% action \"shopify\" %}\n        mutation {\n          tagsRemove(\n            id: {{ product.id | json }}\n            tags: {{ product_tag_to_apply | json }}\n          ) {\n            userErrors {\n              field\n              message\n            }\n          }\n        }\n      {% endaction %}\n    {% endif %}\n  {% endif %}\n\n{% elsif event.topic == \"mechanic/user/trigger\" or event.topic contains \"mechanic/scheduler/\" %}\n  {% capture bulk_operation_query %}\n    query {\n      products {\n        edges {\n          node {\n            __typename\n            id\n            tags\n            variants {\n              edges {\n                node {\n                  __typename\n                  id\n                  inventoryItem {\n                    inventoryLevels {\n                      edges {\n                        node {\n                          __typename\n                          id\n                          quantities(names: \"incoming\") {\n                            name\n                            quantity\n                          }\n                        }\n                      }\n                    }\n                  }\n                }\n              }\n            }\n          }\n        }\n      }\n    }\n  {% endcapture %}\n\n  {% action \"shopify\" %}\n    mutation {\n      bulkOperationRunQuery(\n        query: {{ bulk_operation_query | json }}\n      ) {\n        bulkOperation {\n          id\n          status\n        }\n        userErrors {\n          field\n          message\n        }\n      }\n    }\n  {% endaction %}\n\n{% elsif event.topic == \"mechanic/shopify/bulk_operation\" %}\n  {% if event.preview %}\n    {% capture jsonl_string %}\n      {\"__typename\":\"Product\",\"id\":\"gid:\\/\\/shopify\\/Product\\/1234567890\",\"tags\":[\"testing\"]}\n      {\"__typename\":\"ProductVariant\",\"id\":\"gid:\\/\\/shopify\\/ProductVariant\\/1234567890\",\"inventoryItem\":{},\"__parentId\":\"gid:\\/\\/shopify\\/Product\\/1234567890\"}\n      {\"__typename\":\"InventoryLevel\",\"quantities\":[{\"name\":\"incoming\",\"quantity\":1}],\"__parentId\":\"gid:\\/\\/shopify\\/ProductVariant\\/1234567890\"}\n      {\"__typename\":\"Product\",\"id\":\"gid:\\/\\/shopify\\/Product\\/2345678901\",\"tags\":[{{ product_tag_to_apply | json }}]}\n      {\"__typename\":\"ProductVariant\",\"id\":\"gid:\\/\\/shopify\\/ProductVariant\\/2345678901\",\"inventoryItem\":{},\"__parentId\":\"gid:\\/\\/shopify\\/Product\\/2345678901\"}\n      {\"__typename\":\"InventoryLevel\",\"quantities\":[{\"name\":\"incoming\",\"quantity\":1}],\"__parentId\":\"gid:\\/\\/shopify\\/ProductVariant\\/2345678901\"}\n    {% endcapture %}\n\n    {% assign bulkOperation = hash %}\n    {% assign bulkOperation[\"objects\"] = jsonl_string | parse_jsonl %}\n  {% endif %}\n\n  {% assign bulk_products = bulkOperation.objects | where: \"__typename\", \"Product\" %}\n  {% assign bulk_variants = bulkOperation.objects | where: \"__typename\", \"ProductVariant\" %}\n  {% assign bulk_inventory_levels = bulkOperation.objects | where: \"__typename\", \"InventoryLevel\" %}\n\n  {% for product in bulk_products %}\n    {% assign qualifies_to_be_tagged = nil %}\n\n    {% assign variants = bulk_variants | where: \"__parentId\", product.id %}\n\n    {% for variant in variants %}\n      {% assign inventory_levels = bulk_inventory_levels | where: \"__parentId\", variant.id %}\n\n      {% for inventory_level in inventory_levels %}\n        {% if inventory_level.quantities.first.quantity > 0 %}\n          {% assign qualifies_to_be_tagged = true %}\n          {% break %}\n        {% endif %}\n      {% endfor %}\n\n      {% if qualifies_to_be_tagged %}\n        {% break %}\n      {% endif %}\n    {% endfor %}\n\n    {% if qualifies_to_be_tagged %}\n      {% unless product.tags contains product_tag_to_apply %}\n        {% action \"shopify\" %}\n          mutation {\n            tagsAdd(\n              id: {{ product.id | json }}\n              tags: {{ product_tag_to_apply | json }}\n            ) {\n              userErrors {\n                field\n                message\n              }\n            }\n          }\n        {% endaction %}\n      {% endunless %}\n\n    {% else %}\n      {% if product.tags contains product_tag_to_apply %}\n        {% action \"shopify\" %}\n          mutation {\n            tagsRemove(\n              id: {{ product.id | json }}\n              tags: {{ product_tag_to_apply | json }}\n            ) {\n              userErrors {\n                field\n                message\n              }\n            }\n          }\n        {% endaction %}\n      {% endif %}\n    {% endif %}\n  {% endfor %}\n{% endif %}\n",
  "subscriptions": [
    "shopify/inventory_levels/update",
    "mechanic/user/trigger",
    "mechanic/shopify/bulk_operation"
  ],
  "subscriptions_template": "shopify/inventory_levels/update\n{% if options.run_on_a_schedule__boolean %}\n  mechanic/scheduler/daily+2.hours\n{% endif %}\nmechanic/user/trigger\nmechanic/shopify/bulk_operation",
  "tags": [
    "Auto-Tag",
    "Bulk",
    "Inventory",
    "Products",
    "Transfer"
  ]
}
