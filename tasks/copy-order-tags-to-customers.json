{
  "name": "Copy order and/or product tags to customers",
  "options": {
    "include_order_tags__boolean": true,
    "include_product_tags__boolean": null,
    "only_include_customers_matching_this_query": null,
    "only_include_orders_matching_this_query": null,
    "only_copy_these_tags__array": null,
    "remove_those_tags_if_a_qualifying_source_cannot_be_found__boolean": null,
    "run_daily__boolean": null
  },
  "subscriptions": [
    "mechanic/user/trigger",
    "mechanic/shopify/bulk_operation"
  ],
  "subscriptions_template": "mechanic/user/trigger\n{% if options.run_daily__boolean %}\n  mechanic/scheduler/daily\n{% endif %}\n\nmechanic/shopify/bulk_operation",
  "script": "{% comment %}\n  Option order:\n\n  {{ options.include_order_tags__boolean }}\n  {{ options.include_product_tags__boolean }}\n\n  {{ options.only_include_customers_matching_this_query }}\n  {{ options.only_include_orders_matching_this_query }}\n\n  {{ options.only_copy_these_tags__array }}\n  {{ options.remove_those_tags_if_a_qualifying_source_cannot_be_found__boolean }}\n\n  {{ options.run_daily__boolean }}\n{% endcomment %}\n\n{% if options.include_order_tags__boolean == false and options.include_product_tags__boolean == false %}\n  {\"error\": \"Choose at least one of 'Include order tags' and 'Include product tags'.  :)\"}\n{% endif %}\n\n{% if options.remove_those_tags_if_a_qualifying_source_cannot_be_found__boolean and options.only_copy_these_tags__array == blank %}\n  {\"error\": \"Mechanic can only remove tags it knows about. If you choose 'Remove those tags [...]', you must also fill in 'Only copy these tags'.\"}\n{% endif %}\n\n{% if event.topic == \"mechanic/user/trigger\" or event.topic contains \"mechanic/scheduler/\" %}\n  {% capture bulk_operation_query %}\n    query {\n      customers(query: {{ options.only_include_customers_matching_this_query | json }}) {\n        edges {\n          node {\n            __typename\n            id\n            tags\n            orders(query: {{ options.only_include_orders_matching_this_query | json }}) {\n              edges {\n                node {\n                  __typename\n                  id\n                  {% if options.include_order_tags__boolean %}\n                    tags\n                  {% endif %}\n                  {% if options.include_product_tags__boolean %}\n                    lineItems {\n                      edges {\n                        node {\n                          __typename\n                          id\n                          product {\n                            __typename\n                            id\n                            tags\n                          }\n                        }\n                      }\n                    }\n                  {% endif %}\n                }\n              }\n            }\n          }\n        }\n      }\n    }\n  {% endcapture %}\n\n  {% action \"shopify\" %}\n    mutation {\n      bulkOperationRunQuery(\n        query: {{ bulk_operation_query | json }}\n      ) {\n        bulkOperation {\n          id\n          status\n        }\n        userErrors {\n          field\n          message\n        }\n      }\n    }\n  {% endaction %}\n{% elsif event.topic == \"mechanic/shopify/bulk_operation\" %}\n  {% assign customer_ids = bulkOperation.objects | where: \"__typename\", \"Customer\" | map: \"id\" %}\n\n  {% assign tags_available_by_customer_id = hash %}\n\n  {% if options.include_order_tags__boolean %}\n    {% assign orders = bulkOperation.objects | where: \"__typename\", \"Order\" %}\n    {% for order in orders %}\n      {% assign customer = order.__parent %}\n\n      {% if tags_available_by_customer_id[customer.id] == nil %}\n        {% assign tags_available_by_customer_id[customer.id] = array %}\n      {% endif %}\n\n      {% assign tags_available_by_customer_id[customer.id] = tags_available_by_customer_id[customer.id] | concat: order.tags %}\n    {% endfor %}\n  {% endif %}\n\n  {% if options.include_product_tags__boolean %}\n    {% assign lineItems = bulkOperation.objects | where: \"__typename\", \"LineItem\" | where: \"product\" %}\n    {% for lineItem in lineItems %}\n      {% assign product = lineItem.product %}\n      {% assign order = lineItem.__parent %}\n      {% assign customer = order.__parent %}\n\n      {% if tags_available_by_customer_id[customer.id] == nil %}\n        {% assign tags_available_by_customer_id[customer.id] = array %}\n      {% endif %}\n\n      {% assign tags_available_by_customer_id[customer.id] = tags_available_by_customer_id[customer.id] | concat: product.tags %}\n    {% endfor %}\n  {% endif %}\n\n  {% if event.preview %}\n    {% assign preview_tags = \"foo,bar,baz\" | split: \",\" %}\n    {% assign customer_ids[0] = \"gid://shopify/Customer/1234567890\" %}\n    {% assign tags_available_by_customer_id[\"gid://shopify/Customer/1234567890\"] = options.only_copy_these_tags__array | default: preview_tags %}\n    {% assign bulkOperation = hash %}\n    {% assign bulkOperation[\"objects\"] = array %}\n    {% assign bulkOperation[\"objects\"][0] = '{\"id\":\"gid://shopify/Customer/1234567890\",\"tags\":\"\"}' | parse_json %}\n  {% endif %}\n\n  {% for customer_id in customer_ids %}\n    {% assign customer = bulkOperation.objects | where: \"id\", customer_id | first %}\n\n    {% assign tags_available = tags_available_by_customer_id[customer_id] | default: array %}\n\n    {% if options.only_copy_these_tags__array == blank %}\n      {% assign tags_applicable = tags_available %}\n    {% else %}\n      {% assign tags_applicable = array %}\n\n      {% for whitelisted_tag in options.only_copy_these_tags__array %}\n        {% if tags_available contains whitelisted_tag %}\n          {% assign tags_applicable[tags_applicable.size] = whitelisted_tag %}\n        {% endif %}\n      {% endfor %}\n    {% endif %}\n\n    {% assign tags_applicable = tags_applicable | sort | uniq %}\n\n    {% if tags_applicable != empty %}\n      {% assign tags_to_copy = array %}\n\n      {% for tag in tags_applicable %}\n        {% unless customer.tags contains tag %}\n          {% assign tags_to_copy[tags_to_copy.size] = tag %}\n        {% endunless %}\n      {% endfor %}\n\n      {% if tags_to_copy == empty %}\n        {% capture log_message %}Customer {{ customer.id }} already has all applicable tags ({{ tags_applicable | join: \", \" }}); nothing to do.{% endcapture %}\n        {\"log\": {{ log_message | json }}}\n      {% else %}\n        {% action \"shopify\" %}\n          mutation {\n            tagsAdd(\n              id: {{ customer.id | json }}\n              tags: {{ tags_to_copy | json }}\n            ) {\n              userErrors {\n                field\n                message\n              }\n            }\n          }\n        {% endaction %}\n      {% endif %}\n    {% endif %}\n\n    {% if options.remove_those_tags_if_a_qualifying_source_cannot_be_found__boolean and options.only_copy_these_tags__array != blank %}\n      {% assign tags_to_remove = array %}\n\n      {% for tag in options.only_copy_these_tags__array %}\n        {% unless tags_applicable contains tag %}\n          {% if customer.tags contains tag %}\n            {% assign tags_to_remove[tags_to_remove.size] = tag %}\n          {% endif %}\n        {% endunless %}\n      {% endfor %}\n\n      {% if tags_to_remove != empty %}\n        {% action \"shopify\" %}\n          mutation {\n            tagsRemove(\n              id: {{ customer.id | json }}\n              tags: {{ tags_to_remove | json }}\n            ) {\n              userErrors {\n                field\n                message\n              }\n            }\n          }\n        {% endaction %}\n      {% endif %}\n    {% endif %}\n\n  {% endfor %}\n{% endif %}",
  "docs": "Run this task to scan all of your customers and their order histories in bulk, copying order and/or product tags to the relevant customer. Optionally, configure a specific set of tags to look for, when scanning. Optionally, choose to remove those tags if a qualifying source can't be found - useful for adding customer tags that expire after ordering!\n\nRun this task to scan all of your customers and their order histories in bulk, copying order and/or product tags to the relevant customer. Optionally, configure a specific set of tags to look for, when scanning. Optionally, choose to remove those tags if a qualifying source can't be found.\r\n\r\nBoth the customer and order query options support Liquid. This means that you can dynamically query for orders, based on things like the current time.\r\n\r\nFor example, use these options to achieve customer tags that auto-expire a year after the newest qualifying order:\r\n\r\n* \"Only include orders matching this query\": `created_at:>={{ \"now\" | date: \"%s\" | minus: 31536000 | date: \"%Y-%m-%d\" }}`\r\n* \"Only copy these tags\": (use whatever order or product tag(s) you want to copy)\r\n* \"Remove those tags if a qualifying source cannot be found\": yes\r\n* \"Run daily\": yes\r\n\r\nNote: the 31536000 value is a quantity of seconds; 31536000 is the number of seconds in a year. To adjust, replace this value with the number of seconds you want to use. For example, 30 days is 2592000 seconds.",
  "halt_action_run_sequence_on_error": false,
  "online_store_javascript": null,
  "order_status_javascript": null,
  "perform_action_runs_in_sequence": false
}
