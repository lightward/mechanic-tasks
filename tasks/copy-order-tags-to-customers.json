{
  "docs": "Run this task to scan all of your customers and their order histories, copying order and/or product tags to the relevant customer. Optionally, configure a specific set of tags to look for, when scanning. Optionally, choose to remove those tags if a qualifying source can't be found.\n\nBoth the customer and order query options support Liquid. This means that you can dynamically query for orders, based on things like the current date.\n\nFor example, use these options to achieve customer tags that auto-expire a year after the newest qualifying order:\n\n* \"Only include orders matching this query\": `created_at:>={{ \"now - 1 year\" | date: \"%Y-%m-%d\" }}`\n* \"Only copy these tags\": (use whatever order or product tag(s) you want to copy)\n* \"Remove those tags if a qualifying source cannot be found\": yes\n* \"Run daily\": yes\n\n**Important:** The customers query must use the **exact** casing and syntax as a query that is run from the customer segments admin screen. More information on the the syntax for these can be found [here](https://shopify.dev/docs/api/shopifyql/segment-query-language-reference).\n\nFor example, to only include customers that have the \"subscriber\", use this query: `customer_tags CONTAINS 'subscriber'`",
  "halt_action_run_sequence_on_error": false,
  "name": "Copy order and/or product tags to customers",
  "online_store_javascript": null,
  "options": {
    "include_order_tags__boolean": true,
    "include_product_tags__boolean": null,
    "only_include_customers_matching_this_query": null,
    "only_include_orders_matching_this_query": null,
    "only_copy_these_tags__array": null,
    "remove_those_tags_if_a_qualifying_source_cannot_be_found__boolean": null,
    "run_daily__boolean": null
  },
  "order_status_javascript": null,
  "perform_action_runs_in_sequence": false,
  "script": "{% assign include_order_tags = options.include_order_tags__boolean %}\n{% assign include_product_tags = options.include_product_tags__boolean %}\n{% assign customer_segment_query = options.only_include_customers_matching_this_query %}\n{% assign only_include_orders_matching_this_query = options.only_include_orders_matching_this_query %}\n{% assign only_copy_these_tags = options.only_copy_these_tags__array %}\n{% assign remove_those_tags_if_a_qualifying_source_cannot_be_found = options.remove_those_tags_if_a_qualifying_source_cannot_be_found__boolean %}\n\n{% unless include_order_tags or include_product_tags %}\n  {% error \"Choose at least one of 'Include order tags' and 'Include product tags'. :)\" %}\n{% endunless %}\n\n{% if remove_those_tags_if_a_qualifying_source_cannot_be_found and only_copy_these_tags == blank %}\n  {% error \"Mechanic can only remove tags it knows about. If you choose 'Remove those tags [...]', you must also fill in 'Only copy these tags'.\" %}\n{% endif %}\n\n{% if event.topic == \"mechanic/user/trigger\" or event.topic contains \"mechanic/scheduler/\" %}\n  {% comment %}\n    -- get IDs of all customers who match the segment query\n    -- Note: a segment query cannot be null, so if one has not been configured in the task then send an empty string\n  {% endcomment %}\n\n  {% assign cursor = nil %}\n  {% assign customer_ids = array %}\n\n  {% for n in (1..100) %}\n    {% capture query %}\n      query {\n        customerSegmentMembers(\n          first: 1000\n          after: {{ cursor | json }}\n          query: {{ customer_segment_query | default: \"\" | json }}\n        ) {\n          pageInfo {\n            hasNextPage\n            endCursor\n          }\n          edges {\n            node {\n              id\n            }\n          }\n        }\n      }\n    {% endcapture %}\n\n    {% assign result = query | shopify %}\n\n    {% assign customer_segment_members = result.data.customerSegmentMembers.edges | map: \"node\" %}\n\n    {% comment %}\n      -- remove the \"SegmentMember\" portion from IDs for easier use in querying each customer for additional data not available in the segment resource\n    {% endcomment %}\n\n    {% for customer_segment_member in customer_segment_members %}\n      {% assign customer_ids[customer_ids.size] = customer_segment_member.id | remove: \"SegmentMember\" %}\n    {% endfor %}\n\n    {% if result.data.customerSegmentMembers.pageInfo.hasNextPage %}\n      {% assign cursor = result.data.customerSegmentMembers.pageInfo.endCursor %}\n    {% else %}\n      {% break %}\n    {% endif %}\n  {% endfor %}\n\n  {% unless event.preview %}\n    {% log count_of_customers_matching_query: customer_ids.size %}\n  {% endunless %}\n\n  {% if event.preview %}\n    {% assign customer_ids[0] = \"gid://shopify/Customer/1234567890\" %}\n  {% endif %}\n\n  {% for customer_id in customer_ids %}\n    {% comment %}\n      -- get all relevant order data for this customer\n    {% endcomment %}\n\n    {% assign cursor = nil %}\n    {% assign tags_should_have = array %}\n\n    {% for n in (1..10) %}\n      {% capture query %}\n        query {\n          customer(id: {{ customer_id | json }}) {\n            id\n            tags\n            orders(\n              first: 250\n              after: {{ cursor | json }}\n            ) {\n              pageInfo {\n                hasNextPage\n                endCursor\n              }\n              nodes {\n                id\n                {% if include_order_tags %}tags{% endif %}\n                {% if include_product_tags %}\n                  lineItems(first: 250) {\n                    nodes {\n                      product {\n                        tags\n                      }\n                    }\n                  }\n                {% endif %}\n              }\n            }\n          }\n        }\n      {% endcapture %}\n\n      {% assign result = query | shopify %}\n\n      {% if event.preview %}\n        {% capture result_json %}\n          {\n            \"data\": {\n              \"customer\": {\n                \"id\": \"gid://shopify/Customer/1234567890\",\n                \"orders\": {\n                  \"nodes\": [\n                    {\n                      \"id\": \"gid://shopify/Order/1234567890\",\n                      \"tags\": {{ only_copy_these_tags.first | default: \"order preview tag\" | json }},\n                      \"lineItems\": {\n                        \"nodes\": [\n                          {\n                            \"product\": {\n                              \"tags\": {{ only_copy_these_tags.first | default: \"product preview tag\" | json }}\n                            }\n                          }\n                        ]\n                      }\n                    }\n                  ]\n                }\n              }\n            }\n          }\n        {% endcapture %}\n\n        {% assign result = result_json | parse_json %}\n      {% endif %}\n\n      {% assign customer = result.data.customer %}\n\n      {% comment %}\n        -- process order tags and/or product tags to see which a customer should have based on task configuration\n      {% endcomment %}\n\n      {% for order in customer.orders.nodes %}\n        {% if include_order_tags %}\n          {% for tag in order.tags %}\n            {% if only_copy_these_tags != blank %}\n              {% unless only_copy_these_tags contains tag %}\n                {% continue %}\n              {% endunless %}\n            {% endif %}\n\n            {% assign tags_should_have = tags_should_have | push: tag %}\n          {% endfor %}\n        {% endif %}\n\n        {% if include_product_tags %}\n          {% for line_item in order.lineItems.nodes %}\n            {% for tag in line_item.product.tags %}\n              {% if only_copy_these_tags != blank %}\n                {% unless only_copy_these_tags contains tag %}\n                  {% continue %}\n                {% endunless %}\n              {% endif %}\n\n              {% assign tags_should_have = tags_should_have | push: tag %}\n            {% endfor %}\n          {% endfor %}\n        {% endif %}\n      {% endfor %}\n\n      {% if result.data.customer.orders.pageInfo.hasNextPage %}\n        {% assign cursor = result.data.customer.orders.pageInfo.endCursor %}\n      {% else %}\n        {% break %}\n      {% endif %}\n    {% endfor %}\n\n    {% comment %}\n      -- determine which tags should be added or removed from the customer\n    {% endcomment %}\n\n    {% assign tags_to_add = array %}\n    {% assign tags_to_remove = array %}\n\n    {% for tag in tags_should_have %}\n      {% unless customer.tags contains tag or tags_to_add contains tag %}\n        {% assign tags_to_add = tags_to_add | push: tag %}\n      {% endunless %}\n    {% endfor %}\n\n    {% if remove_those_tags_if_a_qualifying_source_cannot_be_found %}\n      {% for tag in only_copy_these_tags %}\n        {% if customer.tags contains tag %}\n          {% unless tags_should_have contains tag %}\n            {% assign tags_to_remove = tags_to_remove | push: tag %}\n          {% endunless %}\n        {% endif %}\n      {% endfor %}\n    {% endif %}\n\n    {% if tags_to_add != blank %}\n      {% action \"shopify\" %}\n        mutation {\n          tagsAdd(\n            id: {{ customer.id | json }}\n            tags: {{ tags_to_add | sort_natural | json }}\n          ) {\n            userErrors {\n              field\n              message\n            }\n          }\n        }\n      {% endaction %}\n    {% endif %}\n\n    {% if tags_to_remove != blank %}\n      {% action \"shopify\" %}\n        mutation {\n          tagsRemove(\n            id: {{ customer.id | json }}\n            tags: {{ tags_to_remove | sort_natural | json }}\n          ) {\n            userErrors {\n              field\n              message\n            }\n          }\n        }\n      {% endaction %}\n    {% endif %}\n  {% endfor %}\n{% endif %}\n",
  "subscriptions": [
    "mechanic/user/trigger",
    "mechanic/shopify/bulk_operation"
  ],
  "subscriptions_template": "mechanic/user/trigger\n{% if options.run_daily__boolean %}\n  mechanic/scheduler/daily\n{% endif %}",
  "tags": [
    "Auto-Tag",
    "Customers"
  ]
}
