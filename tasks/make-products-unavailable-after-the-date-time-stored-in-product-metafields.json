{
  "docs": "Use this task to automatically set product inventory to 0, and the product's inventory policy to deny out-of-stock purchases, after a date/time that you specify in a product metafield.\n\nConfigure the \"Datetime product metafield namespace dot key\" field with the namespace and key (e.g. \"custom.unpublish_after\") for the product metafield that holds a Shopify [date or date_time](https://shopify.dev/docs/apps/custom-data/metafields/types) value. More information on setting up new Shopify metafields can be found [here](https://help.shopify.com/en/manual/metafields).\n\nWhen you run this task (or as it runs hourly/daily, per your configuration), the task will look for products who have a metafield date/time value that's in the past. For qualifying products, all inventory items with a level greater than 0 will have their levels set to exactly 0, and all variants will have their inventory policies set to \"deny\" (preventing sales, once the variants are all out of stock).\n\n__Note:__ If you choose to use the date only type for the metafield, then the task will receive those dates as midnight local shop time. So, if this task encounters a metafield date that is the same as the task run date, then that metafield date will be in the past based on a seconds-since-midnight calculation.",
  "halt_action_run_sequence_on_error": false,
  "name": "Make products unavailable, after the date/time stored in product metafields",
  "online_store_javascript": null,
  "options": {
    "datetime_product_metafield_namespace_dot_key__required": null,
    "run_hourly__boolean": null,
    "run_daily__boolean": null,
    "test_mode__boolean": null
  },
  "order_status_javascript": null,
  "perform_action_runs_in_sequence": false,
  "script": "{% if event.topic == \"mechanic/user/trigger\" or event.topic contains \"mechanic/scheduler/\" %}\n  {% capture bulk_operation_query %}\n    query {\n      products {\n        edges {\n          node {\n            __typename\n            id\n            metafield(key: {{ options.datetime_product_metafield_namespace_dot_key__required | json }}) {\n              value\n            }\n            variants {\n              edges {\n                node {\n                  __typename\n                  id\n                  inventoryPolicy\n                  inventoryItem {\n                    id\n                    inventoryLevels {\n                      edges {\n                        node {\n                          __typename\n                          id\n                          location {\n                            id\n                          }\n                          quantities(names: \"available\") {\n                            name\n                            quantity\n                          }\n                        }\n                      }\n                    }\n                  }\n                }\n              }\n            }\n          }\n        }\n      }\n    }\n  {% endcapture %}\n\n  {% action \"shopify\" %}\n    mutation {\n      bulkOperationRunQuery(\n        query: {{ bulk_operation_query | json }}\n      ) {\n        bulkOperation {\n          id\n          status\n        }\n        userErrors {\n          field\n          message\n        }\n      }\n    }\n  {% endaction %}\n\n{% elsif event.topic == \"mechanic/shopify/bulk_operation\" %}\n  {% assign now_s = \"now\" | date: \"%s\" | times: 1 %}\n\n  {% if event.preview %}\n    {% capture bulkOperation_objects_jsonl %}\n      {\"__typename\":\"Product\",\"id\":\"gid:\\/\\/shopify\\/Product\\/1234567890\",\"metafield\":{\"value\":\"2023-04-01\"}}\n      {\"__typename\":\"ProductVariant\",\"id\":\"gid:\\/\\/shopify\\/ProductVariant\\/1234567890\",\"inventoryPolicy\": \"CONTINUE\",\"inventoryItem\":{\"id\":\"gid:\\/\\/shopify\\/InventoryItem\\/1234567890\"},\"__parentId\":\"gid:\\/\\/shopify\\/Product\\/1234567890\"}\n      {\"__typename\":\"InventoryLevel\",\"id\": \"gid:\\/\\/shopify\\/InventoryLevel\\/1234567890?inventory_item_id=1234567890\",\"location\":{\"id\":\"gid:\\/\\/shopify\\/Location\\/1234567890\"},\"quantities\":[{\"name\":\"available\",\"quantity\":4}],\"__parentId\":\"gid:\\/\\/shopify\\/ProductVariant\\/1234567890\"}\n    {% endcapture %}\n\n    {% assign bulkOperation = hash %}\n    {% assign bulkOperation[\"objects\"] = bulkOperation_objects_jsonl | parse_jsonl %}\n  {% endif %}\n\n  {% assign bulk_products = bulkOperation.objects | where: \"__typename\", \"Product\" %}\n  {% assign bulk_variants = bulkOperation.objects | where: \"__typename\", \"ProductVariant\" %}\n  {% assign bulk_inventory_levels = bulkOperation.objects | where: \"__typename\", \"InventoryLevel\" %}\n\n  {% for product in bulk_products %}\n    {% assign summary = array %}\n\n    {% if product.metafield.value == blank %}\n      {% continue %}\n    {% endif %}\n\n    {% assign product_date = product.metafield.value | parse_date: \"%Y-%m-%d\" %}\n\n    {% if product_date == nil %}\n      {% log\n        message: \"Found a product metafield value that doesn't match the Shopify date or date_time metafield format. Skipping.\",\n        product_metafield_value: product.metafield.value\n      %}\n      {% continue %}\n    {% endif %}\n\n    {% assign product_date_s = product.metafield.value | date: \"%s\" | times: 1 %}\n\n    {% if product_date_s > now_s %}\n      {% continue %}\n    {% endif %}\n\n    {% assign variants = bulk_variants | where: \"__parentId\", product.id %}\n\n    {% assign variant_ids_to_update = array %}\n    {% assign inventory_adjustments = array %}\n\n    {% for variant in variants %}\n      {% assign inventory_levels = bulk_inventory_levels | where: \"__parentId\", variant.id %}\n\n      {% if variant.inventoryPolicy != \"DENY\" %}\n        {% assign variant_ids_to_update = variant_ids_to_update | push: variant.id %}\n        {% assign summary[summary.size]\n          = \"Change variant inventory policy for \"\n          | append: variant.id\n          | append: \" to DENY\"\n        %}\n      {% endif %}\n\n      {% for inventory_level in inventory_levels %}\n        {% if inventory_level.quantities.first.quantity > 0 %}\n          {% assign inventory_adjustment = hash %}\n          {% assign inventory_adjustment[\"inventoryItemId\"] = variant.inventoryItem.id %}\n          {% assign inventory_adjustment[\"locationId\"] = inventory_level.location.id %}\n          {% assign inventory_adjustment[\"delta\"] = inventory_level.quantities.first.quantity | times: -1 %}\n          {% assign inventory_adjustments = inventory_adjustments | push: inventory_adjustment %}\n\n          {% assign summary[summary.size]\n            = \"Set available inventory for \"\n            | append: variant.id\n            | append: \" at location \"\n            | append: inventory_level.location.id\n            | append: \" to 0, by adjusting it by -\"\n            | append: inventory_level.quantities.first.quantity\n          %}\n        {% endif %}\n      {% endfor %}\n    {% endfor %}\n\n    {% if summary != blank %}\n      {% log product_id: product.id, updates_to_be_made: summary %}\n    {% endif %}\n\n    {% if inventory_adjustments != blank %}\n      {% assign groups_of_inventory_adjustments = inventory_adjustments | in_groups_of: 250, fill_with: false %}\n\n      {% for group_of_inventory_adjustments in groups_of_inventory_adjustments %}\n        {% action \"shopify\" %}\n          mutation {\n            inventoryAdjustQuantities(\n              input: {\n                reason: \"correction\"\n                name: \"available\"\n                changes: {{ group_of_inventory_adjustments | graphql_arguments }}\n              }\n            ) {\n              inventoryAdjustmentGroup {\n                reason\n                changes {\n                  name\n                  delta\n                  quantityAfterChange\n                  item {\n                    id\n                    sku\n                  }\n                  location {\n                    name\n                  }\n                }\n              }\n              userErrors {\n                code\n                field\n                message\n              }\n            }\n          }\n        {% endaction %}\n      {% endfor %}\n    {% endif %}\n\n    {% if variant_ids_to_update != blank %}\n      {% action \"shopify\" %}\n        mutation {\n          productVariantsBulkUpdate(\n            allowPartialUpdates: true\n            productId: {{ product.id | json }}\n            variants: [\n              {% for variant_id in variant_ids_to_update -%}\n                {\n                  id: {{ variant_id | json }}\n                  inventoryPolicy: DENY\n                }\n              {%- endfor %}\n            ]\n          ) {\n            product {\n              id\n              title\n            }\n            productVariants {\n              displayName\n              sku\n              inventoryPolicy\n            }\n            userErrors {\n              field\n              message\n            }\n          }\n        }\n      {% endaction %}\n    {% endif %}\n  {% endfor %}\n{% endif %}\n",
  "subscriptions": [
    "mechanic/user/trigger",
    "mechanic/shopify/bulk_operation"
  ],
  "subscriptions_template": "mechanic/user/trigger\n{% if options.run_hourly__boolean %}\n  mechanic/scheduler/hourly\n{% elsif options.run_daily__boolean  %}\n  mechanic/scheduler/daily\n{% endif %}\nmechanic/shopify/bulk_operation",
  "tags": [
    "Metafields",
    "Products",
    "Unpublish"
  ]
}
