{
  "docs": "Configure this task with search terms that describe certain products, and this task will apply the tags of your choice to every customer who purchases a matching product or product variant. Run this task manually to tag all customers who have a qualifying order already on file.\n\nThis task auto-tags customers who have paid orders on file for products or product variants that match the search query you add.\n\nSample searches:\n\n* A specific SKU: search product variants for `sku:ABC123`\n* All products with a certain tag: search products for `tag:holiday`\n* All products with a certain type: search products for `product_type:\"Gift Card\"`\n* A product with a certain title: search products for `title:\"Short sleeve t-shirt\"`\n\nTo ensure expected results, use this task with test mode enabled, before disabling test mode.",
  "halt_action_run_sequence_on_error": false,
  "name": "Auto-tag customers when they purchase a matching product",
  "online_store_javascript": null,
  "options": {
    "search_query__required": "sku:ABC123",
    "search_for__choice_o1_products_o2_variants_required": "variants",
    "customer_tags_to_apply__required_array": null,
    "test_mode__boolean": true
  },
  "order_status_javascript": null,
  "perform_action_runs_in_sequence": false,
  "script": "{% assign search_query = options.search_query__required %}\n{% assign search_for = options.search_for__choice_o1_products_o2_variants_required %}\n{% assign customer_tags_to_apply = options.customer_tags_to_apply__required_array %}\n{% assign test_mode = options.test_mode__boolean %}\n\n{% assign cursor = nil %}\n{% assign qualifier_resource_ids = array %}\n{% assign qualifier_resource_summaries = array %}\n{% assign jobs = array %}\n\n{% for n in (1..100) %}\n  {% capture query %}\n    query {\n      {% if search_for == \"products\" %}\n        resources: products(\n      {% else %}\n        resources: productVariants(\n      {% endif %}\n        first: 250\n        after: {{ cursor | json }}\n        query: {{ search_query | json }}\n      ) {\n        pageInfo {\n          hasNextPage\n          endCursor\n        }\n        nodes {\n          id\n          legacyResourceId\n          {% if search_for == \"products\" %}\n            displayName: title\n          {% else %}\n            displayName\n          {% endif %}\n        }\n      }\n    }\n  {% endcapture %}\n\n  {% assign result = query | shopify %}\n\n  {% if event.preview %}\n    {% capture result_json %}\n      {\n        \"data\": {\n          \"resources\": {\n            \"nodes\": [\n              {\n                \"id\": \"gid://shopify/Product/1234567890\",\n                \"displayName\": \"ACME Widget\",\n                \"legacyResourceId\": \"1234567890\"\n              }\n            ]\n          }\n        }\n      }\n    {% endcapture %}\n\n    {% assign result = result_json | parse_json %}\n  {% endif %}\n\n  {% log qualifier_resources: result.data.resources.nodes %}\n\n  {% assign qualifier_resource_ids\n    = result.data.resources.nodes\n    | map: \"legacyResourceId\"\n    | concat: qualifier_resource_ids\n  %}\n\n  {% if result.data.resources.pageInfo.hasNextPage %}\n    {% assign cursor = result.data.resources.pageInfo.endCursor %}\n  {% else %}\n    {% break %}\n  {% endif %}\n{% endfor %}\n\n{% if event.topic contains \"shopify/orders/\" %}\n  {% if event.preview %}\n    {% capture order_json %}\n      {\n        \"financial_status\": \"paid\",\n        \"name\": \"#1234\",\n        \"customer\": {\n          \"email\": \"customer@example.com\",\n          \"tags\": \"\",\n          \"admin_graphql_api_id\": \"gid://shopify/Customer/1234567890\"\n        },\n        \"line_items\": [\n          {\n            \"product_id\": 1234567890,\n            \"variant_id\": 1234567890,\n            \"title\": \"ACME Widget\"\n          }\n        ]\n      }\n    {% endcapture %}\n\n    {% assign order = order_json | parse_json %}\n  {% endif %}\n\n  {% assign order_qualifies = false %}\n  {% assign order_qualifying_resource = nil %}\n\n  {% if order.financial_status == \"paid\" and order.customer %}\n    {% for line_item in order.line_items %}\n      {% if search_for == \"products\" %}\n        {% assign id = line_item.product_id | append: \"\" %}\n      {% else %}\n        {% assign id = line_item.variant_id | append: \"\" %}\n      {% endif %}\n\n      {% if qualifier_resource_ids contains id %}\n        {% assign order_qualifies = true %}\n        {% assign order_qualifying_resource = line_item.title %}\n        {% break %}\n      {% endif %}\n    {% endfor %}\n  {% endif %}\n\n  {% if order_qualifies %}\n    {% assign job = hash %}\n    {% assign job[\"customer_id\"] = order.customer.admin_graphql_api_id %}\n    {% assign job[\"customer_email\"] = order.customer.email %}\n    {% assign job[\"customer_existing_tags\"] = order.customer.tags | split: \", \" %}\n    {% assign job[\"reason\"] = order_qualifying_resource | append: \", in order \" | append: order.name %}\n    {% assign jobs[jobs.size] = job %}\n  {% endif %}\n\n{% elsif event.topic == \"mechanic/user/trigger\" %}\n  {% capture bulk_operation_query %}\n    query {\n      customers {\n        edges {\n          node {\n            __typename\n            id\n            defaultEmailAddress {\n              emailAddress\n            }\n            tags\n            orders(query: \"financial_status:paid\") {\n              edges {\n                node {\n                  __typename\n                  id\n                  name\n                  lineItems {\n                    edges {\n                      node {\n                        __typename\n                        id\n                        {% if search_for == \"products\" %}\n                          resource: product {\n                            legacyResourceId\n                            displayName: title\n                          }\n                        {% else %}\n                          resource: variant {\n                            legacyResourceId\n                            displayName\n                          }\n                        {% endif %}\n                      }\n                    }\n                  }\n                }\n              }\n            }\n          }\n        }\n      }\n    }\n  {% endcapture %}\n\n  {% action \"shopify\" %}\n    mutation {\n      bulkOperationRunQuery(\n        query: {{ bulk_operation_query | json }}\n      ) {\n        bulkOperation {\n          id\n          status\n        }\n        userErrors {\n          field\n          message\n        }\n      }\n    }\n  {% endaction %}\n\n{% elsif event.topic == \"mechanic/shopify/bulk_operation\" %}\n  {% if event.preview %}\n    {% capture jsonl_string %}\n      {\"__typename\":\"LineItem\",\"resource\":{\"legacyResourceId\":\"1234567890\",\"displayName\":\"ACME Widget\"},\"__parent\":{\"name\":\"#1234\",\"__parent\":{\"id\": \"gid://shopify/Customer/1234567890\",\"defaultEmailAddress\":{\"emailAddress\":\"customer@example.com\"}}}}\n    {% endcapture %}\n\n    {% assign bulkOperation = hash %}\n    {% assign bulkOperation[\"objects\"] = jsonl_string | parse_jsonl %}\n  {% endif %}\n\n  {% assign line_items\n    = bulkOperation.objects\n    | where: \"__typename\", \"LineItem\"\n    | where: \"resource\"\n  %}\n\n  {% for line_item in line_items %}\n    {% assign resource = line_item.resource %}\n    {% assign order = line_item.__parent %}\n    {% assign customer = order.__parent %}\n\n    {% if qualifier_resource_ids contains resource.legacyResourceId %}\n      {% assign job = hash %}\n      {% assign job[\"customer_id\"] = customer.id %}\n      {% assign job[\"customer_email\"] = customer.defaultEmailAddress.emailAddress %}\n      {% assign job[\"customer_existing_tags\"] = customer.tags %}\n      {% assign job[\"reason\"] = resource.displayName | append: \", in order \" | append: order.name %}\n      {% assign jobs[jobs.size] = job %}\n    {% endif %}\n  {% endfor %}\n{% endif %}\n\n{% assign customer_ids_with_jobs = jobs | map: \"customer_id\" | uniq %}\n\n{% for customer_id in customer_ids_with_jobs %}\n  {% assign customer_jobs = jobs | where: \"customer_id\", customer_id %}\n  {% assign customer_existing_tags = customer_jobs[0].customer_existing_tags %}\n  {% assign customer_email = customer_jobs[0].customer_email %}\n  {% assign reasons = customer_jobs | map: \"reason\" %}\n\n  {% assign tags_to_add = array %}\n\n  {% for tag in options.customer_tags_to_apply__required_array %}\n    {% unless customer_existing_tags contains tag %}\n      {% assign tags_to_add = tags_to_add | push: tag %}\n    {% endunless %}\n  {% endfor %}\n\n  {% if test_mode %}\n    {% log\n      customer_id: customer_id,\n      customer_email: customer_email,\n      customer_purchases: reasons,\n      customer_existing_tags: customer_existing_tags,\n      customer_tags_to_add: tags_to_add\n    %}\n\n  {% elsif tags_to_add == blank %}\n    {% log %}\n      \"Customer {{ customer.id }} already has all applicable tags ({{ tags_applicable | join: \", \" }}); nothing to do.\"\n    {% endlog %}\n\n  {% else %}\n    {% action \"shopify\" %}\n      mutation {\n        tagsAdd(\n          id: {{ customer_id | json }}\n          tags: {{ tags_to_add | json }}\n        ) {\n          userErrors {\n            field\n            message\n          }\n        }\n      }\n    {% endaction %}\n  {% endif %}\n{% endfor %}\n",
  "subscriptions": [
    "shopify/orders/paid",
    "mechanic/user/trigger",
    "mechanic/shopify/bulk_operation"
  ],
  "subscriptions_template": "shopify/orders/paid\nmechanic/user/trigger\nmechanic/shopify/bulk_operation",
  "tags": [
    "Auto-Tag",
    "Customers",
    "Orders",
    "Products"
  ]
}
