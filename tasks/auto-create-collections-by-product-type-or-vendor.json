{
  "name": "Auto-create collections by product type or vendor",
  "options": {
    "create_collections_by_product_type__boolean": null,
    "create_collections_by_vendor__boolean": null,
    "names_of_sales_channels_to_publish_collections_to__array": []
  },
  "subscriptions": [
    "shopify/products/update",
    "mechanic/user/trigger"
  ],
  "subscriptions_template": "shopify/products/update\nmechanic/user/trigger\n{% if options.names_of_sales_channels_to_publish_collections_to__array != blank %}\n  mechanic/actions/perform\n{% endif %}",
  "script": "{% assign create_collections_by_product_type = options.create_collections_by_product_type__boolean %}\n{% assign create_collections_by_vendor = options.create_collections_by_vendor__boolean %}\n{% assign sales_channel_names = options.names_of_sales_channels_to_publish_collections_to__array %}\n\n{% unless create_collections_by_product_type or create_collections_by_vendor %}\n  {% error \"Choose at least one 'Create collections by' option\" %}\n{% endunless %}\n\n{% assign product_types = array %}\n{% assign vendors = array %}\n\n{% if event.topic == \"mechanic/user/trigger\" or event.topic == \"shopify/products/update\" %}\n  {% if event.topic == \"mechanic/user/trigger\" %}\n    {% assign cursor = nil %}\n\n    {% for n in (1..1000) %}\n      {% capture query %}\n        query {\n          products(\n            first: 250\n            after: {{ cursor | json }}\n          ) {\n            pageInfo {\n              hasNextPage\n            }\n            edges {\n              cursor\n              node {\n                productType\n                vendor\n              }\n            }\n          }\n        }\n      {% endcapture %}\n\n      {% assign result = query | shopify %}\n\n      {% assign products = result.data.products.edges | map: \"node\" %}\n\n      {% for product in products %}\n        {% unless product.productType == blank or product_types contains product.productType %}\n          {% assign product_types = product_types | push: product.productType %}\n        {% endunless %}\n\n        {% unless product.vendor == blank or vendors contains product.vendor %}\n          {% assign vendors = vendors | push: product.vendor %}\n        {% endunless %}\n      {% endfor %}\n\n      {% if result.data.products.pageInfo.hasNextPage %}\n        {% assign cursor = result.data.products.edges.last.cursor %}\n      {% else %}\n        {% break %}\n      {% endif %}\n    {% endfor %}\n\n  {% elsif event.topic == \"shopify/products/update\" %}\n    {% unless product.product_type == blank %}\n      {% assign product_types[0] = product.product_type %}\n    {% endunless %}\n\n    {% unless product.vendor == blank %}\n      {% assign vendors[0] = product.vendor %}\n    {% endunless %}\n  {% endif %}\n\n  {% if event.preview %}\n    {% assign product_types[0] = \"Widget\" %}\n    {% assign vendors[0] = \"ACME\" %}\n  {% endif %}\n\n  {% if sales_channel_names != blank %}\n    {% assign publication_ids = array %}\n\n    {% capture query %}\n      query {\n        publications(first: 250) {\n          edges {\n            node {\n              id\n              name\n            }\n          }\n        }\n      }\n    {% endcapture %}\n\n    {% assign result = query | shopify %}\n\n    {% if event.preview %}\n      {% capture result_json %}\n        {\n          \"data\": {\n            \"publications\": {\n              \"edges\": [\n                {\n                  \"node\": {\n                    \"id\": \"gid://shopify/Publication/1234567890\",\n                    \"name\": {{ sales_channel_names[0] | json }}\n                  }\n                }\n              ]\n            }\n          }\n        }\n      {% endcapture %}\n\n      {% assign result = result_json | parse_json %}\n    {% endif %}\n\n    {% assign publications = result.data.publications.edges | map: \"node\" %}\n    {% assign publication_names = publications | map: \"name\" | sort %}\n    {% assign publications_indexed_by_name = publications | index_by: \"name\" %}\n\n    {% for sales_channel_name in sales_channel_names %}\n      {% if publication_names contains sales_channel_name %}\n        {% assign publication_ids = publication_ids | push: publications_indexed_by_name[sales_channel_name].id %}\n\n      {% else %}\n        {% unless event.preview %}\n          {% error\n            message: \"A configured sales channel name does not match any of the publication names available in this shop.\",\n            sales_channel_name: sales_channel_name,\n            publication_names: publication_names\n          %}\n        {% endunless %}\n      {% endif %}\n    {% endfor %}\n  {% endif %}\n\n  {% if create_collections_by_product_type %}\n    {% for product_type in product_types %}\n      {% capture query %}\n        query {\n          collections(\n            first: 1\n            query: {{ product_type | json | prepend: \"title:\" | json }}\n          ) {\n            edges {\n              node {\n                id\n                title\n                handle\n              }\n            }\n          }\n        }\n      {% endcapture %}\n\n      {% assign result = query | shopify %}\n\n      {% if result.data.collections.edges != blank %}\n        {% log\n          message: \"A collection title matching this product type already exists; skipping.\",\n          product_type: product_type,\n          collection: result.data.collections.edges.first.node\n        %}\n\n      {% else %}\n        {% capture mutation %}\n          mutation {\n            collectionCreate(\n              input: {\n                title: {{ product_type | json }}\n                ruleSet: {\n                  appliedDisjunctively: false\n                  rules: [\n                    {\n                      column: TYPE\n                      relation: EQUALS\n                      condition: {{ product_type | json }}\n                    }\n                  ]\n                }\n              }\n            ) {\n              collection {\n                id\n                title\n                handle\n              }\n              userErrors {\n                field\n                message\n              }\n            }\n          }\n        {% endcapture %}\n\n        {% action %}\n          {\n            \"type\": \"shopify\",\n            \"options\": {{ mutation | json }},\n            \"meta\": {\n              \"publication_ids\": {{ publication_ids | json }}\n            }\n          }\n        {% endaction %}\n      {% endif %}\n    {% endfor %}\n  {% endif %}\n\n  {% if create_collections_by_vendor %}\n    {% for vendor in vendors %}\n      {% capture query %}\n        query {\n          collections(\n            first: 1\n            query: {{ vendor | json | prepend: \"title:\" | json }}\n          ) {\n            edges {\n              node {\n                id\n                title\n                handle\n              }\n            }\n          }\n        }\n      {% endcapture %}\n\n      {% assign result = query | shopify %}\n\n      {% if result.data.collections.edges != blank %}\n        {% log\n          message: \"A collection title matching this vendor already exists; skipping.\",\n          vendor: vendor,\n          collection: result.data.collections.edges.first.node\n        %}\n\n      {% else %}\n        {% capture mutation %}\n          mutation {\n            collectionCreate(\n              input: {\n                title: {{ vendor | json }}\n                ruleSet: {\n                  appliedDisjunctively: false\n                  rules: [\n                    {\n                      column: VENDOR\n                      relation: EQUALS\n                      condition: {{ vendor | json }}\n                    }\n                  ]\n                }\n              }\n            ) {\n              collection {\n                id\n                title\n                handle\n              }\n              userErrors {\n                field\n                message\n              }\n            }\n          }\n        {% endcapture %}\n\n        {% action %}\n          {\n            \"type\": \"shopify\",\n            \"options\": {{ mutation | json }},\n            \"meta\": {\n              \"publication_ids\": {{ publication_ids | json }}\n            }\n          }\n        {% endaction %}\n      {% endif %}\n    {% endfor %}\n  {% endif %}\n\n{% elsif event.topic == \"mechanic/actions/perform\" %}\n  {% if event.preview %}\n    {% capture action_json %}\n      {\n        \"type\": \"shopify\",\n        \"meta\": {\n          \"publication_ids\": [\n            \"gid://shopify/Publication/1234567890\"\n          ]\n        },\n        \"run\": {\n          \"ok\": true,\n          \"result\": {\n            \"data\": {\n              \"collectionCreate\": {\n                \"collection\": {\n                  \"id\": \"gid://shopify/Collection/1234567890\",\n                  \"title\": \"ACME\",\n                  \"handle\": \"acme\"\n                }\n              }\n            }\n          }\n        }\n      }\n    {% endcapture %}\n\n    {% assign action = action_json | parse_json %}\n  {% endif %}\n\n  {% if action.run.ok %}\n    {% assign collection_id = action.run.result.data.collectionCreate.collection.id %}\n    {% assign publication_ids = action.meta.publication_ids %}\n\n    {% assign mutations = array %}\n\n    {% for publication_id in publication_ids %}\n      {% capture mutation %}\n          publishablePublish{{ forloop.index }}: publishablePublish(\n            id: {{ collection_id | json }}\n            input: {\n              publicationId: {{ publication_id | json }}\n            }\n          ) {\n            publishable {\n              ... on Collection {\n                id\n                title\n                handle\n              }\n            }\n            userErrors {\n              field\n              message\n            }\n          }\n        {% endcapture %}\n\n        {% assign mutations = mutations | push: mutation %}\n    {% endfor %}\n\n    {% if mutations != blank %}\n      {% action \"shopify\" %}\n        mutation {\n          {{ mutations | join: newline }}\n        }\n      {% endaction %}\n    {% endif %}\n  {% endif %}\n{% endif %}",
  "docs": "When products are created, this task will auto-create smart collections by product type and/or vendor, if such collections don't already exist. Additionally, configuring one or more __exact__ sales channel names will enable publishing of any _newly created_ collections by this task to those sales channels.\n\n_For example:_  \nA new product is added with a vendor of \"ACME\". If a collection with that exact title does not already exist, then the task will create it with a title of \"ACME\" and add a rule of \"vendor = ACME\", which will allow Shopify to auto-populate the collection.\n\nThe task may also be run manually to gather _all_ of the product types and vendors in your shop, and then making the same decisions on whether to create new collections and publish them.",
  "halt_action_run_sequence_on_error": false,
  "online_store_javascript": null,
  "order_status_javascript": null,
  "perform_action_runs_in_sequence": false,
  "tags": [
    "Collections",
    "Products",
    "Publish",
    "Vendor"
  ]
}
