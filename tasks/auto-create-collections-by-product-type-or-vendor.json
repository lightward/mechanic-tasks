{
  "docs": "When products are created, this task will auto-create smart collections by product type and/or vendor, if such collections don't already exist. Additionally, configuring one or more __exact__ sales channel names will enable publishing of any _newly created_ collections by this task to those sales channels.\n\n_For example:_  \nA new product is added with a vendor of \"ACME\". If a collection with that exact title does not already exist, then the task will create it with a title of \"ACME\" and add a rule of \"vendor = ACME\", which will allow Shopify to auto-populate the collection.\n\nThe task may also be run manually to gather _all_ of the product types and vendors in your shop, and then making the same decisions on whether to create new collections and publish them.",
  "halt_action_run_sequence_on_error": false,
  "name": "Auto-create collections by product type or vendor",
  "online_store_javascript": null,
  "options": {
    "create_collections_by_product_type__boolean": null,
    "create_collections_by_vendor__boolean": null,
    "names_of_sales_channels_to_publish_collections_to__array": []
  },
  "order_status_javascript": null,
  "perform_action_runs_in_sequence": false,
  "preview_event_definitions": [
    {
      "description": "New collection created",
      "event_attributes": {
        "data": {
          "meta": {
            "publication_ids": [
              "gid://shopify/Publication/1234567890"
            ]
          },
          "run": {
            "ok": true,
            "result": {
              "data": {
                "collectionCreate": {
                  "collection": {
                    "id": "gid://shopify/Collection/1234567890"
                  }
                }
              }
            }
          },
          "type": "shopify"
        },
        "topic": "mechanic/actions/perform"
      }
    }
  ],
  "script": "{% assign create_collections_by_product_type = options.create_collections_by_product_type__boolean %}\n{% assign create_collections_by_vendor = options.create_collections_by_vendor__boolean %}\n{% assign sales_channel_names = options.names_of_sales_channels_to_publish_collections_to__array %}\n\n{% unless create_collections_by_product_type or create_collections_by_vendor %}\n  {% error \"Choose at least one 'Create collections by' option\" %}\n{% endunless %}\n\n{% assign product_types = array %}\n{% assign vendors = array %}\n\n{% if event.topic == \"mechanic/user/trigger\" or event.topic == \"shopify/products/update\" %}\n  {% if event.topic == \"mechanic/user/trigger\" %}\n    {% comment %}\n      -- get all product types and vendors in the shop\n    {% endcomment %}\n\n    {% assign cursor = nil %}\n\n    {% for n in (1..10) %}\n      {% capture query %}\n        query {\n          productTypes(\n            first: 1000\n            after: {{ cursor | json }}\n          ) {\n            pageInfo {\n              hasNextPage\n              endCursor\n            }\n            nodes\n          }\n        }\n      {% endcapture %}\n\n      {% assign result = query | shopify %}\n\n      {% if event.preview %}\n        {% capture result_json %}\n          {\n            \"data\": {\n              \"productTypes\": {\n                \"nodes\": [\n                  \"Widget\"\n                ]\n              }\n            }\n          }\n        {% endcapture %}\n\n        {% assign result = result_json | parse_json %}\n      {% endif %}\n\n      {% assign product_types = product_types | concat: result.data.productTypes.nodes %}\n\n      {% if result.data.productTypes.pageInfo.hasNextPage %}\n        {% assign cursor = result.data.productTypes.pageInfo.endCursor %}\n      {% else %}\n        {% break %}\n      {% endif %}\n    {% endfor %}\n\n    {% assign cursor = nil %}\n\n    {% for n in (1..10) %}\n      {% capture query %}\n        query {\n          productVendors(\n            first: 1000\n            after: {{ cursor | json }}\n          ) {\n            pageInfo {\n              hasNextPage\n              endCursor\n            }\n            nodes\n          }\n        }\n      {% endcapture %}\n\n      {% assign result = query | shopify %}\n\n      {% if event.preview %}\n        {% capture result_json %}\n          {\n            \"data\": {\n              \"productVendors\": {\n                \"nodes\": [\n                  \"ACME\"\n                ]\n              }\n            }\n          }\n        {% endcapture %}\n\n        {% assign result = result_json | parse_json %}\n      {% endif %}\n\n      {% assign vendors = vendors | concat: result.data.productVendors.nodes %}\n\n      {% if result.data.productVendors.pageInfo.hasNextPage %}\n        {% assign cursor = result.data.productVendors.pageInfo.endCursor %}\n      {% else %}\n        {% break %}\n      {% endif %}\n    {% endfor %}\n\n  {% elsif event.topic == \"shopify/products/update\" %}\n    {% unless product.product_type == blank %}\n      {% assign product_types[0] = product.product_type %}\n    {% endunless %}\n\n    {% unless product.vendor == blank %}\n      {% assign vendors[0] = product.vendor %}\n    {% endunless %}\n  {% endif %}\n\n  {% if event.preview %}\n    {% assign product_types[0] = \"Widget\" %}\n    {% assign vendors[0] = \"ACME\" %}\n  {% endif %}\n\n  {% if sales_channel_names != blank %}\n    {% comment %}\n      -- check if the configured sales channels exist in this shop by name; save the publication IDs for lookup later\n    {% endcomment %}\n\n    {% capture query %}\n      query {\n        publications(\n          first: 250\n          catalogType:APP\n        ) {\n          nodes {\n            id\n            catalog {\n              ... on AppCatalog {\n                apps(first: 1) {\n                  nodes {\n                    title\n                  }\n                }\n              }\n            }\n          }\n        }\n      }\n    {% endcapture %}\n\n    {% assign result = query | shopify %}\n\n    {% if event.preview %}\n      {% capture result_json %}\n        {\n          \"data\": {\n            \"publications\": {\n              \"nodes\": [\n                {\n                  \"id\": \"gid://shopify/Publication/1234567890\",\n                  \"catalog\": {\n                    \"apps\": {\n                      \"nodes\": [\n                        {\n                          \"title\": {{ sales_channel_names.first | json }}\n                        }\n                      ]\n                    }\n                  }\n                }\n              ]\n            }\n          }\n        }\n      {% endcapture %}\n\n      {% assign result = result_json | parse_json %}\n    {% endif %}\n\n    {% assign publication_ids = array %}\n    {% assign available_sales_channel_names = array %}\n\n    {% for publication in result.data.publications.nodes %}\n      {% assign publication_name = publication.catalog.apps.nodes.first.title %}\n\n      {% assign available_sales_channel_names = available_sales_channel_names | push: publication_name %}\n\n      {% if sales_channel_names contains publication_name %}\n        {% assign publication_ids = publication_ids | push: publication.id %}\n      {% endif %}\n    {% endfor %}\n\n    {% unless event.preview %}\n      {% if publication_ids == blank  %}\n        {% error\n          message: \"None of the sales channel configured in this task exist in the shop. Check the list of available channels and verify each configured channel exists.\",\n          configured_sales_channel_names: sales_channel_names,\n          available_sales_channel_names: available_sales_channel_names\n        %}\n\n        {% break %}\n\n      {% elsif publication_ids.size != sales_channel_names.size %}\n        {% comment %}\n          -- using action error here so the task will continue with any other configured and matched sales channels\n        {% endcomment %}\n\n        {% action \"echo\"\n          __error: \"One or more configured sales channel names do not match any of the publication names available in this shop.\",\n          configured_sales_channel_names: sales_channel_names,\n          available_sales_channel_names: available_sales_channel_names\n        %}\n      {% endif %}\n    {% endunless %}\n  {% endif %}\n\n  {% if create_collections_by_product_type %}\n    {% for product_type in product_types %}\n      {% capture query %}\n        query {\n          collections(\n            first: 1\n            query: {{ product_type | json | prepend: \"title:\" | json }}\n          ) {\n            nodes {\n              id\n              title\n              handle\n            }\n          }\n        }\n      {% endcapture %}\n\n      {% assign result = query | shopify %}\n\n      {% if result.data.collections.nodes != blank %}\n        {% log\n          message: \"A collection title matching this product type already exists; skipping.\",\n          product_type: product_type,\n          collection: result.data.collections.nodes.first\n        %}\n\n      {% else %}\n        {% capture mutation %}\n          mutation {\n            collectionCreate(\n              input: {\n                title: {{ product_type | json }}\n                ruleSet: {\n                  appliedDisjunctively: false\n                  rules: [\n                    {\n                      column: TYPE\n                      relation: EQUALS\n                      condition: {{ product_type | json }}\n                    }\n                  ]\n                }\n              }\n            ) {\n              collection {\n                id\n                title\n                handle\n              }\n              userErrors {\n                field\n                message\n              }\n            }\n          }\n        {% endcapture %}\n\n        {% action %}\n          {\n            \"type\": \"shopify\",\n            \"options\": {{ mutation | json }},\n            \"meta\": {\n              \"publication_ids\": {{ publication_ids | json }}\n            }\n          }\n        {% endaction %}\n      {% endif %}\n    {% endfor %}\n  {% endif %}\n\n  {% if create_collections_by_vendor %}\n    {% for vendor in vendors %}\n      {% capture query %}\n        query {\n          collections(\n            first: 1\n            query: {{ vendor | json | prepend: \"title:\" | json }}\n          ) {\n            nodes {\n              id\n              title\n              handle\n            }\n          }\n        }\n      {% endcapture %}\n\n      {% assign result = query | shopify %}\n\n      {% if result.data.collections.nodes != blank %}\n        {% log\n          message: \"A collection title matching this vendor already exists; skipping.\",\n          vendor: vendor,\n          collection: result.data.collections.nodes.first\n        %}\n\n      {% else %}\n        {% capture mutation %}\n          mutation {\n            collectionCreate(\n              input: {\n                title: {{ vendor | json }}\n                ruleSet: {\n                  appliedDisjunctively: false\n                  rules: [\n                    {\n                      column: VENDOR\n                      relation: EQUALS\n                      condition: {{ vendor | json }}\n                    }\n                  ]\n                }\n              }\n            ) {\n              collection {\n                id\n                title\n                handle\n              }\n              userErrors {\n                field\n                message\n              }\n            }\n          }\n        {% endcapture %}\n\n        {% action %}\n          {\n            \"type\": \"shopify\",\n            \"options\": {{ mutation | json }},\n            \"meta\": {\n              \"publication_ids\": {{ publication_ids | json }}\n            }\n          }\n        {% endaction %}\n      {% endif %}\n    {% endfor %}\n  {% endif %}\n\n{% elsif event.topic == \"mechanic/actions/perform\" %}\n  {% comment %}\n    -- only respond to successful creation of collections\n  {% endcomment %}\n\n  {% unless action.type == \"shopify\" and action.run.ok and action.run.result.data.collectionCreate %}\n    {% break %}\n  {% endunless %}\n\n  {% assign collection_id = action.run.result.data.collectionCreate.collection.id %}\n  {% assign publication_ids = action.meta.publication_ids %}\n\n  {% comment %}\n    -- publish the new collection to all of the valid publications configured in the task\n  {% endcomment %}\n\n  {% assign mutations = array %}\n\n  {% for publication_id in publication_ids %}\n    {% capture mutation %}\n      publishablePublish{{ forloop.index }}: publishablePublish(\n        id: {{ collection_id | json }}\n        input: {\n          publicationId: {{ publication_id | json }}\n        }\n      ) {\n        publishable {\n          ... on Collection {\n            id\n            title\n            handle\n          }\n        }\n        userErrors {\n          field\n          message\n        }\n      }\n    {% endcapture %}\n\n    {% assign mutations = mutations | push: mutation %}\n  {% endfor %}\n\n  {% if mutations != blank %}\n    {% action \"shopify\" %}\n      mutation {\n        {{ mutations | join: newline }}\n      }\n    {% endaction %}\n  {% endif %}\n{% endif %}\n",
  "subscriptions": [
    "shopify/products/update",
    "mechanic/user/trigger"
  ],
  "subscriptions_template": "shopify/products/update\nmechanic/user/trigger\n{% if options.names_of_sales_channels_to_publish_collections_to__array != blank %}\n  mechanic/actions/perform\n{% endif %}",
  "tags": [
    "Collections",
    "Products",
    "Publish",
    "Vendor"
  ]
}
