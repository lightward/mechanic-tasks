{
  "docs": "Stay on top of chargebacks and inquiries! Nightly or on-demand, this task will scan the last 60 days of your order records, and apply the tags of your choice to orders with chargeback or inquiry activity, based on what that activity looks like.\n\nIf you would like for the task to scan orders beyond 60 days, you can enable [read all orders](https://learn.mechanic.dev/platform/shopify/read-all-orders) in your Mechanic settings.\n\nLearn more about chargebacks in the Shopify documentation:\n\n* [Chargebacks and inquiries](https://help.shopify.com/en/manual/payments/chargebacks)\n* [Managing chargebacks and inquiries](https://help.shopify.com/en/manual/payments/shopify-payments/managing-chargebacks)",
  "halt_action_run_sequence_on_error": false,
  "name": "Auto-tag orders with chargeback or inquiry activity",
  "online_store_javascript": null,
  "options": {
    "tag_for_any__required": "chargeback-any",
    "tag_for_accepted__required": "chargeback-accepted",
    "tag_for_charge_refunded__required": "chargeback-refunded",
    "tag_for_lost__required": "chargeback-lost",
    "tag_for_needs_response__required": "chargeback-needs-response",
    "tag_for_under_review__required": "chargeback-under-review",
    "tag_for_won__required": "chargeback-won"
  },
  "order_status_javascript": null,
  "perform_action_runs_in_sequence": false,
  "script": "{% assign tag_for_any = options.tag_for_any__required | strip  %}\n\n{% assign statuses_and_tags = hash %}\n{% assign statuses_and_tags[\"ACCEPTED\"] = options.tag_for_accepted__required | strip %}\n{% assign statuses_and_tags[\"CHARGE_REFUNDED\"] = options.tag_for_charge_refunded__required | strip %}\n{% assign statuses_and_tags[\"LOST\"] = options.tag_for_lost__required | strip %}\n{% assign statuses_and_tags[\"NEEDS_RESPONSE\"] = options.tag_for_needs_response__required | strip %}\n{% assign statuses_and_tags[\"UNDER_REVIEW\"] = options.tag_for_under_review__required | strip %}\n{% assign statuses_and_tags[\"WON\"] = options.tag_for_won__required | strip %}\n\n{% assign status_tags = statuses_and_tags | values %}\n\n{% assign cursor = nil %}\n\n{% for n in (0..100) %}\n  {% capture query %}\n    query {\n      orders (\n        first: 250\n        after: {{ cursor | json }}\n        query:\"chargeback_status:any\"\n      ) {\n        pageInfo {\n          hasNextPage\n        }\n        edges {\n          cursor\n          node {\n            id\n            disputes {\n              initiatedAs\n              status\n            }\n            tags\n          }\n        }\n      }\n    }\n  {% endcapture %}\n\n  {% assign result = query | shopify %}\n\n  {% if event.preview %}\n    {% capture result_json %}\n      {\n        \"data\": {\n          \"orders\": {\n            \"edges\": [\n              {\n                \"node\": {\n                  \"id\": \"gid://shopify/Order/1234567890\",\n                  \"legacyResourceId\": \"1234567890\",\n                  \"disputes\": [\n                    {\n                      \"initiatedAs\": \"CHARGEBACK\",\n                      \"status\": \"NEEDS_RESPONSE\"\n                    }\n                  ]\n                }\n              }\n            ]\n          }\n        }\n      }\n    {% endcapture %}\n\n    {% assign result = result_json | parse_json %}\n  {% endif %}\n\n  {% assign orders = result.data.orders.edges | map: \"node\"  %}\n\n  {% for order in orders %}\n    {% assign tags_should_have = array %}\n    {% assign tags_to_add = array %}\n    {% assign tags_to_remove = array %}\n\n    {% assign tags_should_have = tags_should_have | push: tag_for_any %}\n\n    {% assign dispute_statuses\n      = order.disputes\n      | where: \"initiatedAs\", \"CHARGEBACK\"\n      | map: \"status\"\n    %}\n\n    {% for dispute_status in dispute_statuses %}\n      {% assign tags_should_have = tags_should_have | push: statuses_and_tags[dispute_status] %}\n    {% endfor %}\n\n    {% for status_tag in status_tags %}\n      {% unless tags_should_have contains status_tag %}\n        {% if order.tags contains status_tag %}\n          {% assign tags_to_remove = tags_to_remove | push: status_tag %}\n        {% endif %}\n      {% endunless %}\n    {% endfor %}\n\n    {% for tag_should_have in tags_should_have %}\n      {% unless order.tags contains tag_should_have %}\n        {% assign tags_to_add = tags_to_add | push: tag_should_have %}\n      {% endunless %}\n    {% endfor %}\n\n    {% log\n      order_id: order.legacyResourceId,\n      dispute_statuses: dispute_statuses,\n      order_tags: order.tags,\n      tags_should_have: tags_should_have,\n      tags_to_add: tags_to_add,\n      tags_to_remove: tags_to_remove\n    %}\n\n    {% if tags_to_add != blank or tags_to_remove != blank %}\n      {% action \"shopify\" %}\n        mutation {\n          {% if tags_to_add != blank %}\n            tagsAdd(\n              id: {{ order.id | json }}\n              tags: {{ tags_to_add | json }}\n            ) {\n              userErrors {\n                field\n                message\n              }\n            }\n          {% endif %}\n          {% if tags_to_remove != blank %}\n            tagsRemove(\n              id: {{ order.id | json }}\n              tags: {{ tags_to_remove | json }}\n            ) {\n              userErrors {\n                field\n                message\n              }\n            }\n          {% endif %}\n        }\n      {% endaction %}\n    {% endif %}\n  {% endfor %}\n\n  {% if result.data.orders.pageInfo.hasNextPage %}\n    {% assign cursor = result.data.orders.edges.last.cursor %}\n  {% else %}\n    {% break %}\n  {% endif %}\n{% endfor %}",
  "subscriptions": [
    "mechanic/user/trigger",
    "mechanic/scheduler/daily"
  ],
  "subscriptions_template": "mechanic/user/trigger\nmechanic/scheduler/daily",
  "tags": [
    "Auto-Tag",
    "Orders",
    "Risk"
  ]
}
