{
  "docs": "This task resets your inventory levels at the default location in your shop, every night, for all products within a given collection (configured by ID).",
  "halt_action_run_sequence_on_error": false,
  "name": "Reset inventory levels daily",
  "online_store_javascript": null,
  "options": {
    "inventory_level_to_apply__number_required": null,
    "collection_id__number_required": null
  },
  "order_status_javascript": null,
  "perform_action_runs_in_sequence": false,
  "script": "{% assign inventory_level_to_apply = options.inventory_level_to_apply__number_required %}\n{% assign collection_id = options.collection_id__number_required %}\n\n{% assign location_id = shop.primary_location_id | prepend: \"gid://shopify/Location/\" %}\n\n{% comment %}\n  -- get all product IDs from the configured collection\n{% endcomment %}\n\n{% assign cursor = nil %}\n{% assign product_ids = array %}\n\n{% for n in (1..100) %}\n  {% capture query %}\n    query {\n      collection(id: {{ collection_id | prepend: \"gid://shopify/Collection/\" | json }}) {\n        products(\n          first: 250\n          after: {{ cursor | json }}\n        ) {\n          pageInfo {\n            hasNextPage\n            endCursor\n          }\n          nodes {\n            id\n          }\n        }\n      }\n    }\n  {% endcapture %}\n\n  {% assign result = query | shopify %}\n\n  {% if event.preview %}\n    {% capture result_json %}\n      {\n        \"data\": {\n          \"collection\": {\n            \"products\": {\n              \"nodes\": [\n                {\n                  \"id\": \"gid://shopify/Product/1234567890\"\n                }\n              ]\n            }\n          }\n        }\n      }\n    {% endcapture %}\n\n    {% assign result = result_json | parse_json %}\n  {% endif %}\n\n  {% assign collection = result.data.collection %}\n  {% assign product_ids\n    = collection.products.nodes\n    | map: \"id\"\n    | concat: product_ids\n    %}\n\n  {% if result.data.collection.products.pageInfo.hasNextPage %}\n    {% assign cursor = result.data.collection.products.pageInfo.endCursor %}\n  {% else %}\n    {% break %}\n  {% endif %}\n{% endfor %}\n\n{% comment %}\n  -- make sure collection exists and has products\n{% endcomment %}\n\n{% if collection == blank %}\n  {% log \"Collection not found by ID.\" %}\n  {% break %}\n\n{% elsif product_ids == blank %}\n  {% log \"No products found in the collection.\" %}\n  {% break %}\n{% endif %}\n\n{% comment %}\n  -- determine which inventory levels need to be set on this task run\n{% endcomment %}\n\n{% assign inventory_inputs = array %}\n\n{% for product_id in product_ids %}\n  {% comment %}\n    -- get all variants for this product (up to 2K), and their inventory items and inventory levels at the default location\n  {% endcomment %}\n\n  {% assign cursor = nil %}\n  {% assign variants = array %}\n\n  {% for n in (1..8) %}\n    {% capture query %}\n      query {\n        product(id: {{ product_id | json }}) {\n          id\n          handle\n          variants(\n            first: 250\n            after: {{ cursor | json }}\n          ) {\n            pageInfo {\n              hasNextPage\n              endCursor\n            }\n            nodes {\n              inventoryItem {\n                id\n                tracked\n                inventoryLevel(locationId: {{ location_id | json }}) {\n                  quantities(names: \"available\") {\n                    quantity\n                  }\n                }\n              }\n            }\n          }\n        }\n      }\n    {% endcapture %}\n\n    {% assign result = query | shopify %}\n\n    {% if event.preview %}\n      {% capture result_json %}\n        {\n          \"data\": {\n            \"product\": {\n              \"variants\": {\n                \"nodes\": [\n                  {\n                    \"inventoryItem\": {\n                      \"id\": \"gid://shopify/InventoryItem/1234567890\",\n                      \"tracked\": \"true\",\n                      \"inventoryLevel\": {\n                        \"quantities\": {\n                          \"quantity\": {{ inventory_level_to_apply | minus: 1 }}\n                        }\n                      }\n                    }\n                  }\n                ]\n              }\n            }\n          }\n        }\n      {% endcapture %}\n\n      {% assign result = result_json | parse_json %}\n    {% endif %}\n\n    {% comment %}\n      -- if a variant's inventory is tracked (i.e. managed by Shopify) and the available quantity at the default location differs from the configured level, then add it to input array\n    {% endcomment %}\n\n    {% for variant in result.data.product.variants.nodes %}\n      {% if variant.inventoryItem.tracked and variant.inventoryItem.inventoryLevel.quantities.first.quantity != inventory_level_to_apply %}\n        {% assign inventory_input = hash %}\n        {% assign inventory_input[\"inventoryItemId\"] = variant.inventoryItem.id %}\n        {% assign inventory_input[\"locationId\"] = location_id %}\n        {% assign inventory_input[\"quantity\"] = inventory_level_to_apply %}\n        {% assign inventory_inputs = inventory_inputs | push: inventory_input %}\n      {% endif %}\n    {% endfor %}\n\n    {% if result.data.product.variants.pageInfo.hasNextPage %}\n      {% assign cursor = result.data.product.variants.pageInfo.endCursor %}\n    {% else %}\n      {% break %}\n    {% endif %}\n  {% endfor %}\n{% endfor %}\n\n{% if inventory_inputs != blank %}\n  {% assign groups_of_inventory_inputs = inventory_inputs | in_groups_of: 250, fill_with: false %}\n\n  {% for group_of_inventory_inputs in groups_of_inventory_inputs %}\n    {% action \"shopify\" %}\n      mutation {\n        inventorySetQuantities(\n          input: {\n            name: \"available\"\n            reason: \"correction\"\n            ignoreCompareQuantity: true\n            quantities: {{ group_of_inventory_inputs | graphql_arguments }}\n          }\n        ) {\n          userErrors {\n            code\n            field\n            message\n          }\n        }\n      }\n    {% endaction %}\n  {% endfor %}\n{% endif %}\n",
  "subscriptions": [
    "mechanic/scheduler/daily"
  ],
  "subscriptions_template": "mechanic/scheduler/daily",
  "tags": [
    "Inventory",
    "Schedule"
  ]
}
