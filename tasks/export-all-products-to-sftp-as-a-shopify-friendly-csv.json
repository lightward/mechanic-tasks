{
  "docs": "On a configurable schedule, this task generates a Shopify-friendly CSV of all your products, and uploads it to the SFTP destination of your choice. This is a convenient way to keep regular backups of your entire product catalog: simply import a CSV to restore your products to that point in time. ([Learn more about CSV imports and exports of Shopify products.](https://help.shopify.com/en/manual/products/import-export/using-csv))\n\nTo only export certain products, set the \"Only export products matching this query\" option to a search query that works with Shopify's product admin area. For example, to only export products tagged \"backmeup\", use the search query \"tag:backmeup\".",
  "halt_action_run_sequence_on_error": false,
  "name": "Export all products to SFTP, as a Shopify-friendly CSV",
  "online_store_javascript": null,
  "options": {
    "only_export_products_matching_this_query": null,
    "run_every_x_hours__number": null,
    "sftp_host__required": null,
    "sftp_port__required_number": null,
    "sftp_user__required": null,
    "sftp_password__required": null,
    "sftp_upload_directory": null
  },
  "order_status_javascript": null,
  "perform_action_runs_in_sequence": false,
  "script": "{% assign only_export_products_matching_this_query = options.only_export_products_matching_this_query %}\n{% assign run_every_x_hours = options.run_every_x_hours__number %}\n{% assign sftp_host = options.sftp_host__required %}\n{% assign sftp_port = options.sftp_port__required_number %}\n{% assign sftp_user = options.sftp_user__required %}\n{% assign sftp_password = options.sftp_password__required %}\n{% assign sftp_upload_directory = options.sftp_upload_directory %}\n\n{% comment %}\n-- validate options\n{% endcomment %}\n\n{% if run_every_x_hours != blank %}\n  {% assign valid_hours = array %}\n  {% assign valid_hours[valid_hours.size] = 1 %}\n  {% assign valid_hours[valid_hours.size] = 2 %}\n  {% assign valid_hours[valid_hours.size] = 3 %}\n  {% assign valid_hours[valid_hours.size] = 4 %}\n  {% assign valid_hours[valid_hours.size] = 6 %}\n  {% assign valid_hours[valid_hours.size] = 12 %}\n  {% assign valid_hours[valid_hours.size] = 24 %}\n\n  {% unless valid_hours contains run_every_x_hours %}\n    {% error \"If set, 'Run interval in hours' must be 1, 2, 3, 4, 6, 12, or 24.\" %}\n  {% endunless %}\n{% endif %}\n\n{% assign ok_to_run = false %}\n\n{% if event.topic == \"mechanic/user/trigger\" or event.topic == \"mechanic/scheduler/daily\" %}\n  {% assign ok_to_run = true %}\n\n{% elsif event.topic == \"mechanic/scheduler/hourly\" and run_every_x_hours != blank %}\n  {% assign hour_mod = \"now\" | date: \"%H\" | modulo: run_every_x_hours %}\n\n  {% if event.preview or hour_mod == 0 %}\n    {% assign ok_to_run = true %}\n\n  {% else %}\n    {% log\n      message: \"The current hour does not fall on the configured interval; skipping\",\n      hour_interval: run_every_x_hours,\n      current_hour: hour_mod\n    %}\n  {% endif %}\n{% endif %}\n\n{% if ok_to_run %}\n  {% capture bulk_operation_query %}\n    query {\n      products(\n        reverse: true\n        query: {{ only_export_products_matching_this_query | json }}\n      ) {\n        edges {\n          node {\n            id\n            __typename\n            descriptionHtml\n            handle\n            isGiftCard\n            onlineStoreUrl\n            options {\n              id\n              __typename\n              name\n              position\n              values\n            }\n            productType\n            seo {\n              description\n              title\n            }\n            tags\n            title\n            variants {\n              edges {\n                node {\n                  id\n                  __typename\n                  barcode\n                  compareAtPrice\n                  image {\n                    id\n                    __typename\n                    altText\n                    url\n                  }\n                  inventoryItem {\n                    id\n                    __typename\n                    measurement {\n                      weight {\n                        unit\n                        value\n                      }\n                    }\n                    requiresShipping\n                    tracked\n                    unitCost {\n                      amount\n                    }\n                  }\n                  inventoryPolicy\n                  position\n                  price\n                  product {\n                    handle\n                  }\n                  selectedOptions {\n                    name\n                    value\n                  }\n                  sku\n                  taxable\n                  taxCode\n                  title\n\n                }\n              }\n            }\n            vendor\n            images {\n              edges {\n                node {\n                  id\n                  __typename\n                  altText\n                  url\n                }\n              }\n            }\n          }\n        }\n      }\n    }\n  {% endcapture %}\n\n  {% action \"shopify\" %}\n    mutation {\n      bulkOperationRunQuery(\n        query: {{ bulk_operation_query | json }}\n      ) {\n        bulkOperation {\n          id\n          status\n        }\n        userErrors {\n          field\n          message\n        }\n      }\n    }\n  {% endaction %}\n\n{% elsif event.topic == \"mechanic/shopify/bulk_operation\" %}\n  {% if event.preview %}\n    {% capture jsonl_string %}\n      {\"id\":\"gid:\\/\\/shopify\\/Product\\/1234567890\",\"__typename\":\"Product\",\"descriptionHtml\":\"Preview product\",\"handle\":\"preview-product\",\"isGiftCard\":false,\"onlineStoreUrl\":null,\"options\":[{\"id\":\"gid:\\/\\/shopify\\/ProductOption\\/1234567890\",\"__typename\":\"ProductOption\",\"name\":\"Title\",\"position\":1,\"values\":[\"Default Title\"]}],\"productType\":\"Indoor\",\"seo\":{\"description\":null,\"title\":null},\"tags\":[\"preview\"],\"title\":\"Preview product\",\"vendor\":\"ACME\"}\n      {\"id\":\"gid:\\/\\/shopify\\/ProductImage\\/37002970530040\",\"__typename\":\"Image\",\"altText\":\"Preview product\",\"url\":\"https:\\/\\/cdn.shopify.com\\/s\\/files\\/1\\/1337\\/5150\\/products\\/preview-productr.jpg?v=1234567890\",\"__parentId\":\"gid:\\/\\/shopify\\/Product\\/1234567890\"}\n      {\"id\":\"gid:\\/\\/shopify\\/ProductVariant\\/1234567890\",\"__typename\":\"ProductVariant\",\"barcode\":null,\"compareAtPrice\":\"30.00\",\"image\":{\"id\":\"gid:\\/\\/shopify\\/ProductImage\\/1234567890\",\"__typename\":\"Image\",\"altText\":\"Preview product\",\"url\":\"https:\\/\\/cdn.shopify.com\\/s\\/files\\/1\\/1337\\/5150\\/products\\/preview-product.jpg?v=1234567890\"},\"inventoryItem\":{\"id\":\"gid:\\/\\/shopify\\/InventoryItem\\/1234567890\",\"__typename\":\"InventoryItem\",\"measurement\":{\"weight\":{\"unit\":\"KILOGRAMS\",\"value\":0.0}},\"requiresShipping\":true,\"tracked\":true,\"unitCost\":null},\"inventoryPolicy\":\"DENY\",\"position\":1,\"price\":\"15.99\",\"product\":{\"handle\":\"preview-product\"},\"selectedOptions\":[{\"name\":\"Title\",\"value\":\"Default Title\"}],\"sku\":\"PREVIEW-123\",\"taxable\":true,\"taxCode\":null,\"title\":\"Default Title\",\"__parentId\":\"gid:\\/\\/shopify\\/Product\\/1234567890\"}\n    {% endcapture %}\n\n    {% assign bulkOperation = hash %}\n    {% assign bulkOperation[\"objects\"] = jsonl_string | parse_jsonl %}\n  {% endif %}\n\n  {% comment %}\n  -- csv required fields, in this order\n  {% endcomment %}\n\n  {% assign columns = \"Handle,Title,Body (HTML),Vendor,Type,Tags,Published,Option1 Name,Option1 Value,Option2 Name,Option2 Value,Option3 Name,Option3 Value,Variant SKU,Variant Grams,Variant Inventory Tracker,Variant Inventory Policy,Variant Fulfillment Service,Variant Price,Variant Compare At Price,Variant Requires Shipping,Variant Taxable,Variant Barcode,Image Src,Image Position,Image Alt Text,Gift Card,SEO Title,SEO Description,Google Shopping / Google Product Category,Google Shopping / Gender,Google Shopping / Age Group,Google Shopping / MPN,Google Shopping / AdWords Grouping,Google Shopping / AdWords Labels,Google Shopping / Condition,Google Shopping / Custom Product,Google Shopping / Custom Label 0,Google Shopping / Custom Label 1,Google Shopping / Custom Label 2,Google Shopping / Custom Label 3,Google Shopping / Custom Label 4,Variant Image,Variant Weight Unit,Variant Tax Code,Cost per item\" | split: \",\" %}\n\n  {% comment %}\n  -- setup 2d array required by csv filter, and add the columns as a header row\n  {% endcomment %}\n\n  {% assign rows = array %}\n  {% assign rows[0] = columns %}\n\n  {% comment %}\n  -- loop through the lines (JSONL) returned by the bulk operation\n  {% endcomment %}\n\n  {% assign products_by_id = hash %}\n\n  {% for object in bulkOperation.objects %}\n    {% case object.__typename %}\n      {% when \"Product\" %}\n        {% comment %}-- clone the object to allow modification --{% endcomment %}\n        {% assign product = object | json | parse_json %}\n        {% assign product[\"variants\"] = array %}\n        {% assign product[\"images\"] = array %}\n        {% assign products_by_id[product.id] = product %}\n\n      {% when \"ProductVariant\" %}\n        {% assign variant = object %}\n        {% assign product_id = variant.__parentId %}\n        {% assign product = products_by_id[product_id] %}\n        {% assign product[\"variants\"][product.variants.size] = variant %}\n\n      {% when \"Image\" %}\n        {% assign image = object %}\n        {% assign product_id = image.__parentId %}\n        {% assign product = products_by_id[product_id] %}\n        {% assign images = product.images %}\n        {% assign product[\"images\"][images.size] = image %}\n\n      {% else %}\n        {% log message: \"Unexpected object type in JSONL\", object_type: object.__typename, object: object %}\n    {% endcase %}\n  {% endfor %}\n\n  {% comment %}\n  -- loop through products_by_id to build csv rows\n  {% endcomment %}\n\n  {% for pair in products_by_id %}\n    {% assign product = pair[1] %}\n    {% assign product_rows = array %}\n\n    {% comment %}\n    -- loop through product variants to build csv rows, one row per variant\n    {% endcomment %}\n\n    {% for variant in product.variants %}\n      {% assign variant_row = hash %}\n      {% for column in columns %}\n        {% assign variant_row[column] = nil %}\n      {% endfor %}\n\n      {% comment %}\n      -- the first variant row contains the details for the product itself\n      {% endcomment %}\n\n      {% if variant.position == 1 %}\n        {% assign variant_row[\"Body (HTML)\"] = product.descriptionHtml %}\n        {% assign variant_row[\"Gift Card\"] = product.isGiftCard %}\n        {% assign variant_row[\"Handle\"] = product.handle %}\n        {% assign variant_row[\"SEO Description\"] = product.seo.description %}\n        {% assign variant_row[\"SEO Title\"] = product.seo.title %}\n        {% assign variant_row[\"Tags\"] = product.tags | join: \", \" %}\n        {% assign variant_row[\"Title\"] = product.title %}\n        {% assign variant_row[\"Type\"] = product.productType %}\n        {% assign variant_row[\"Vendor\"] = product.vendor %}\n\n        {% assign published = false %}\n        {% if product.onlineStoreUrl != blank %}\n          {% assign published = true %}\n        {% endif%}\n        {% assign variant_row[\"Published\"] = published %}\n\n        {% for option in product.options %}\n          {% assign option_name_key = \"Option\" | append: option.position | append: \" Name\" %}\n          {% assign option_value_key = \"Option\" | append: option.position | append: \" Value\" %}\n          {% assign variant_row[option_name_key] = option.name %}\n          {% assign variant_row[option_value_key] = option.values[0] %}\n        {% endfor %}\n      {% endif %}\n\n      {% assign variant_row[\"Cost per item\"] = variant.inventoryItem.unitCost.amount %}\n      {% assign variant_row[\"Handle\"] = variant.product.handle %}\n      {% assign variant_row[\"Variant Barcode\"] = variant.barcode %}\n      {% assign variant_row[\"Variant Compare At Price\"] = variant.compareAtPrice %}\n      {% assign variant_row[\"Variant Fulfillment Service\"] = \"manual\" %}\n      {% assign variant_row[\"Variant Inventory Policy\"] = variant.inventoryPolicy | downcase %}\n      {% assign variant_row[\"Variant Price\"] = variant.price %}\n      {% assign variant_row[\"Variant Requires Shipping\"] = variant.inventoryItem.requiresShipping %}\n      {% assign variant_row[\"Variant SKU\"] = variant.sku %}\n      {% assign variant_row[\"Variant Taxable\"] = variant.taxable %}\n      {% assign variant_row[\"Variant Tax Code\"] = variant.taxCode %}\n\n      {% for option in variant.selectedOptions %}\n        {% assign option_value_key = \"Option\" | append: forloop.index | append: \" Value\" %}\n        {% assign variant_row[option_value_key] = option.value %}\n      {% endfor %}\n\n      {% if variant.image %}\n        {% assign variant_row[\"Variant Image\"] = variant.image.url %}\n      {% endif  %}\n\n      {% if variant.inventoryItem.tracked %}\n        {% assign variant_row[\"Variant Inventory Tracker\"] = \"shopify\" %}\n      {% endif %}\n\n      {% case variant.inventoryItem.measurement.weight.unit %}\n        {% when \"GRAMS\" %}\n          {% assign variant_row[\"Variant Weight Unit\"] = \"g\" %}\n          {% assign variant_row[\"Variant Grams\"] = variant.inventoryItem.measurement.weight.value %}\n        {% when \"KILOGRAMS\" %}\n          {% assign variant_row[\"Variant Weight Unit\"] = \"kg\" %}\n          {% assign variant_row[\"Variant Grams\"] = variant.inventoryItem.measurement.weight.value | times: 1000 %}\n        {% when \"OUNCES\" %}\n          {% assign variant_row[\"Variant Weight Unit\"] = \"oz\" %}\n          {% assign variant_row[\"Variant Grams\"] = variant.inventoryItem.measurement.weight.value | times: 28.34952 %}\n        {% when \"POUNDS\" %}\n          {% assign variant_row[\"Variant Weight Unit\"] = \"lb\" %}\n          {% assign variant_row[\"Variant Grams\"] = variant.inventoryItem.measurement.weight.value | times: 453.59237 %}\n      {% endcase %}\n\n      {% assign product_rows[product_rows.size] = variant_row %}\n    {% endfor %}{% comment %}-- end variant loop --{% endcomment %}\n\n    {% comment %}\n    -- loop through product images to build csv rows\n    {% endcomment %}\n\n    {% for image in product.images %}\n      {% comment %}\n      -- images should be assigned sequentially to existing product rows, regardless of any\n      -- pairing with variant images, because... ¯\\_(ツ)_/¯\n      {% endcomment %}\n\n      {% if product_rows[forloop.index0] %}\n        {% assign image_row = product_rows[forloop.index0] %}\n        {% assign image_row[\"Image Src\"] = image.url %}\n        {% assign image_row[\"Image Position\"] = forloop.index %}\n        {% assign image_row[\"Image Alt Text\"] = image.altText %}\n        {% assign product_rows[forloop.index0] = image_row %}\n\n      {% else %}\n        {% assign image_row = hash %}\n        {% for column in columns %}\n          {% assign image_row[column] = nil %}\n        {% endfor %}\n\n        {% assign image_row[\"Handle\"] = product.handle %}\n        {% assign image_row[\"Image Src\"] = image.url %}\n        {% assign image_row[\"Image Position\"] = forloop.index %}\n        {% assign image_row[\"Image Alt Text\"] = image.altText %}\n\n        {% assign product_rows[product_rows.size] = image_row %}\n      {% endif %}\n    {% endfor %}{% comment %}-- end images loop --{% endcomment %}\n\n    {% for product_row in product_rows %}\n      {% comment %}\n      -- flatten the product rows hash into an array of values\n      {% endcomment %}\n\n      {% assign row = array %}\n      {% for pair in product_row %}\n        {% assign row[forloop.index0] = pair[1] %}\n      {% endfor %}\n\n      {% comment %}\n      -- add the row to 2d rows array\n      {% endcomment %}\n\n      {% assign rows[rows.size] = row %}\n    {% endfor %}\n  {% endfor %}{% comment %}-- end product loop --{% endcomment %}\n\n  {% comment %}\n  -- convert 2d array into csv format\n  {% endcomment %}\n\n  {% assign csv = rows | csv %}\n\n  {% if event.preview %}\n    {% log csv %}\n  {% endif %}\n\n  {% capture upload_path %}products__{{ \"now\" | date: \"%Y-%m-%d_T%H-%M-%S_%Z\", tz: \"UTC\" }}.csv{% endcapture %}\n\n  {% comment %}\n  -- directory paths may or may not have a leading slash (if they do, they're absolute;\n  -- if they don't, they're relative), but we always need a trailing slash\n  {% endcomment %}\n\n  {% if sftp_upload_directory != blank %}\n    {% assign directory = sftp_upload_directory %}\n\n    {% if directory.last != \"/\" %}\n      {% assign directory = directory | append: \"/\" %}\n    {% endif %}\n\n    {% assign upload_path = directory | append: upload_path %}\n  {% endif%}\n\n  {% action \"ftp\" %}\n    {\n      \"protocol\": \"sftp\",\n      \"host\": {{ sftp_host | json }},\n      \"port\": {{ sftp_port | json }},\n      \"user\": {{ sftp_user | json }},\n      \"password\": {{ sftp_password | json }},\n      \"uploads\": {\n        {{ upload_path | json }}: {{ csv | json }}\n      }\n    }\n  {% endaction %}\n{% endif %}\n",
  "subscriptions": [
    "mechanic/user/trigger",
    "mechanic/shopify/bulk_operation"
  ],
  "subscriptions_template": "mechanic/user/trigger\n{% if options.run_every_x_hours__number == 24 %}\n  mechanic/scheduler/daily\n{% elsif options.run_every_x_hours__number %}\n  mechanic/scheduler/hourly\n{% endif %}\nmechanic/shopify/bulk_operation",
  "tags": [
    "Backups",
    "CSV",
    "Export",
    "FTP",
    "Products"
  ]
}
