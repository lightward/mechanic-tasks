{
  "docs": "Use this task to tag orders, as they are created, if every single line item is related to a variant that's in stock.\n\nEnable \"Ignore line items not fulfilled manually\" to skip line items that you do not fulfill yourself from within Shopify. (This means that orders that consist _entirely_ of these line items will never be tagged by this task.)\n\nCheck either of the scheduled run options to have the task scan all unfulfilled, untagged orders on each run to see if they qualify to be tagged.",
  "halt_action_run_sequence_on_error": false,
  "name": "Auto-tag orders that are ready to ship",
  "online_store_javascript": null,
  "options": {
    "ignore_line_items_not_fulfilled_manually__boolean": null,
    "order_tag_to_add__required": "ready-to-ship",
    "test_mode__boolean": null,
    "run_every_10_minutes__boolean": null,
    "run_hourly__boolean": null
  },
  "order_status_javascript": null,
  "perform_action_runs_in_sequence": false,
  "script": "{% assign orders = array %}\n\n{% if event.topic contains \"shopify/orders/\" %}\n  {% capture query %}\n    query {\n      order(id: {{ order.admin_graphql_api_id | json }}) {\n        id\n        name\n        tags\n        lineItems(first: 20) {\n          nodes {\n            variant {\n              id\n              displayName\n              inventoryQuantity\n              inventoryItem {\n                id\n              }\n            }\n          }\n        }\n      }\n    }\n  {% endcapture %}\n\n  {% assign result = query | shopify %}\n\n  {% unless result.data.order.tags contains options.order_tag_to_add__required %}\n    {% assign orders[0] = result.data.order %}\n  {% endunless %}\n\n{% elsif event.topic == \"mechanic/user/trigger\" or event.topic contains \"mechanic/scheduler/\" %}\n  {% assign cursor = nil %}\n\n  {% for n in (0..200) %}\n    {% capture query %}\n      query {\n        orders(\n          first: 10\n          after: {{ cursor | json }}\n          query: {{ options.order_tag_to_add__required | json | prepend: \"fulfillment_status:unshipped tag_not:\" | json }}\n        ) {\n          pageInfo {\n            hasNextPage\n            endCursor\n          }\n          nodes {\n            id\n            name\n            lineItems(first: 20) {\n              nodes {\n                variant {\n                  id\n                  displayName\n                  inventoryQuantity\n                  inventoryItem {\n                    id\n                  }\n                }\n              }\n            }\n          }\n        }\n      }\n    {% endcapture %}\n\n    {% assign result = query | shopify %}\n\n    {% assign orders = result.data.orders.nodes | default: array | concat: orders %}\n\n    {% if result.data.orders.pageInfo.hasNextPage %}\n      {% assign cursor = result.data.orders.pageInfo.endCursor %}\n    {% else %}\n      {% break %}\n    {% endif %}\n  {% endfor %}\n{% endif %}\n\n{% if event.preview %}\n  {% capture orders_json %}\n    [\n      {\n        \"id\": \"gid://shopify/Order/1234567890\",\n        \"name\": \"#PREVIEW\",\n        \"lineItems\": {\n          \"nodes\": [\n            {\n              \"variant\": {\n                \"id\": \"gid://shopify/ProductVariant/1234567890\",\n                \"displayName\": \"ACME Widget - Alpha\",\n                \"inventoryQuantity\": 2,\n                \"inventoryItem\": {\n                  \"id\": \"gid://shopify/inventoryItem/1234567890\"\n                }\n              }\n            }\n          ]\n        }\n      }\n    ]\n  {% endcapture %}\n\n  {% assign orders = orders_json | parse_json %}\n{% endif %}\n\n{% for order in orders %}\n  {% assign order_qualifies = nil %}\n\n  {% for line_item in order.lineItems.nodes %}\n    {% if line_item.variant == blank %}\n      {% continue %}\n    {% endif %}\n\n    {% if options.ignore_line_items_not_fulfilled_manually__boolean %}\n      {% capture query %}\n        query {\n          inventoryItem(id: {{ line_item.variant.inventoryItem.id | json }}) {\n            inventoryLevels(first: 100) {\n              nodes {\n                location {\n                  fulfillmentService {\n                    handle\n                    serviceName\n                  }\n                }\n              }\n            }\n          }\n        }\n      {% endcapture %}\n\n      {% assign result = query | shopify %}\n\n      {% comment %}\n        Note: no preview stub data needed here, as null values for the fulfillment services are literally the happy path :)\n      {% endcomment %}\n\n      {% assign fulfillment_services\n        = result.data.inventoryItem.inventoryLevels.nodes\n        | map: \"location\"\n        | map: \"fulfillmentService\"\n        | compact\n      %}\n\n      {% if fulfillment_services != blank %}\n        {% log\n          message: \"This inventory item for this line item variant is configured to use at least one 3rd party fulfillment service'; skipping.\",\n          order_name: order.name,\n          line_item: line_item,\n          fulfillment_services: fulfillment_services\n        %}\n        {% continue %}\n      {% endif  %}\n    {% endif %}\n\n    {% if order_qualifies == nil and line_item.variant.inventoryQuantity >= 0 %}\n      {% assign order_qualifies = true %}\n\n    {% elsif line_item.variant.inventoryQuantity < 0 %}\n      {% assign order_qualifies = false %}\n      {% break %}\n    {% endif %}\n  {% endfor %}\n\n  {% if order_qualifies %}\n    {% if options.test_mode__boolean %}\n      {% log order_id_to_tag: order.id, order_name_to_tag: order.name %}\n\n    {% else %}\n      {% action \"shopify\" %}\n        mutation {\n          tagsAdd(\n            id: {{ order.id | json }}\n            tags: {{ options.order_tag_to_add__required | json }}\n          ) {\n            node {\n              ... on Order {\n                id\n                name\n              }\n            }\n            userErrors {\n              field\n              message\n            }\n          }\n        }\n      {% endaction %}\n    {% endif %}\n  {% endif %}\n{% endfor %}\n",
  "subscriptions": [
    "shopify/orders/create",
    "mechanic/user/trigger"
  ],
  "subscriptions_template": "shopify/orders/create\nmechanic/user/trigger\n\n{% if options.run_every_10_minutes__boolean %}\n  mechanic/scheduler/10min\n{% elsif options.run_hourly__boolean %}\n  mechanic/scheduler/hourly\n{% endif %}",
  "tags": [
    "Auto-Tag",
    "Orders",
    "Shipping"
  ]
}
