{
  "name": "Auto-tag orders that are ready to ship",
  "options": {
    "ignore_line_items_not_fulfilled_manually__boolean": null,
    "order_tag_to_add__required": "ready-to-ship",
    "scan_unfulfilled_orders_when_inventory_is_updated__boolean": null,
    "test_mode__boolean": null,
    "run_every_10_minutes__boolean": null,
    "run_hourly__boolean": null
  },
  "subscriptions": [
    "shopify/orders/create",
    "mechanic/user/trigger"
  ],
  "subscriptions_template": "shopify/orders/create\nmechanic/user/trigger\n\n{% if options.scan_unfulfilled_orders_when_inventory_is_updated__boolean %}\n  shopify/inventory_levels/update\n{% endif %}\n\n{% if options.run_every_10_minutes__boolean %}\n  mechanic/scheduler/10min\n{% elsif options.run_hourly__boolean %}\n  mechanic/scheduler/hourly\n{% endif %}",
  "script": "{% assign order_nodes = array %}\n\n{% if event.topic contains \"shopify/orders/\" %}\n  {% capture query %}\n    query {\n      order(id: {{ order.admin_graphql_api_id | json }}) {\n        id\n        name\n        tags\n        lineItems(first: 15) {\n          pageInfo {\n            hasNextPage\n          }\n          edges {\n            cursor\n            node {\n              {% if options.ignore_line_items_not_fulfilled_manually__boolean %}\n                fulfillmentService {\n                  id\n                }\n              {% endif %}\n              variant {\n                inventoryQuantity\n              }\n            }\n          }\n        }\n      }\n    }\n  {% endcapture %}\n\n  {% assign result = query | shopify %}\n\n  {% if event.preview %}\n    {% capture result_json %}\n      {\n        \"data\": {\n          \"order\": {\n            \"id\": \"gid://shopify/Order/1234567890\",\n            \"tags\": [],\n            \"lineItems\": {\n              \"pageInfo\": {\n                \"hasNextPage\": false\n              },\n              \"edges\": [\n                {\n                  \"cursor\": \"eyJsYXN0X2lkIjo0MDc4NTI5NjQyNTMxLCJsYXN0X3ZhbHVlIjo0MDc4NTI5NjQyNTMxfQ==\",\n                  \"node\": {\n                    \"fulfillmentService\": {\n                      \"id\": \"gid://shopify/FulfillmentService/manual\"\n                    },\n                    \"variant\": {\n                      \"inventoryQuantity\": 2\n                    }\n                  }\n                }\n              ]\n            }\n          }\n        }\n      }\n    {% endcapture %}\n\n    {% assign result = result_json | parse_json %}\n  {% endif %}\n\n  {% unless result.data.order.tags contains options.order_tag_to_add__required %}\n    {% assign order_nodes[0] = result.data.order %}\n  {% endunless %}\n{% else %}\n  {% assign event_qualifies_for_bulk_scan = false %}\n  {% if event.topic == \"mechanic/user/trigger\" or event.topic contains \"mechanic/scheduler/\" %}\n    {% assign event_qualifies_for_bulk_scan = true %}\n  {% elsif event.topic == \"shopify/inventory_levels/update\" and options.scan_unfulfilled_orders_when_inventory_is_updated__boolean%}\n    {% assign event_qualifies_for_bulk_scan = true %}\n  {% endif %}\n\n  {% if event_qualifies_for_bulk_scan %}\n    {% assign cursor = nil %}\n    {% for n in (0..100) %}\n      {% capture query %}\n        query {\n          orders(\n            first: 20\n            after: {{ cursor | json }}\n            query: {{ options.order_tag_to_add__required | json | prepend: \"fulfillment_status:unshipped AND -tag:\" | json }}\n\n            {% comment %}\n              This is important! If we sort the other direction (as is the default), and the Mechanic account\n              has read_all_orders disabled, we run the risk of seeing a true pageInfo.hasNextPage, but an empty\n              set of edges, preventing us from being able to continue paging.\n            {% endcomment %}\n            sortKey: CREATED_AT\n            reverse: true\n          ) {\n            pageInfo {\n              hasNextPage\n            }\n            edges {\n              cursor\n              node {\n                id\n                name\n                lineItems(\n                  first: 5\n                ) {\n                  pageInfo {\n                    hasNextPage\n                  }\n                  edges {\n                    cursor\n                    node {\n                    {% if options.ignore_line_items_not_fulfilled_manually__boolean %}\n                      fulfillmentService {\n                        id\n                      }\n                    {% endif %}\n                      variant {\n                        inventoryQuantity\n                      }\n                    }\n                  }\n                }\n              }\n            }\n          }\n        }\n      {% endcapture %}\n\n      {% assign result = query | shopify %}\n\n      {% if event.preview %}\n        {% capture result_json %}\n          {\n            \"data\": {\n              \"orders\": {\n                \"edges\": [\n                  {\n                    \"cursor\": \"eyJsYXN0X2lkIjoxODM1MTU0NDA3NDU5LCJsYXN0X3ZhbHVlIjoxNTcyNTU3MzQ1MDAwfQ==\",\n                    \"node\": {\n                      \"id\": \"gid://shopify/Order/1835138777123\",\n                      \"lineItems\": {\n                        \"pageInfo\": {\n                          \"hasNextPage\": false\n                        },\n                        \"edges\": [\n                          {\n                            \"cursor\": \"eyJsYXN0X2lkIjo0MDc4NTI5NjQyNTMxLCJsYXN0X3ZhbHVlIjo0MDc4NTI5NjQyNTMxfQ==\",\n                            \"node\": {\n                              \"fulfillmentService\": {\n                                \"id\": \"gid://shopify/FulfillmentService/manual\"\n                              },\n                              \"variant\": {\n                                \"inventoryQuantity\": 1\n                              }\n                            }\n                          }\n                        ]\n                      }\n                    }\n                  }\n\n                  {% comment %}\n                  // Commenting this out to keep the task preview clean. Bring\n                  // this back if you want to test multi-order pages.\n                  ,\n                  {\n                    \"cursor\": \"eyJsYXN0X2lkIjo0MDc4NTU0OTA2NjU5LCJsYXN0X3ZhbHVlIjo0MDc4NTU0OTA2NjU5fQ==\",\n                    \"node\": {\n                      \"id\": \"gid://shopify/Order/1835154407459\",\n                      \"lineItems\": {\n                        \"pageInfo\": {\n                          \"hasNextPage\": false\n                        },\n                        \"edges\": [\n                          {\n                            \"cursor\": \"eyJsYXN0X2lkIjo0MDc4NTU0OTA2NjU5LCJsYXN0X3ZhbHVlIjo0MDc4NTU0OTA2NjU5fQ==\",\n                            \"node\": {\n                              \"fulfillmentService\": {\n                                \"id\": \"gid://shopify/FulfillmentService/manual\"\n                              },\n                              \"variant\": {\n                                \"inventoryQuantity\": 1\n                              }\n                            }\n                          }\n                        ]\n                      }\n                    }\n                  }\n                  {% endcomment %}\n                ]\n              }\n            }\n          }\n        {% endcapture %}\n\n        {% assign result = result_json | parse_json %}\n      {% endif %}\n\n      {% assign order_nodes = result.data.orders.edges | map: \"node\" | concat: order_nodes %}\n\n      {% if result.data.orders.pageInfo.hasNextPage %}\n        {% assign cursor = result.data.orders.edges.last.cursor %}\n        {% if cursor == nil %}\n          {% log \"Encountered pageInfo.hasNextPage = true and cursor = nil in result.data.orders.edges.last.cursor; stopping the loop.\" %}\n          {% break %}\n        {% endif %}\n      {% else %}\n        {% break %}\n      {% endif %}\n    {% endfor %}\n  {% endif %}\n{% endif %}\n\n{% for order_node in order_nodes %}\n  {% assign order_node_index = forloop.index0 %}\n  {% if order_node.lineItems.pageInfo.hasNextPage %}\n    {% assign cursor = order_node.lineItems.edges.last.cursor %}\n    {% for n in (0..100) %}\n      {% capture query %}\n        query {\n          order(id: {{ order_node.id | json }}) {\n            id\n            lineItems(\n              first: 15\n              after: {{ cursor | json }}\n            ) {\n              pageInfo {\n                hasNextPage\n              }\n              edges {\n                cursor\n                node {\n                  {% if options.ignore_line_items_not_fulfilled_manually__boolean %}\n                    fulfillmentService {\n                      id\n                    }\n                  {% endif %}\n                  variant {\n                    inventoryQuantity\n                  }\n                }\n              }\n            }\n          }\n        }\n      {% endcapture %}\n\n      {% assign result = query | shopify %}\n\n      {% assign order_nodes[order_node_index][\"lineItems\"][\"edges\"] = order_nodes[order_node_index][\"lineItems\"][\"edges\"] | concat: result.data.order.lineItems.edges %}\n\n      {% if result.data.order.lineItems.pageInfo.hasNextPage %}\n        {% assign cursor = result.data.order.lineItems.edges.last.cursor %}\n        {% if cursor == nil %}\n          {% log \"Encountered pageInfo.hasNextPage = true and cursor = nil in result.data.order.lineItems.edges.last.cursor; stopping the loop.\" %}\n          {% break %}\n        {% endif %}\n      {% else %}\n        {% break %}\n      {% endif %}\n    {% endfor %}\n  {% endif %}\n\n  {% assign order_qualifies = nil %}\n\n  {% for lineItem_edge in order_node.lineItems.edges %}\n    {% if options.ignore_line_items_not_fulfilled_manually__boolean %}\n      {% if lineItem_edge.node.fulfillmentService.id != \"gid://shopify/FulfillmentService/manual\" %}\n        {% continue %}\n      {% endif  %}\n    {% endif %}\n\n    {% if order_qualifies == nil and lineItem_edge.node.variant.inventoryQuantity >= 0 %}\n      {% assign order_qualifies = true %}\n    {% elsif lineItem_edge.node.variant.inventoryQuantity < 0 %}\n      {% assign order_qualifies = false %}\n      {% break %}\n    {% endif %}\n  {% endfor %}\n\n  {% if order_qualifies %}\n    {% if options.test_mode__boolean %}\n      {% action \"echo\", order_id_to_tag: order_node.id, order_name_to_tag: order_node.name %}\n    {% else %}\n      {% action \"shopify\" %}\n        mutation {\n          tagsAdd(\n            id: {{ order_node.id | json }}\n            tags: {{ options.order_tag_to_add__required | json }}\n          ) {\n            userErrors {\n              field\n              message\n            }\n          }\n        }\n      {% endaction %}\n    {% endif %}\n  {% endif %}\n{% endfor %}",
  "docs": "Use this task to tag orders, as they are created, if every single line item is related to a variant that's in stock. Optionally, choose to tag qualifying unfulfilled orders whenever an inventory level is updated.\n\nThis task tags orders, as they are created, if every single line item is related to a variant that has a total inventory level of 0 or more.\r\n\r\nEnable \"Ignore line items not fulfilled manually\" to skip line items that you do not fulfill yourself from within Shopify. (This means that orders that consist _entirely_ of these line items will never be tagged by this task.)\r\n\r\nEnable \"Scan unfulfilled orders when inventory is updated\" to tag qualifying orders whenever an inventory level is updated. Use caution with this option: if your inventory updates are high-frequency, this may not be a good idea. :) Use \"Run hourly\" instead.",
  "halt_action_run_sequence_on_error": false,
  "online_store_javascript": null,
  "order_status_javascript": null,
  "perform_action_runs_in_sequence": false,
  "tags": [
    "Auto-Tag",
    "Orders",
    "Shipping"
  ]
}
