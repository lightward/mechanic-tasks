{
  "docs": "This task runs across all active products on your store and syncs a list type product reference metafield to contain all products with a matching common single metafield value (the 'group by' meatfield).\n\nOptionally you can check the 'Remove out of stock products' to have the task remove out of stock products from the product list field on all shared products. * *Note this option is not compatible with products that do not have tracked inventory.*\n\nExample use cases for this task include showing color variations of a product or showing a related products / shop the look section on a product page.\n\nAs a working example if you have the following products on your store:\n- Cool Black T-Shirt\n\n- Cool Gray T-Shirt\n\n- Cool White T-Shirt\n\nAnd then you set the 'group by' metafield value on all three to 'Cool T-Shirt', after this task runs on 'Cool Black T-Shirt' it will have the Gray and White products in the product list metafield and so on.  \nIf you have the 'Include current product' option checked the Black T-Shirt itself will also be included (useful if you want the product list field to stay the same across products when simulating variant options).",
  "halt_action_run_sequence_on_error": false,
  "name": "Sync a Product List Metafield Of Products That Share Another Common Metafield Value",
  "online_store_javascript": null,
  "options": {
    "group_by_metafield_namespace__required": "custom",
    "group_by_metafield_key__required": "product_group",
    "product_list_metafield_namespace__required": "custom",
    "product_list_metafield_key__required": "product_list",
    "remove_out_of_stock_products__boolean": false,
    "include_current_product__boolean": true
  },
  "perform_action_runs_in_sequence": false,
  "preview_event_definitions": [],
  "script": "{% comment %}Set up the task options{% endcomment %}\n{% assign group_by_namespace = options.group_by_metafield_namespace__required %}\n{% assign group_by_key = options.group_by_metafield_key__required %}\n{% assign product_list_namespace = options.product_list_metafield_namespace__required %}\n{% assign product_list_key = options.product_list_metafield_key__required %}\n{% assign remove_out_of_stock = options.remove_out_of_stock_products__boolean %}\n{% assign include_current_product = options.include_current_product__boolean %}\n\n{% comment %}Run the bulk GraphQL query{% endcomment %}\n{% if event.topic == \"mechanic/user/trigger\" or event.topic == \"mechanic/scheduler/daily\" %}\n  {% capture bulk_operation_query %}\n    query {\n      products(query: \"status:ACTIVE{% if remove_out_of_stock %} inventory_total:>0{% endif %}\") {\n        edges {\n          node {\n            __typename\n            id\n            title\n            group: metafield(\n                namespace: {{ group_by_namespace | json }}\n                key: {{ group_by_key | json }}\n            ) {\n                value\n            }\n            product_list: metafield(\n                namespace: {{ product_list_namespace | json }}\n                key: {{ product_list_key | json }}\n            ) {\n                value\n            }\n          }\n        }\n      }\n    }\n  {% endcapture %}\n  {% action \"shopify\" %}\n    mutation {\n      bulkOperationRunQuery(\n        query: {{ bulk_operation_query | json }}\n      ) {\n        bulkOperation {\n          id\n          status\n        }\n        userErrors {\n          field\n          message\n        }\n      }\n    }\n  {% endaction %}\n{% elsif event.topic == \"mechanic/shopify/bulk_operation\" %}\n  {% comment %}Preview data for debugging{% endcomment %}\n  {% if event.preview %}\n    {% capture jsonl_string %}\n      {\"__typename\":\"Product\",\"id\":\"gid:\\/\\/shopify\\/Product\\/7819883282585\",\"title\":\"Sample Product 1\",\"group\":{\"id\":\"gid:\\/\\/shopify\\/Metafield\\/39837328081049\",\"value\":\"Converse\"},\"product_list\":null}\n{\"__typename\":\"Product\",\"id\":\"gid:\\/\\/shopify\\/Product\\/7819883380889\",\"title\":\"Sample Product 2\",\"group\":{\"value\":\"Converse\"},\"product_list\":{\"value\":\"[\\\"gid:\\/\\/shopify\\/Product\\/7819883282585\\\",\\\"gid:\\/\\/shopify\\/Product\\/7819883380889\\\",\\\"gid:\\/\\/shopify\\/Product\\/7819883413657\\\"]\"}}\n{\"__typename\":\"Product\",\"id\":\"gid:\\/\\/shopify\\/Product\\/7819883413657\",\"title\":\"Sample Product 3\",\"group\":{\"value\":\"Converse\"},\"product_list\":null}\n    {% endcapture %}\n    {% assign bulkOperation = hash %}\n    {% assign bulkOperation[\"objects\"] = jsonl_string | parse_jsonl %}\n  {% endif %}\n\n  {% comment %}Build a hash (object) keyed by unique values from the group by field, each element is an array of product ids with a matching group by value{% endcomment %}\n  {% assign products_to_process = bulkOperation.objects %}\n  {% assign products_groups = hash %}\n  {% for product in products_to_process %}\n    {% if product.group.value %}\n      {% unless products_groups[product.group.value] %}\n        {% assign products_groups[product.group.value] = array %}\n      {% endunless %}\n      {% assign products_groups[product.group.value] = products_groups[product.group.value] | push: product.id %}\n    {% endif %}\n  {% endfor %}\n\n  {% comment %}\n    Procees all products\n  {% endcomment %}\n  {% for current_product in products_to_process %}\n    {% if current_product.group.value %}\n      {% assign product_list = products_groups[current_product.group.value] %}\n      \n      {% unless include_current_product %}\n        {% comment %}\n          The array we built will contain the current product too so unless a user selects the 'Include Current Product' option we rebuild it without the current product in (there's no easy function for removing an item from an array in liquid/Mechanic)\n        {% endcomment %}\n        {% assign product_list_less_current = array %}\n        {% for product_list_item in products_groups[current_product.group.value] %}\n          {% unless product_list_item == current_product.id %}\n            {% assign product_list_less_current = product_list_less_current | push: product_list_item %}\n          {% endunless %}\n        {% endfor %}\n        {% assign product_list = product_list_less_current %}\n      {% endunless %}\n\n      {% comment %}\n        Check if the product list metafield value is already correct and update it if not\n      {% endcomment %}\n      {% assign product_list_json = product_list | json  %}\n      {% if current_product.product_list.value != product_list_json %}\n        {% action \"shopify\" %}\n          mutation {\n            metafieldsSet(\n              metafields: [{\n                ownerId: {{ current_product.id | json }},\n                namespace: {{ product_list_namespace | json }},\n                key: {{ product_list_key | json }},\n                value: {{ product_list | json | json }},\n                type: \"list.product_reference\"\n              }]\n            ) {\n              metafields {\n                namespace\n                key\n                value\n              }\n              userErrors {\n                code\n                field\n                message\n              }\n            }\n          }\n        {% endaction %}\n        {% log message: \"Updated product:\", details: current_product.title %}\n      {% else %}\n        {% log message: \"Metafield values match, skipped updating product:\", details: current_product.title %}\n      {% endif %}\n    {% endif %}\n  {% endfor %}\n{% endif %}",
  "subscriptions": [
    "mechanic/scheduler/daily",
    "mechanic/user/trigger",
    "mechanic/shopify/bulk_operation"
  ],
  "subscriptions_template": "mechanic/scheduler/daily\nmechanic/user/trigger\nmechanic/shopify/bulk_operation",
  "tags": [
    "Bulk",
    "Metafields",
    "Products",
    "Sync"
  ]
}
