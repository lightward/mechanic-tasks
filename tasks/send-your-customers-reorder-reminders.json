{
  "docs": "Useful for customers who need recurring reminders to reorder. Optionally filtering by a customer tag, it monitors the most recent order for each customer, and sends them reminders every x days since that order.\n\nThis task runs daily, at midnight in your store's timezone. This task will send emails to the address on file for the customer, falling back to the email on file for the order if the customer has no email address.\n\nTo test this task, enable test mode, and save. You'll find a new \"Run task\" button, which will report the emails that would be sent on the current date.",
  "halt_action_run_sequence_on_error": false,
  "name": "Send your customers reorder reminders",
  "online_store_javascript": null,
  "options": {
    "only_include_customers_having_this_tag": null,
    "number_of_days_to_wait_between_emails__number_required": null,
    "email_subject__required": "It's time to reorder!",
    "email_body__multiline_required": "Hello,\n\nIt's been X days since your last order (ORDER_NUMBER). <a href=\"https://{{ shop.domain  }}/\">Return to our store</a>\n\nThanks,\n{{ shop.name }}",
    "test_mode__boolean": null
  },
  "order_status_javascript": null,
  "perform_action_runs_in_sequence": false,
  "script": "{% assign only_include_customers_having_this_tag = options.only_include_customers_having_this_tag %}\n{% assign interval_d = options.number_of_days_to_wait_between_emails__number_required %}\n{% assign email_subject = options.email_subject__required %}\n{% assign email_body = options.email_body__multiline_required %}\n{% assign test_mode = options.test_mode__boolean %}\n\n{%- capture cutoff_days -%}\n  -{{ interval_d }} days\n{%- endcapture -%}\n{% assign cutoff_date = \"now\" | date: \"%F\", advance: cutoff_days %}\n\n{% if event.topic contains \"mechanic/scheduler/\" or event.topic == \"mechanic/user/trigger\" %}\n  {%- capture search_query -%}\n    last_order_date <= {{ cutoff_date }}\n    {%- if only_include_customers_having_this_tag != blank %} AND customer_tags CONTAINS '{{ only_include_customers_having_this_tag }}'{%- endif -%}\n  {%- endcapture -%}\n\n  {% log customers_search_query: search_query %}\n\n  {% capture bulk_operation_query %}\n    query {\n      customerSegmentMembers(\n        query: {{ search_query | json }}\n      ) {\n        edges {\n          node {\n            __typename\n            id\n            defaultEmailAddress {\n              emailAddress\n            }\n            lastOrderId\n          }\n        }\n      }\n    }\n  {% endcapture %}\n\n  {% action \"shopify\" %}\n    mutation {\n      bulkOperationRunQuery(\n        query: {{ bulk_operation_query | json }}\n      ) {\n        bulkOperation {\n          id\n          status\n        }\n        userErrors {\n          field\n          message\n        }\n      }\n    }\n  {% endaction %}\n\n{% elsif event.topic == \"mechanic/shopify/bulk_operation\" %}\n  {% if event.preview %}\n    {% capture jsonl_string %}\n      {\"__typename\":\"CustomerSegmentMember\",\"id\":\"gid://shopify/CustomerSegmentMember/1234567890\",\"lastOrderId\":\"gid://shopify/Order/1234567890\"}\n    {% endcapture %}\n\n    {% assign bulkOperation = hash %}\n    {% assign bulkOperation[\"objects\"] = jsonl_string | parse_jsonl %}\n  {% endif %}\n\n  {% assign customers = bulkOperation.objects | where: \"__typename\", \"CustomerSegmentMember\" %}\n\n  {% for customer in customers %}\n    {% comment %}\n      -- get additional data from this customer's last order\n    {% endcomment %}\n\n    {% capture query %}\n      query {\n        order(id: {{ customer.lastOrderId | json }}) {\n          email\n          name\n          processedAt\n        }\n      }\n    {% endcapture %}\n\n    {% assign result = query | shopify %}\n\n    {% if event.preview %}\n      {% capture result_json %}\n        {\n          \"data\": {\n            \"order\": {\n              \"email\": \"preview@example.com\",\n              \"name\": \"%PREVIEW\",\n              \"processedAt\": {{ cutoff_date | json }}\n            }\n          }\n        }\n      {% endcapture %}\n\n      {% assign result = result_json | parse_json %}\n    {% endif %}\n\n    {% assign order = result.data.order %}\n    {% assign customer_email = customer.defaultEmailAddress.emailAddress | default: order.email %}\n\n    {% assign processed_at_s = order.processedAt | date: \"%s\" | times: 1 %}\n    {% assign age_d = \"now\" | date: \"%s\" | times: 1 | minus: processed_at_s | divided_by: 86400 | round %}\n    {% assign age_d_modulo = age_d | modulo: interval_d %}\n\n    {% if age_d == 0 %}\n      {% continue %}\n\n    {% elsif age_d_modulo != 0 %}\n      {% capture message -%}\n        Order {{ order.name }} ({{ customer_email }}) was placed on {{ processed_at_s | date: \"%F\" }}. Next email is due in {{ interval_d | minus: age_d_modulo }} day(s).\n      {%- endcapture %}\n\n      {% log message %}\n\n      {% continue %}\n\n    {% else %}\n      {% assign email_options = hash %}\n      {% assign email_options[\"to\"] = customer_email %}\n      {% assign email_options[\"subject\"] = email_subject | replace: \"ORDER_NUMBER\", order.name %}\n      {% assign email_options[\"body\"] = email_body | replace: \"ORDER_NUMBER\", order.name | strip | newline_to_br %}\n      {% assign email_options[\"reply_to\"] = shop.customer_email %}\n      {% assign email_options[\"from_display_name\"] = shop.name %}\n\n      {% if test_mode %}\n        {% log email_options %}\n      {% else %}\n        {% action \"email\" email_options %}\n      {% endif %}\n    {% endif %}\n  {% endfor %}\n{% endif %}\n",
  "subscriptions": [
    "mechanic/scheduler/daily",
    "mechanic/shopify/bulk_operation"
  ],
  "subscriptions_template": "{% if options.test_mode__boolean %}\n  mechanic/user/trigger\n{% endif %}\nmechanic/scheduler/daily\nmechanic/shopify/bulk_operation",
  "tags": [
    "Customers",
    "Email",
    "Loyalty",
    "Reminder"
  ]
}
