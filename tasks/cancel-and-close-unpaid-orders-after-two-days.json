{
  "name": "Cancel and close unpaid orders after x hours/days",
  "options": {
    "only_process_orders_having_this_tag": null,
    "ignore_orders_having_this_tag": null,
    "period_to_wait_before_checking_each_order__number_required": 1,
    "period_to_wait_is_in_hours__boolean": null,
    "period_to_wait_is_in_days__boolean": true,
    "tag_to_add_to_the_order": null,
    "void_payment_when_possible__boolean": null,
    "cancel_fulfillment_and_restock_to_default_location__boolean": null,
    "send_cancellation_email_to_customer__boolean": false,
    "test_mode__boolean": true
  },
  "subscriptions": [
    "mechanic/scheduler/daily",
    "mechanic/user/trigger"
  ],
  "subscriptions_template": "{% if options.period_to_wait_is_in_hours__boolean %}\n  mechanic/scheduler/hourly\n{% elsif options.period_to_wait_is_in_days__boolean %}\n  mechanic/scheduler/daily\n{% endif %}\n\nmechanic/user/trigger",
  "script": "{% comment %}\n  Preferred option order\n\n  {{ options.only_process_orders_having_this_tag }}\n  {{ options.ignore_orders_having_this_tag }}\n  {{ options.period_to_wait_before_checking_each_order__number_required }}\n  {{ options.period_to_wait_is_in_hours__boolean }}\n  {{ options.period_to_wait_is_in_days__boolean }}\n  {{ options.tag_to_add_to_the_order }}\n  {{ options.void_payment_when_possible__boolean }}\n  {{ options.restock_line_items__boolean }}\n  {{ options.send_cancellation_email_to_customer__boolean }}\n  {{ options.test_mode__boolean }}\n{% endcomment %}\n\n{% if options.period_to_wait_before_checking_each_order__number_required <= 0 %}\n  {% error \"Period must be positive! :)\" %}\n{% elsif options.period_to_wait_is_in_hours__boolean == false and options.period_to_wait_is_in_days__boolean == false %}\n  {% error \"Choose either 'Period to wait is in hours' or 'Period to wait is in days'.\" %}\n{% elsif options.period_to_wait_is_in_hours__boolean and options.period_to_wait_is_in_days__boolean %}\n  {% error \"Choose exactly one of 'Period to wait is in hours' or 'Period to wait is in days'. :)\" %}\n{% elsif options.period_to_wait_is_in_hours__boolean %}\n  {% assign period_unit = 60 | times: 60 %}\n{% elsif options.period_to_wait_is_in_days__boolean %}\n  {% assign period_unit = 60 | times: 60 | times: 24 %}\n{% endif %}\n\n{% assign period_s = period_unit | times: options.period_to_wait_before_checking_each_order__number_required %}\n{% assign maximum_date_s = \"now\" | date: \"%s\" | minus: period_s %}\n\n{% if options.test_mode__boolean %}\n  {% assign test_mode_summaries = array %}\n{% endif %}\n\n{% capture orders_query %}\n  financial_status:pending\n  {% if options.only_process_orders_having_this_tag != blank %}\n    AND tag:{{ options.only_process_orders_having_this_tag | strip | json }}\n  {% endif %}\n  {% if options.ignore_orders_having_this_tag != blank %}\n    AND -tag:{{ options.ignore_orders_having_this_tag | strip | json }}\n  {% endif %}\n{% endcapture %}\n\n{% assign orders_query = orders_query | strip_newlines %}\n\n{% log orders_query: orders_query %}\n\n{% assign cursor = nil %}\n\n{% for n in (0..100) %}\n  {% capture query %}\n    query {\n      orders(\n        first: 50\n        after: {{ cursor | json }}\n        query: {{ orders_query | json }}\n      ) {\n        pageInfo {\n          hasNextPage\n        }\n        edges {\n          cursor\n          node {\n            id\n            legacyResourceId\n            name\n            createdAt\n            processedAt\n            cancelledAt\n            closedAt\n            tags\n            suggestedRefund(suggestFullRefund: true) {\n              refundLineItems {\n                lineItem {\n                  id\n                  fulfillableQuantity\n                  quantity\n                  restockable\n                }\n                location {\n                  id\n                }\n              }\n            }\n            transactions {\n              id\n              gateway\n            }\n          }\n        }\n      }\n    }\n  {% endcapture %}\n\n  {% assign result = query | shopify %}\n\n  {% if event.preview %}\n    {% capture result_json %}\n      {\n        \"data\": {\n          \"orders\": {\n            \"edges\": [\n              {\n                \"node\": {\n                  \"id\": \"gid://shopify/Order/1234567890\",\n                  \"legacyResourceId\": \"1234567890\",\n                  \"name\": \"#1234\",\n                  \"processedAt\": \"1990-01-01\",\n                  \"cancelledAt\": null,\n                  \"closedAt\": null,\n                  \"tags\": [\n                    {{ options.only_process_orders_having_this_tag | strip | json }}\n                  ],\n                  \"suggestedRefund\": {\n                    \"refundLineItems\": [\n                      {\n                        \"lineItem\": {\n                          \"id\": \"gid://shopify/LineItem/1234567890\",\n                          \"fulfillableQuantity\": 5,\n                          \"restockable\": true\n                        },\n                        \"location\": {\n                          \"id\": \"gid://shopify/Location/1234567890\"\n                        }\n                      }\n                    ]\n                  },\n                  \"transactions\": [\n                    {\n                      \"id\": \"gid://shopify/OrderTransaction/1234567890\",\n                      \"gateway\": \"bogus\"\n                    }\n                  ]\n                }\n              }\n            ]\n          }\n        }\n      }\n    {% endcapture %}\n\n    {% assign result = result_json | parse_json %}\n  {% endif %}\n\n  {% for edge in result.data.orders.edges %}\n    {% assign order = edge.node %}\n\n    {% assign processed_at_s = order.processedAt | default: order.createdAt | date: \"%s\" | times: 1 %}\n\n    {% if processed_at_s > maximum_date_s %}\n      {% continue %}\n    {% endif %}\n\n    {% assign summary = hash %}\n    {% assign summary[\"order_name\"] = order.name %}\n    {% assign summary[\"order_id\"] = order.id %}\n    {% assign summary[\"order_processed_at\"] = processed_at_s | date: \"%FT%T%:z\" %}\n    {% assign summary[\"threshold_processed_at\"] = maximum_date_s | date: \"%FT%T%:z\" %}\n\n    {% if order.cancelledAt == blank %}\n      {% assign summary[\"qualifies_for_cancellation\"] = true %}\n    {% else %}\n      {% assign summary[\"qualifies_for_cancellation\"] = false %}\n    {% endif %}\n\n    {% if order.closedAt == blank %}\n      {% assign summary[\"qualifies_for_closing\"] = true %}\n    {% else %}\n      {% assign summary[\"qualifies_for_closing\"] = false %}\n    {% endif %}\n\n    {% assign summary[\"qualifies_for_tagging\"] = false %}\n    {% if options.tag_to_add_to_the_order != blank %}\n      {% assign order_tags = order.tags | join: \",\" | downcase | split: \",\" %}\n      {% assign order_tag_to_match = options.tag_to_add_to_the_order | downcase | strip %}\n      {% unless order_tags contains order_tag_to_match %}\n        {% assign summary[\"qualifies_for_tagging\"] = true %}\n      {% endunless %}\n    {% endif %}\n\n    {% unless summary.qualifies_for_cancellation or summary.qualifies_for_closing or summary.qualifies_for_tagging %}\n      {% continue %}\n    {% endunless %}\n\n    {% if options.test_mode__boolean %}\n      {% assign test_mode_summaries[test_mode_summaries.size] = summary %}\n      {% continue %}\n    {% endif %}\n\n    {% log summary %}\n\n    {% if summary.qualifies_for_cancellation %}\n      {% action \"shopify\" %}\n        mutation {\n          refundCreate(input: {\n            orderId: {{ order.id | json }}\n            {% assign transaction = order.transactions.first %}\n            {% if options.void_payment_when_possible__boolean and transaction != nil %}\n              transactions: [\n                {\n                  amount: \"0.0\"\n                  gateway: {{ transaction.gateway | json }}\n                  kind: VOID\n                  orderId: {{ order.id | json }}\n                  parentId: {{ transaction.id | json }}\n                }\n              ]\n            {% endif %}\n            refundLineItems: [\n              {% for refund_line_item in order.suggestedRefund.refundLineItems %}\n                {% assign line_item = refund_line_item.lineItem %}\n                {\n                  lineItemId: {{ line_item.id | json }}\n                  {% if options.restock_line_items__boolean and line_item.restockable %}\n                    locationId: {{ refund_line_item.location.id | json }}\n                    quantity: {{ line_item.fulfillableQuantity | default: line_item.quantity | json }}\n                    restockType: CANCEL\n                  {% else %}\n                    quantity: 0\n                    restockType: NO_RESTOCK\n                  {% endif %}\n                }\n                {% unless forloop.last %}\n                  ,\n                {% endunless %}\n              {% endfor %}\n            ]\n            notify: false\n            note: {{ task.name | json }}\n          }) {\n            userErrors {\n              field\n              message\n            }\n          }\n        }\n      {% endaction %}\n\n      {% action \"shopify\" %}\n        [\n          \"post\",\n          \"/admin/orders/{{ order.legacyResourceId }}/cancel.json\",\n          {\n            \"email\": {{ options.send_cancellation_email_to_customer__boolean | json }}\n          }\n        ]\n      {% endaction %}\n    {% endif %}\n\n    {% if summary.qualifies_for_closing or summary.qualifies_for_tagging %}\n      {% action \"shopify\" %}\n        mutation {\n          {% if summary.qualifies_for_closing %}\n            orderClose(\n              input: {\n                id: {{ order.id | json }}\n              }\n            ) {\n              order {\n                closed\n                closedAt\n              }\n              userErrors {\n                field\n                message\n              }\n            }\n          {% endif %}\n\n          {% if summary.qualifies_for_tagging %}\n            tagsAdd(\n              id: {{ order.id | json }}\n              tags: {{ options.tag_to_add_to_the_order | json }}\n            ) {\n              userErrors {\n                field\n                message\n              }\n            }\n          {% endif %}\n        }\n      {% endaction %}\n    {% endif %}\n  {% endfor %}\n\n  {% if result.data.orders.pageInfo.hasNextPage %}\n    {% assign cursor = result.data.orders.edges.last.cursor %}\n  {% else %}\n    {% break %}\n  {% endif %}\n{% endfor %}\n\n{% if options.test_mode__boolean %}\n  {% action \"echo\" orders_count: test_mode_summaries.size, order_summaries: test_mode_summaries %}\n{% endif %}",
  "docs": "Clear the clutter in your orders list, automatically! On a scheduled basis or on-demand, this task scans for orders that are more than x days or hours old, and cancels and closes/archives the order if its financial status is still marked \"pending\".\n\nThis task scans for orders that are more than X days or hours old that have a financial status of \"pending\", and ensures that they are all closed/archived and cancelled. Orders that are already closed will be cancelled, and orders that are already cancelled will be closed. Optionally, choose to add a tag to such orders, and Mechanic will ensure that all qualifying orders receive your chosen tag.\r\n\r\nRun first using test mode, to ensure expected results before running without it.\r\n\r\nIf configured with an interval in hours, this task will run hourly. If configured with an interval in days, the task will run every night at midnight, in your store's local timezone. Run this task manually to perform the scan on demand.\r\n\r\nTip: To easily see which orders this task has cancelled, fill in the \"Tag to add to the order\" option.",
  "halt_action_run_sequence_on_error": false,
  "online_store_javascript": null,
  "order_status_javascript": null,
  "perform_action_runs_in_sequence": true
}
