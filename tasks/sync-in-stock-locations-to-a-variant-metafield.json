{
  "docs": "This task will maintain a variant list metafield of in stock location names. Running on a schedule, it will check recently updated variants to see which are in stock at each location. Variants with positive \"available\" inventory at a location, or are configured for overselling, are considered to be in stock, as are variants that are sold from a location but not tracked.\n\nOptionally, you may choose to have this task only check specific locations using the \"Include location names\" option, or to ignore specific locations using the \"Exclude location names\" option. Exclusions will only apply if the inclusions field is empty.\n\nRun the task manually to scan all variants (up to 25K) in the shop for initial setup.\n\n**Important:** if you wish the configured variant metafield to be used as a search filter on your website using [Shopify Search & Discovery](https://help.shopify.com/en/manual/online-store/search-and-discovery), then you must set up a [custom metafield definition](https://help.shopify.com/en/manual/custom-data/metafields/metafield-definitions/creating-custom-metafield-definitions) for it *before* running this task. Otherwise, you will not be able to create the metafield definition with a \"list.single_line_text_field\" type.",
  "halt_action_run_sequence_on_error": false,
  "name": "Sync in stock locations to a variant metafield",
  "online_store_javascript": null,
  "options": {
    "variant_metafield__required": "custom.in_stock_locations",
    "include_location_names__array": null,
    "exclude_location_names__array": null,
    "run_every_10_minutes__boolean": false,
    "run_hourly__boolean": true,
    "run_daily__boolean": false
  },
  "perform_action_runs_in_sequence": false,
  "preview_event_definitions": [],
  "script": "{% assign variant_metafield = options.variant_metafield__required %}\n{% assign include_location_names = options.include_location_names__array %}\n{% assign exclude_location_names = options.exclude_location_names__array %}\n\n{% if event.topic == \"mechanic/user/trigger\" or event.topic contains \"mechanic/scheduler/\" %}\n  {% comment %}\n    -- if this is a scheduled event run, then create a search query filter in relation to the scheduler interval\n  {% endcomment %}\n\n  {% if event.topic contains \"mechanic/scheduler/\" %}\n    {% if event.topic == \"mechanic/scheduler/10min\" %}\n      {% assign lookback = event.data | date: \"%FT%TZ\", tz: \"UTC\", advance: \"-10 minutes\" %}\n\n    {% elsif event.topic == \"mechanic/scheduler/hourly\" %}\n      {% assign lookback = event.data | date: \"%FT%TZ\", tz: \"UTC\", advance: \"-1 hour\" %}\n\n    {% elsif event.topic == \"mechanic/scheduler/daily\" %}\n      {% assign lookback = event.data | date: \"%FT%TZ\", tz: \"UTC\", advance: \"-1 day\" %}\n    {% endif %}\n\n    {% if lookback %}\n      {% assign search_query = lookback | json | prepend: \"updated_at:>=\" %}\n    {% endif %}\n\n    {% unless event.preview %}\n      {% log search_query: search_query %}\n    {% endunless %}\n  {% endif %}\n\n  {% comment %}\n    -- get all or recently updated variants in the shop, depending upon event topic\n  {% endcomment %}\n\n  {% assign cursor = nil %}\n  {% assign variants = array %}\n\n  {% for n in (1..100) %}\n    {% capture query %}\n      query {\n        productVariants(\n          first: 250\n          after: {{ cursor | json }}\n          query: {{ search_query | json }}\n        ) {\n          pageInfo {\n            hasNextPage\n            endCursor\n          }\n          nodes {\n            id\n            displayName\n            inventoryPolicy\n            metafield(key: {{ variant_metafield | json }}) {\n              jsonValue\n            }\n            inventoryItem {\n              tracked\n              inventoryLevels(\n                first: 200\n              ) {\n                nodes {\n                  location {\n                    name\n                  }\n                  quantities(names: \"available\") {\n                    quantity\n                  }\n                }\n              }\n            }\n          }\n        }\n      }\n    {% endcapture %}\n\n    {% assign result = query | shopify %}\n\n    {% if event.preview %}\n      {% capture result_json %}\n        {\n          \"data\": {\n            \"productVariants\": {\n              \"nodes\": [\n                {\n                  \"id\": \"gid://shopify/ProductVariant/1234567890\",\n                  \"inventoryPolicy\": \"DENY\",\n                  \"metafield\": {\n                    \"jsonValue\": [\n                      \"Warehouse A\"\n                    ]\n                  },\n                  \"inventoryItem\": {\n                    \"tracked\": true,\n                    \"inventoryLevels\": {\n                      \"nodes\": [\n                        {\n                          \"location\": {\n                            \"name\": \"Warehouse A\"\n                          },\n                          \"quantities\": [\n                            {\n                              \"quantity\": 0\n                            }\n                          ]\n                        },\n                        {\n                          \"location\": {\n                            \"name\": \"Warehouse B\"\n                          },\n                          \"quantities\": [\n                            {\n                              \"quantity\": 1\n                            }\n                          ]\n                        },\n                        {\n                          \"location\": {\n                            \"name\": \"Warehouse C\"\n                          },\n                          \"quantities\": [\n                            {\n                              \"quantity\": 1\n                            }\n                          ]\n                        }\n                      ]\n                    }\n                  }\n                }\n              ]\n            }\n          }\n        }\n      {% endcapture %}\n\n      {% assign result = result_json | parse_json %}\n    {% endif %}\n\n    {% assign variants = variants | concat: result.data.productVariants.nodes %}\n\n    {% if result.data.productVariants.pageInfo.hasNextPage %}\n      {% assign cursor = result.data.productVariants.pageInfo.endCursor %}\n    {% else %}\n      {% break %}\n    {% endif %}\n  {% endfor %}\n\n  {% comment %}\n    -- check which locations are in stock for each variant (i.e. \"available\" > 0)\n    -- variants that are configured for overselling or are not tracked at a location are considered as in stock\n  {% endcomment %}\n\n  {% assign metafield_set_inputs = array %}\n  {% assign metafield_delete_inputs = array %}\n\n  {% for variant in variants %}\n    {% assign in_stock_location_names = array %}\n    {% assign current_metafield_value = variant.metafield.jsonValue %}\n\n    {% for inventory_level in variant.inventoryItem.inventoryLevels.nodes %}\n      {% assign location_name = inventory_level.location.name %}\n\n      {% if include_location_names != blank %}\n        {% unless include_location_names contains location_name %}\n          {% continue %}\n        {% endunless %}\n\n      {% elsif exclude_location_names != blank %}\n        {% if exclude_location_names contains location_name %}\n          {% continue %}\n        {% endif %}\n      {% endif %}\n\n      {% if variant.inventoryPolicy == \"CONTINUE\"\n        or variant.inventoryItem.tracked == false\n        or inventory_level.quantities.first.quantity > 0\n      %}\n        {% assign in_stock_location_names = in_stock_location_names | push: inventory_level.location.name %}\n      {% endif %}\n    {% endfor %}\n\n    {% comment %}\n      -- sort the in stock location names for comparison against current metafield value\n    {% endcomment %}\n\n    {% assign in_stock_location_names = in_stock_location_names | sort_naturally %}\n\n    {% if in_stock_location_names == blank %}\n      {% if variant.metafield != blank %}\n        {% log\n          out_of_stock_variant_to_clear: variant,\n          in_stock_location_names: in_stock_location_names\n        %}\n\n        {% assign metafield_delete_input = hash %}\n        {% assign metafield_delete_input[\"ownerId\"] = variant.id %}\n        {% assign metafield_delete_input[\"namespace\"] = variant_metafield | split: \".\" | first %}\n        {% assign metafield_delete_input[\"key\"] = variant_metafield | split: \".\" | last %}\n        {% assign metafield_delete_inputs = metafield_delete_inputs | push: metafield_delete_input %}\n      {% endif %}\n\n    {% elsif in_stock_location_names != variant.metafield.jsonValue %}\n      {% log\n        in_stock_variant_to_update: variant,\n        in_stock_location_names: in_stock_location_names\n      %}\n\n      {% assign metafield_set_input = hash %}\n      {% assign metafield_set_input[\"ownerId\"] = variant.id %}\n      {% assign metafield_set_input[\"namespace\"] = variant_metafield | split: \".\" | first %}\n      {% assign metafield_set_input[\"key\"] = variant_metafield | split: \".\" | last %}\n      {% assign metafield_set_input[\"type\"] = \"list.single_line_text_field\" %}\n      {% assign metafield_set_input[\"value\"] = in_stock_location_names | json %}\n      {% assign metafield_set_inputs = metafield_set_inputs | push: metafield_set_input %}\n    {% endif %}\n  {% endfor %}\n\n  {% if metafield_delete_inputs != blank %}\n    {% assign groups_of_metafield_delete_inputs = metafield_delete_inputs | in_groups_of: 250, fill_with: false %}\n\n    {% for group_of_metafield_delete_inputs in groups_of_metafield_delete_inputs %}\n      {% action \"shopify\" %}\n        mutation {\n          metafieldsDelete(\n            metafields: {{ group_of_metafield_delete_inputs | graphql_arguments }}\n          ) {\n            deletedMetafields {\n              ownerId\n              namespace\n              key\n            }\n            userErrors {\n              field\n              message\n            }\n          }\n        }\n      {% endaction %}\n    {% endfor %}\n  {% endif %}\n\n  {% if metafield_set_inputs != blank %}\n    {% assign groups_of_metafield_set_inputs = metafield_set_inputs | in_groups_of: 25, fill_with: false %}\n\n    {% for group_of_metafield_set_inputs in groups_of_metafield_set_inputs %}\n      {% action \"shopify\" %}\n        mutation {\n          metafieldsSet(\n            metafields: {{ group_of_metafield_set_inputs | graphql_arguments }}\n          ) {\n            metafields {\n              id\n              namespace\n              key\n              type\n              value\n              owner {\n                ... on ProductVariant {\n                  id\n                  displayName\n                }\n              }\n            }\n            userErrors {\n              code\n              field\n              message\n            }\n          }\n        }\n      {% endaction %}\n    {% endfor %}\n  {% endif %}\n{% endif %}\n",
  "subscriptions": [
    "mechanic/scheduler/hourly",
    "mechanic/user/trigger"
  ],
  "subscriptions_template": "{% if options.run_every_10_minutes__boolean %}\n  mechanic/scheduler/10min\n{% elsif options.run_hourly__boolean %}\n  mechanic/scheduler/hourly\n{% elsif options.run_daily__boolean %}\n  mechanic/scheduler/daily\n{% endif %}\nmechanic/user/trigger"
}
