{
  "docs": "Useful for multiple price points, or for offering customizations of the same item, this task lets you offer multiple variant listings for what is ultimately the same stock. A purchase of a particular variant results in the inventory for all other variants, for the same product, being lowered by the amount ordered.\n\n### Getting started\n\n1. Populate the list of product types that you'd like this task to monitor.\n2. In the Shopify admin, navigate to the Products > Inventory area. Use the tools here to ensure that all products, for the types you care about, have the same \"available\" level for all of their variants.\n3. Back in Mechanic, click the \"Run task\" button. Mechanic will scan your products, and cache the current available inventory level for each one.\n4. Wait! :) Every ten minutes, Mechanic will check your inventory, and make any adjustments necessary to keep everything in sync. For example, if three different inventory items - within the same product - are each sold three different times, Mechanic will ensure that each of those items are lowered by a further 6, and that all others are lowered by 9.\n\n### Notes\n\n* This task only counts and adjusts available inventory at the default location configured in Shopify.\n* To manually change inventory levels for a product, adjust _only one_ variant to the desired level. During the next scheduled run, the task will bring the other variants into sync.\n* By default, Mechanic will check your inventory every 10 minutes. Feel free to change that subscription to \"mechanic/scheduler/hourly\", or [something else that suits your needs](https://learn.mechanic.dev/platform/events/topics#scheduler).",
  "halt_action_run_sequence_on_error": false,
  "name": "Sync inventory across product variants",
  "online_store_javascript": null,
  "options": {
    "product_types_to_monitor__array_required": [
      "Shirt"
    ]
  },
  "order_status_javascript": null,
  "perform_action_runs_in_sequence": false,
  "script": "{% assign product_types = options.product_types_to_monitor__array_required %}\n{% assign only_sync_active_products = options.only_sync_active_products__boolean %}\n\n{% assign primary_location = shop.locations[shop.primary_location_id] %}\n\n{% assign variants_by_product = hash %}\n{% assign cursor = nil %}\n{% assign search_query_parts = array %}\n\n{% for product_type in product_types %}\n  {% assign search_query_parts[search_query_parts.size] = product_type | json | prepend: \"product_type:\" %}\n{% endfor %}\n\n{% capture search_query -%}\n  location_id:{{ shop.primary_location_id }} ({{ search_query_parts | join: \" OR \" }}) managed:true\n{%- endcapture %}\n\n{% for n in (0..200) %}\n  {% capture query %}\n    query {\n      productVariants(\n        first: 150\n        query: {{ search_query | json }}\n        after: {{ cursor | json }}\n      ) {\n        pageInfo {\n          hasNextPage\n          endCursor\n        }\n        nodes {\n          id\n          inventoryItem {\n            id\n            inventoryLevel(locationId: {{ primary_location.admin_graphql_api_id | json }}) {\n              quantities(names: \"available\") {\n                name\n                quantity\n              }\n            }\n          }\n          product {\n            id\n          }\n        }\n      }\n    }\n  {% endcapture %}\n\n  {% assign result = query | shopify %}\n\n  {% if event.preview %}\n    {% capture result_json %}\n      {\n        \"data\": {\n          \"productVariants\": {\n            \"nodes\": [\n              {\n                \"id\": \"gid://shopify/ProductVariant/1234567890\",\n                \"inventoryItem\": {\n                  \"id\": \"gid://shopify/InventoryItem/1234567890\",\n                  \"inventoryLevel\": {\n                    \"quantities\": [\n                      {\n                        \"name\": \"available\",\n                        \"quantity\": 30\n                      }\n                    ]\n                  }\n                },\n                \"product\": {\n                  \"id\": \"gid://shopify/Product/1234567890\"\n                }\n              },\n              {\n                \"id\": \"gid://shopify/ProductVariant/2345678901\",\n                \"inventoryItem\": {\n                  \"id\": \"gid://shopify/InventoryItem/2345678901\",\n                  \"inventoryLevel\": {\n                    \"quantities\": [\n                      {\n                        \"name\": \"available\",\n                        \"quantity\": {% if event.topic == \"mechanic/user/trigger\" %}30{% else %}31{% endif %}\n                      }\n                    ]\n                  }\n                },\n                \"product\": {\n                  \"id\": \"gid://shopify/Product/1234567890\"\n                }\n              }\n            ]\n          }\n        }\n      }\n    {% endcapture %}\n\n    {% assign result = result_json | parse_json %}\n  {% endif %}\n\n  {% for variant in result.data.productVariants.nodes %}\n    {% assign variants_by_product[variant.product.id]\n      = variants_by_product[variant.product.id]\n      | default: array\n      | push: variant\n    %}\n  {% endfor %}\n\n  {% if result.data.productVariants.pageInfo.hasNextPage %}\n    {% assign cursor = result.data.productVariants.pageInfo.endCursor %}\n  {% else %}\n    {% break %}\n  {% endif %}\n{% endfor %}\n\n{% if variants_by_product == blank %}\n  {% log\n    message: \"No matching product variants found! Check your product type settings for this task.\",\n    search_query: search_query\n  %}\n  {% break %}\n{% endif %}\n\n{% if event.topic == \"mechanic/user/trigger\" %}\n  {% for pair in variants_by_product %}\n    {% assign product_id = pair[0] %}\n    {% assign variants = pair[1] %}\n\n    {% assign available_quantites = array %}\n\n    {% for variant in variants %}\n      {% assign available_quantites = available_quantites | push: variant.inventoryItem.inventoryLevel.quantities.first.quantity %}\n    {% endfor %}\n\n    {% assign inventory_total = available_quantites | sum %}\n    {% assign expected_inventory_total = available_quantites.first | times: available_quantites.size %}\n\n    {% if inventory_total != expected_inventory_total %}\n      {% error\n        message: \"Product variant inventory levels are not in sync. Manually ensure everything is at the same level, then try again.\",\n        product_id: product_id,\n        expected_inventory_total: expected_inventory_total,\n        inventory_total: inventory_total,\n        available_quantites: available_quantites\n      %}\n\n    {% else %}\n      {% assign cache_key = \"inventory_by_product:\" | append: product_id %}\n      {% action \"cache\", \"set\", cache_key, available_quantites.first %}\n    {% endif %}\n  {% endfor %}\n\n{% elsif event.topic contains \"mechanic/scheduler/\" %}\n  {% assign inventory_adjustments = array %}\n\n  {% for pair in variants_by_product %}\n    {% assign product_id = pair[0] %}\n    {% assign variants = pair[1] %}\n\n    {% assign cache_key = \"inventory_by_product:\" | append: product_id %}\n    {% assign inventory_old = cache[cache_key] %}\n\n    {% if event.preview %}\n      {% assign inventory_old = 30 %}\n    {% endif %}\n\n    {% if inventory_old == blank %}\n      {% error\n        message: \"The inventory for this product has not yet been cached. Manually synchronize the inventory for this product and run this task manually per steps 2 and 3 in the task instructions.\",\n        product_id: product_id\n      %}\n    {% endif %}\n\n    {% assign available_quantites = array %}\n\n    {% for variant in variants %}\n      {% assign available_quantites = available_quantites | push: variant.inventoryItem.inventoryLevel.quantities.first.quantity %}\n    {% endfor %}\n\n    {% assign inventory_total_old = inventory_old | times: available_quantites.size %}\n    {% assign inventory_total_new = available_quantites | sum %}\n    {% assign inventory_total_diff = inventory_total_new | minus: inventory_total_old %}\n    {% assign inventory_new = inventory_old | plus: inventory_total_diff %}\n\n    {% log\n      inventory_old: inventory_old,\n      inventory_total_old: inventory_total_old,\n      inventory_total_new: inventory_total_new,\n      inventory_total_diff: inventory_total_diff,\n      inventory_new: inventory_new,\n      product_id: product_id,\n      variants_count: variants.size,\n      variants: variants\n    %}\n\n    {% if inventory_new == inventory_old %}\n      {% log \"No inventory adjustments needed for this product.\" %}\n      {% continue %}\n    {% endif %}\n\n    {% action \"cache\", \"set\", cache_key, inventory_new %}\n\n    {% for variant in variants %}\n      {% assign inventory_adjustment = hash %}\n      {% assign inventory_adjustment[\"inventoryItemId\"] = variant.inventoryItem.id %}\n      {% assign inventory_adjustment[\"locationId\"] = primary_location.admin_graphql_api_id %}\n      {% assign inventory_adjustment[\"delta\"] = inventory_new | minus: variant.inventoryItem.inventoryLevel.quantities.first.quantity %}\n      {% assign inventory_adjustments = inventory_adjustments | push: inventory_adjustment %}\n    {% endfor %}\n  {% endfor %}\n\n  {% if inventory_adjustments != blank %}\n    {% assign groups_of_inventory_adjustments = inventory_adjustments | in_groups_of: 250, fill_with: false %}\n\n    {% for group_of_inventory_adjustments in groups_of_inventory_adjustments %}\n      {% action \"shopify\" %}\n        mutation {\n          inventoryAdjustQuantities(\n            input: {\n              reason: \"correction\"\n              name: \"available\"\n              changes: {{ group_of_inventory_adjustments | graphql_arguments }}\n            }\n          ) {\n            inventoryAdjustmentGroup {\n              reason\n              changes {\n                name\n                delta\n                quantityAfterChange\n                item {\n                  id\n                  sku\n                }\n                location {\n                  name\n                }\n              }\n            }\n            userErrors {\n              code\n              field\n              message\n            }\n          }\n        }\n      {% endaction %}\n    {% endfor %}\n  {% endif %}\n{% endif %}\n",
  "subscriptions": [
    "mechanic/user/trigger",
    "mechanic/scheduler/10min"
  ],
  "subscriptions_template": "mechanic/user/trigger\nmechanic/scheduler/10min",
  "tags": [
    "Inventory",
    "Products",
    "Sync",
    "Variants"
  ]
}
