{
  "name": "Sync inventory across product variants",
  "options": {
    "product_types_to_monitor__array_required": [
      "Shirt"
    ]
  },
  "subscriptions": [
    "mechanic/user/trigger",
    "mechanic/scheduler/10min"
  ],
  "subscriptions_template": "mechanic/user/trigger\nmechanic/scheduler/10min",
  "script": "{% comment %}\n  Use 10/10 for a simple preview. Use 100/101 to demonstrate batching,\n  since we only get 100 inventory updates per mutation.\n{% endcomment %}\n{% assign starting_inventory_for_preview = 10 %}\n{% assign variant_count_for_preview = 100 %}\n\n{% assign search_query_parts = array %}\n{% for product_type in options.product_types_to_monitor__array_required %}\n  {% assign search_query_parts[search_query_parts.size] = product_type | json | prepend: \"product_type:\" %}\n{% endfor %}\n{% assign search_query = search_query_parts | join: \" OR \" %}\n\n{% assign variants_by_product = hash %}\n{% assign cursor = nil %}\n\n{% for n in (0..100) %}\n  {% capture variant_query %}\n    {\n      productVariants(\n        first: 250\n        query: {{ search_query | json }}\n        after: {{ cursor | json }}\n      ) {\n        pageInfo {\n          hasNextPage\n        }\n        edges {\n          node {\n            id\n            inventoryQuantity\n            inventoryItem {\n              id\n            }\n            product {\n              id\n            }\n          }\n          cursor\n        }\n      }\n    }\n  {% endcapture %}\n\n  {% assign variant_query_result = variant_query | shopify %}\n\n  {% if event.preview %}\n    {% capture variant_query_result_json %}\n      {\n        \"data\": {\n          \"productVariants\": {\n            \"pageInfo\": {\n              \"hasNextPage\": false\n            },\n            \"edges\": [\n              {\n                \"node\": {\n                  \"id\": \"gid://shopify/ProductVariant/1234567890\",\n                  \"inventoryQuantity\": {{ starting_inventory_for_preview }},\n                  \"inventoryItem\": {\n                    \"id\": \"gid://shopify/InventoryItem/1234567890\"\n                  },\n                  \"product\": {\n                    \"id\": \"gid://shopify/Product/1234567890\"\n                  }\n                }\n              },\n              {% for n in (2..variant_count_for_preview) %}\n                {\n                  \"node\": {\n                    \"id\": \"gid://shopify/ProductVariant/134567890-{{ n }}\",\n                    \"inventoryQuantity\": {% if event.topic == \"mechanic/user/trigger\" %}{{ starting_inventory_for_preview }}{% else %}{{ starting_inventory_for_preview | minus: 1 }}{% endif %},\n                    \"inventoryItem\": {\n                      \"id\": \"gid://shopify/InventoryItem/1234567890-{{ n}}\"\n                    },\n                    \"product\": {\n                      \"id\": \"gid://shopify/Product/1234567890\"\n                    }\n                  }\n                }{% unless forloop.last %},{% endunless %}\n              {% endfor %}\n            ]\n          }\n        }\n      }\n    {% endcapture %}\n\n    {% assign variant_query_result = variant_query_result_json | parse_json %}\n  {% endif %}\n\n  {% assign variant_nodes = variant_query_result.data.productVariants.edges | map: \"node\" %}\n  {% for variant_node in variant_nodes %}\n    {% assign product_id = variant_node.product.id %}\n    {% if variants_by_product[product_id] == nil %}\n      {% assign variants_by_product[product_id] = array %}\n    {% endif %}\n\n    {% assign index = variants_by_product[product_id].size %}\n    {% assign variants_by_product[product_id][index] = variant_node %}\n  {% endfor %}\n\n  {% if variant_query_result.data.productVariants.pageInfo.hasNextPage %}\n    {% assign cursor = variant_query_result.data.productVariants.edges.last.cursor %}\n    {% continue %}\n  {% endif %}\n\n  {% break %}\n{% endfor %}\n\n{% if variants_by_product == empty %}\n  {% log mesage: \"No matching product variants found! Check your product type settings for this task.\", search_query: search_query %}\n{% elsif event.topic == \"mechanic/user/trigger\" %}\n  {% for pair in variants_by_product %}\n    {% assign product_id = pair[0] %}\n    {% assign variants = pair[1] %}\n\n    {% assign unique_inventory_levels = variants | map: \"inventoryQuantity\" | uniq %}\n    {% if unique_inventory_levels.size != 1 %}\n      {% error message: \"Ensure all products have even inventory levels across their variants, then try again.\", product_id_with_mismatching_inventory_quantities: product_id %}\n      {% break %}\n    {% else %}\n      {% assign cache_key = \"inventory_by_product:\" | append: product_id %}\n      {% action \"cache\", \"set\", cache_key, variants.first.inventoryQuantity %}\n    {% endif %}\n  {% endfor %}\n{% elsif event.topic contains \"mechanic/scheduler/\" %}\n  {% assign inventory_item_adjustments = array %}\n\n  {% capture primary_location_query %}\n    {\n      location {\n        id\n      }\n    }\n  {% endcapture %}\n\n  {% assign primary_location_query_result = primary_location_query | shopify %}\n\n  {% if event.preview %}\n    {% capture primary_location_query_result_json %}\n      {\n        \"data\": {\n          \"location\": {\n            \"id\": \"gid://shopify/Location/1234567890\"\n          }\n        }\n      }\n    {% endcapture %}\n\n    {% assign primary_location_query_result = primary_location_query_result_json | parse_json %}\n  {% endif %}\n\n  {% assign primary_location_id = primary_location_query_result.data.location.id %}\n\n  {% for pair in variants_by_product %}\n    {% assign product_id = pair[0] %}\n    {% assign variants = pair[1] %}\n\n    {% assign cache_key = \"inventory_by_product:\" | append: product_id %}\n    {% assign starting_inventory = cache[cache_key] %}\n\n    {% if event.preview %}\n      {% assign starting_inventory = starting_inventory_for_preview %}\n    {% endif %}\n\n    {% assign inventory_list = variants | map: \"inventoryQuantity\" %}\n    {% assign inventory_total = inventory_list | sum %}\n    {% assign inventory_diff = starting_inventory | times: inventory_list.size | minus: inventory_total %}\n    {% assign new_inventory = starting_inventory | minus: inventory_diff %}\n\n    {% if new_inventory == starting_inventory %}\n      {% log message: \"No inventory adjustments needed for this product\", product_id: product_id, inventory_available: starting_inventory %}\n    {% else %}\n      {% action \"cache\", \"set\", cache_key, new_inventory %}\n\n      {% for variant in variants %}\n        {% assign adjustment = hash %}\n        {% assign adjustment[\"inventoryItemId\"] = variant.inventoryItem.id %}\n        {% assign adjustment[\"availableDelta\"] = new_inventory | minus: variant.inventoryQuantity %}\n\n        {% if new_inventory == variant.inventoryQuantity %}\n          {% continue %}\n        {% endif %}\n\n        {% assign inventory_item_adjustments[inventory_item_adjustments.size] = adjustment %}\n      {% endfor %}\n    {% endif %}\n  {% endfor %}\n\n  {% if inventory_item_adjustments.size > 0 %}\n    {% assign batch_size = 100 %}\n    {% assign batch_count = inventory_item_adjustments.size | times: 1.0 | divided_by: batch_size | ceil %}\n\n    {% for n in (1..batch_count) %}\n      {% assign inventory_item_adjustments_batch = array %}\n      {% assign start_index = batch_size  | times: forloop.index0 %}\n      {% assign stop_index = start_index | plus: batch_size | minus: 1 %}\n\n      {% for m in (start_index..stop_index) %}\n        {% if inventory_item_adjustments[m] %}\n          {% assign inventory_item_adjustments_batch[inventory_item_adjustments_batch.size] = inventory_item_adjustments[m] %}\n        {% endif %}\n      {% endfor %}\n\n      {% action \"shopify\" %}\n        mutation {\n          inventoryBulkAdjustQuantityAtLocation(\n            inventoryItemAdjustments: {{ inventory_item_adjustments_batch | graphql_arguments }}\n            locationId: {{ primary_location_id | json }}\n          ) {\n            inventoryLevels {\n              id\n            }\n            userErrors {\n              field\n              message\n            }\n          }\n        }\n      {% endaction %}\n    {% endfor %}\n  {% endif %}\n{% endif %}",
  "docs": "Useful for multiple price points, or for offering customizations of the same item, this task lets you offer multiple variant listings for what is ultimately the same stock. A purchase of a particular variant results in the inventory for all other variants, for the same product, being lowered by the amount ordered.\n\n### Getting started\r\n\r\n1. Populate the list of product types that you'd like this task to monitor.\r\n2. In the Shopify admin, navigate to the Products > Inventory area. Use the tools here to ensure that all products, for the types you care about, have all their variant inventory in sync.\r\n3. Back in Mechanic, click the \"Run task\" button. Mechanic will scan your products, and cache the current inventory level for each one.\r\n4. Wait! :) Every ten minutes, Mechanic will check your inventory, and make any adjustments necessary to keep everything in sync. For example, if three different inventory items - within the same product - are each sold three different times, Mechanic will ensure that each of those items are lowered by a further 6, and that all others are lowered by 9.\r\n\r\n### Notes\r\n\r\n* This task only works with a single location. Multiple locations are not supported.\r\n* To manually change inventory levels for a product, adjust _only one_ variant to the desired level. During the next scheduled run, the task will bring the other variants into sync.\r\n* By default, Mechanic will check your inventory every 10 minutes. Feel free to change that subscription to \"mechanic/scheduler/hourly\", or [something else that suits your needs](https://help.usemechanic.com/events/all-event-topics#mechanic).",
  "halt_action_run_sequence_on_error": false,
  "online_store_javascript": null,
  "order_status_javascript": null,
  "perform_action_runs_in_sequence": false
}
