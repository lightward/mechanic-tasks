{
  "docs": "Useful for selling, say, a limited print with different framing options, this task makes sure that a product's inventory levels, for each variant and location, are all kept in sync.\n\nWhen an inventory level is updated, this task will update the inventory for all other variants of the same product.\n\nOptionally, configure this task to filter for certain location names and product types. If you leave these blank, the task will monitor and update inventory across all locations, and for all product types.\n\n**Limitations**\n\nChanges to multiple inventory items for a single product, within the span of 60 seconds, will result in only the first inventory change being applied to all inventory items. For example, if a customer purchases a framed _and_ unframed version of the same print, the inventory levels for that product will only be decremented by 1, not by 2. If this is causing trouble for you, let us know!",
  "halt_action_run_sequence_on_error": false,
  "name": "Keep inventory levels in sync within products",
  "online_store_javascript": null,
  "options": {
    "filter_by_these_location_names__array": [],
    "filter_by_these_product_types__array": []
  },
  "order_status_javascript": null,
  "perform_action_runs_in_sequence": false,
  "script": "{% assign filter_by_these_location_names = options.filter_by_these_location_names__array %}\n{% assign filter_by_these_product_types = options.filter_by_these_product_types__array %}\n\n{% assign changed_inventory_level_id = inventory_level.admin_graphql_api_id %}\n\n{% comment %}\n  -- get location and product data from the inventory level that changed\n{% endcomment %}\n\n{% capture query %}\n  query IL {\n    inventoryLevel(id: {{ changed_inventory_level_id | json }}) {\n      location {\n        name\n      }\n      quantities(names: \"available\") {\n        quantity\n      }\n      item {\n        id\n        variant {\n          product {\n            id\n            legacyResourceId\n            productType\n          }\n        }\n      }\n    }\n  }\n{% endcapture %}\n\n{% assign result = query | shopify %}\n\n{% if event.preview %}\n  {% capture result_json %}\n    {\n      \"data\": {\n        \"inventoryLevel\": {\n          \"location\": {\n            \"name\": {{ filter_by_these_location_names.first | json }}\n          },\n          \"quantities\": [\n            {\n              \"quantity\": 100\n            }\n          ],\n          \"item\": {\n            \"id\": \"gid://shopify/inventoryItem/1234567890\",\n            \"variant\": {\n              \"product\": {\n                \"id\": \"gid://shopify/Product/1234567890\",\n                \"legacyResourceId\": \"1234567890\",\n                \"productType\": {{ filter_by_these_product_types.first | json }}\n              }\n            }\n          }\n        }\n      }\n    }\n  {% endcapture %}\n\n  {% assign result = result_json | parse_json %}\n{% endif %}\n\n{% assign new_quantity = result.data.inventoryLevel.quantities.first.quantity %}\n{% assign location = result.data.inventoryLevel.location %}\n{% assign product = result.data.inventoryLevel.item.variant.product %}\n\n{% unless filter_by_these_location_names == blank or filter_by_these_location_names contains location.name %}\n  {% break %}\n{% endunless %}\n\n{% unless filter_by_these_product_types == blank or filter_by_these_product_types contains product.productType %}\n  {% break %}\n{% endunless %}\n\n{% assign cache_key = \"product-inventory-level-\" | append: product.legacyResourceId %}\n\n{% comment %}\n  -- if there is a cache entry, then inventory level updates were made by this task in the last minute, so stop processing\n{% endcomment %}\n\n{% if cache[cache_key] != blank %}\n  {% break %}\n{% endif %}\n\n{% comment %}\n  -- get inventory levels of each variant at all locations to see which need to be updated\n  -- support up to 2K variants\n{% endcomment %}\n\n{% assign cursor = nil %}\n{% assign inventory_inputs = array %}\n\n{% for n in (1..8) %}\n  {% capture query %}\n    query {\n      product(id: {{ product.id | json }}) {\n        variants(\n          first: 250\n          after: {{ cursor | json }}\n        ) {\n          pageInfo {\n            hasNextPage\n            endCursor\n          }\n          nodes {\n            id\n            inventoryItem {\n              id\n              inventoryLevels(first: 250) {\n                nodes {\n                  id\n                  quantities(names: \"available\") {\n                    quantity\n                  }\n                  location {\n                    id\n                    name\n                  }\n                }\n              }\n            }\n          }\n        }\n      }\n    }\n  {% endcapture %}\n\n  {% assign result = query | shopify %}\n\n  {% if event.preview %}\n    {% capture result_json %}\n      {\n        \"data\": {\n          \"product\": {\n            \"variants\": {\n              \"nodes\": [\n                {\n                  \"inventoryItem\": {\n                    \"id\": \"gid://shopify/InventoryItem/2345678901\",\n                    \"inventoryLevels\": {\n                      \"nodes\": [\n                        {\n                          \"quantities\": [\n                            {\n                              \"quantity\": 0\n                            }\n                          ],\n                          \"location\": {\n                            \"id\": \"gid://shopify/Location/1234567890\",\n                            \"name\": {{ filter_by_these_location_names.first | json }}\n                          }\n                        }\n                      ]\n                    }\n                  }\n                }\n              ]\n            }\n          }\n        }\n      }\n    {% endcapture %}\n\n    {% assign result = result_json | parse_json %}\n  {% endif %}\n\n  {% for variant in result.data.product.variants.nodes %}\n    {% for inventory_level in variant.inventoryItem.inventoryLevels.nodes %}\n      {% if inventory_level.id == changed_inventory_level_id %}\n        {% continue %}\n      {% endif %}\n\n      {% unless filter_by_these_location_names == blank or filter_by_these_location_names contains inventory_level.location.name %}\n        {% continue %}\n      {% endunless %}\n\n      {% if inventory_level.quantities.first.quantity != new_quantity %}\n        {% assign inventory_input = hash %}\n        {% assign inventory_input[\"inventoryItemId\"] = variant.inventoryItem.id %}\n        {% assign inventory_input[\"locationId\"] = inventory_level.location.id %}\n        {% assign inventory_input[\"quantity\"] = new_quantity %}\n        {% assign inventory_inputs = inventory_inputs | push: inventory_input %}\n      {% endif %}\n    {% endfor %}\n  {% endfor %}\n\n  {% if result.data.product.variants.pageInfo.hasNextPage %}\n    {% assign cursor = result.data.product.variants.pageInfo.endCursor %}\n  {% else %}\n    {% break %}\n  {% endif %}\n{% endfor %}\n\n{% if inventory_inputs != blank %}\n  {% comment %}\n    -- set a cache entry for 60 seconds\n  {% endcomment %}\n\n  {% action \"cache\", \"setex\", cache_key, 60, true %}\n\n  {% comment %}\n    -- set the inventory levels in batches of 250\n  {% endcomment %}\n\n  {% assign groups_of_inventory_inputs = inventory_inputs | in_groups_of: 250, fill_with: false %}\n\n  {% for group_of_inventory_inputs in groups_of_inventory_inputs %}\n    {% action \"shopify\" %}\n      mutation {\n        inventorySetQuantities(\n          input: {\n            name: \"available\"\n            reason: \"correction\"\n            ignoreCompareQuantity: true\n            quantities: {{ group_of_inventory_inputs | graphql_arguments }}\n          }\n        ) {\n          userErrors {\n            code\n            field\n            message\n          }\n        }\n      }\n    {% endaction %}\n  {% endfor %}\n{% endif %}\n",
  "subscriptions": [
    "shopify/inventory_levels/update"
  ],
  "subscriptions_template": "shopify/inventory_levels/update",
  "tags": [
    "Inventory",
    "Products",
    "Sync"
  ]
}
