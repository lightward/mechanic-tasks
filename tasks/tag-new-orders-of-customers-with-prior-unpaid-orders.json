{
  "docs": "Use this task to easily keep track of orders placed by customers that already have at least one unpaid order. When new orders are created and the customer has any existing authorized, partially paid, or pending payment orders, then the new order will get the configured tag.\n\nOptionally, choose to exclude company purchases from tagging and consideration.\n\nNote: By default, Mechanic only scans the last 60 days of order history. To change this, [enable the option in Mehanic's settings](https://learn.mechanic.dev/platform/shopify/read-all-orders#configuration).",
  "halt_action_run_sequence_on_error": false,
  "name": "Tag new orders of customers with prior unpaid orders",
  "online_store_javascript": null,
  "options": {
    "exclude_company_purchases__boolean": false,
    "order_tag_to_apply__required": null
  },
  "order_status_javascript": null,
  "perform_action_runs_in_sequence": false,
  "preview_event_definitions": [],
  "script": "{% assign order_tag_to_apply = options.order_tag_to_apply__required %}\n{% assign exclude_company_purchases = options.exclude_company_purchases__boolean %}\n\n{% if event.topic == \"shopify/orders/create\" %}\n  {% comment %}\n    -- query customer's unpaid orders\n  {% endcomment %}\n\n  {% capture query %}\n    query {\n      order(id: {{ order.admin_graphql_api_id | json }}) {\n        id\n        name\n        displayFinancialStatus\n        purchasingEntity {\n          __typename\n        }\n        customer {\n          id\n          displayName\n          unpaid_orders: orders(\n            first: 100\n            reverse: true\n            query: \"financial_status:unpaid\"\n          ) {\n            nodes {\n              id\n              name\n              displayFinancialStatus\n              purchasingEntity {\n                __typename\n              }\n            }\n          }\n        }\n      }\n    }\n  {% endcapture %}\n\n  {% assign result = query | shopify %}\n\n  {% if event.preview %}\n    {% capture result_json %}\n      {\n        \"data\": {\n          \"order\": {\n            \"id\": \"gid://shopify/Order/987654321\",\n            \"name\": \"#NEW\",\n            \"displayFinancialStatus\": \"PENDING\",\n            \"purchasingEntity\": {\n              \"__typename\": \"Customer\"\n            },\n            \"customer\": {\n              \"id\": \"gid://shopify/Customer/1234567890\",\n              \"displayName\": \"Jean Deaux\",\n              \"unpaid_orders\": {\n                \"nodes\": [\n                  {\n                    \"id\": \"gid://shopify/Order/987654321\",\n                    \"name\": \"#NEW\",\n                    \"displayFinancialStatus\": \"PENDING\",\n                    \"purchasingEntity\": {\n                      \"__typename\": \"Customer\"\n                    }\n                  },\n                  {\n                    \"id\": \"gid://shopify/Order/1234567890\",\n                    \"name\": \"#OLD-1\",\n                    \"displayFinancialStatus\": \"PARTIALLY_PAID\",\n                    \"purchasingEntity\": {\n                      \"__typename\": \"PurchasingCompany\"\n                    }\n                  },\n                  {\n                    \"id\": \"gid://shopify/Order/2345678901\",\n                    \"name\": \"#OLD-2\",\n                    \"displayFinancialStatus\": \"PARTIALLY_PAID\",\n                    \"purchasingEntity\": {\n                      \"__typename\": \"Customer\"\n                    }\n                  }\n                ]\n              }\n            }\n          }\n        }\n      }\n    {% endcapture %}\n\n    {% assign result = result_json | parse_json %}\n  {% endif %}\n\n  {% assign order = result.data.order %}\n\n  {% if order.customer == blank %}\n    {% break %}\n  {% endif %}\n\n  {% if exclude_company_purchases and order.purchasingEntity.__typename == \"PurchasingCompany\" %}\n    {% log\n      message: \"This order is a company purchase and the option to exclude them has been checked; skipping.\",\n      order_and_customer_data: order\n    %}\n    {% break %}\n  {% endif %}\n\n  {% assign has_unpaid_order = nil %}\n\n  {% comment %}\n    -- since new order may also be unpaid, set flag and break when any unpaid order is found that is not the new order\n    -- exclude company purchases if that option is checked\n  {% endcomment %}\n\n  {% for unpaid_order in order.customer.unpaid_orders.nodes %}\n    {% if unpaid_order.id == order.id %}\n      {% continue %}\n    {% elsif exclude_company_purchases and order.purchasingEntity.__typename == \"PurchasingCompany\" %}\n      {% continue %}\n    {% endif %}\n\n    {% comment %}\n      -- this unpaid order is not the new order and hasn't been excluded by the optional company check; set flag and exit loop\n    {% endcomment %}\n\n    {% assign has_unpaid_order = true %}\n    {% break %}\n  {% endfor %}\n\n  {% if has_unpaid_order %}\n    {% log\n      message: \"This customer has at least one prior unpaid order.\",\n      order_and_customer_data: order\n    %}\n\n    {% action \"shopify\" %}\n      mutation {\n        tagsAdd(\n          id: {{ order.id | json }}\n          tags: {{ order_tag_to_apply | json }}\n        ) {\n          node {\n            ... on Order {\n              name\n              tags\n            }\n          }\n          userErrors {\n            field\n            message\n          }\n        }\n      }\n    {% endaction %}\n\n  {% else %}\n    {% log\n      message: \"No prior unpaid orders found for this customer\",\n      order_and_customer_data: order\n    %}\n  {% endif %}\n{% endif %}",
  "subscriptions": [
    "shopify/orders/create"
  ],
  "subscriptions_template": "shopify/orders/create",
  "tags": [
    "Orders",
    "Tag",
    "Unpaid"
  ]
}
