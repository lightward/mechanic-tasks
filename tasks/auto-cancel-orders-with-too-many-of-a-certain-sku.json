{
  "docs": "Useful for enforcing order limits on the backend, use this task to ensure that orders with too many of certain products will be automatically cancelled.\n\nConfigure the product SKUs to monitor on the left and the quantities that will trigger a cancellation on the right. Optionally, choose whether to email the customer, refund the payment, or restock the inventory upon cancellation. The configured cancellation reason must be one of - 'customer', 'declined', 'fraud', 'inventory', 'other', or 'staff'.\n\nNotes:\n\n* SKUs are case-sensitive!\n* Any refunds generated by this task will be for the maximum amount, for the order being cancelled.",
  "halt_action_run_sequence_on_error": false,
  "name": "Auto-cancel orders with too many of a certain SKU",
  "online_store_javascript": null,
  "options": {
    "skus_to_watch_for__required_array": null,
    "quantity_threshold_for_cancellation__number_required": null,
    "send_cancellation_email_to_customer__boolean": false,
    "attempt_to_refund_or_void_payment_in_full__boolean": false,
    "reason_for_cancellation__required": "other"
  },
  "order_status_javascript": null,
  "perform_action_runs_in_sequence": false,
  "script": "{% assign skus_and_quantity_cancellation_thresholds = options.skus_and_quantity_cancellation_thresholds__keyval_number_required %}\n{% assign notify_customer = options.email_customer_when_cancelling__boolean %}\n{% assign refund_payment = options.refund_payment_for_cancelled_orders__boolean %}\n{% assign restock_inventory = options.restock_inventory_for_cancelled_orders__boolean %}\n{% assign cancellation_reason = options.cancellation_reason_to_set | default: \"other\" %}\n{% assign staff_note = options.staff_note_for_timeline %}\n\n{% assign skus_to_monitor = skus_and_quantity_cancellation_thresholds | keys %}\n\n{% comment %}\n  -- check that a valid cancellation reason has been configured; it will default to 'other' if left blank\n{% endcomment %}\n\n{% assign valid_cancellation_reasons = \"customer,declined,fraud,inventory,other,staff\" | split: \",\" %}\n\n{% unless valid_cancellation_reasons contains cancellation_reason %}\n  {% error %}\n    {{ \"Cancellation reason: \" | append: cancellation_reason | append: \" - must be one of 'customer', 'declined', 'fraud', 'inventory', 'other', or 'staff'.\" | json }}\n  {% enderror %}\n{% endunless %}\n\n{% comment %}\n  -- get order details and line items to tally\n{% endcomment %}\n\n{% capture query %}\n  query {\n    order(id: {{ order.admin_graphql_api_id | json }}) {\n      id\n      name\n      cancelledAt\n      displayFulfillmentStatus\n      lineItems(first: 250) {\n        nodes {\n          sku\n          quantity\n        }\n      }\n    }\n  }\n{% endcapture %}\n\n{% assign result = query | shopify %}\n\n{% if event.preview %}\n  {% capture result_json %}\n    {\n      \"data\": {\n        \"order\": {\n          \"id\": \"gid://shopify/Order/1234567890\",\n          \"name\": \"#PREVIEW\",\n          \"displayFulfillmentStatus\": \"UNFULFILLED\",\n          \"lineItems\": {\n            \"nodes\": [\n              {\n                \"sku\": {{ skus_and_quantity_cancellation_thresholds.first.first | json }},\n                \"quantity\": {{ skus_and_quantity_cancellation_thresholds.first.last | json }}\n              }\n            ]\n          }\n        }\n      }\n    }\n  {% endcapture %}\n\n  {% assign result = result_json | parse_json %}\n{% endif %}\n\n{% assign order = result.data.order %}\n\n{% if order.cancelledAt %}\n  {% log \"This order has already been cancelled.\" %}\n  {% break %}\n{% endif %}\n\n{% comment %}\n  -- check to make sure order is unfulfilled to avoid cancellation error\n{% endcomment %}\n\n{% if order.displayFulfillmentStatus == \"FULFILLED\" or order.displayFulfillmentStatus == \"PARTIALLY_FULFILLED\" %}\n  {% log \"This order has already been fulfilled or partially fulfilled and cannot be cancelled.\" %}\n  {% break %}\n{% endif %}\n\n{% comment %}\n  -- tally quantities of the configured skus across all line items\n{% endcomment %}\n\n{% assign skus_and_line_item_quantities = hash %}\n\n{% for line_item in order.lineItems.nodes %}\n  {% if line_item.sku == blank %}\n    {% continue %}\n  {% endif %}\n\n  {% if skus_to_monitor contains line_item.sku %}\n    {% assign skus_and_line_item_quantities[line_item.sku]\n      = skus_and_line_item_quantities[line_item.sku]\n      | default: 0\n      | plus: line_item.quantity\n    %}\n  {% endif %}\n{% endfor %}\n\n{% assign order_qualifies = nil %}\n\n{% for keyval in skus_and_line_item_quantities %}\n  {% assign sku = keyval[0] %}\n  {% assign count = keyval[1] %}\n\n  {% if count >= skus_and_quantity_cancellation_thresholds[sku] %}\n    {% assign order_qualifies = true %}\n    {% break %}\n  {% endif %}\n{% endfor %}\n\n{% unless order_qualifies %}\n  {% break %}\n{% endunless %}\n\n{% log\n  message: \"Order qualifies to be cancelled due to having one or more SKUs hit their quantity thresholds.\",\n  skus_and_line_item_quantities: skus_and_line_item_quantities,\n  skus_and_quantity_cancellation_thresholds: skus_and_quantity_cancellation_thresholds\n%}\n\n{% comment %}\n  -- cancel the order with configured options\n{% endcomment %}\n\n{% action \"shopify\" %}\n  mutation {\n    orderCancel(\n      orderId: {{ order.id | json }}\n      notifyCustomer: {{ notify_customer | json }}\n      reason: {{ cancellation_reason | upcase }}\n      refund: {{ refund_payment | json }}\n      restock: {{ restock_inventory | json }}\n      staffNote: {{ staff_note | json }}\n    ) {\n      job {\n        id\n      }\n      orderCancelUserErrors {\n        code\n        field\n        message\n      }\n    }\n  }\n{% endaction %}\n",
  "subscriptions": [
    "shopify/orders/create"
  ],
  "subscriptions_template": "shopify/orders/create",
  "tags": [
    "Cancel",
    "Orders",
    "SKU"
  ]
}
