{
  "name": "Auto-cancel orders with too many of a certain SKU",
  "options": {
    "skus_to_watch_for__required_array": null,
    "quantity_threshold_for_cancellation__number_required": null,
    "send_cancellation_email_to_customer__boolean": false,
    "attempt_to_refund_or_void_payment_in_full__boolean": false,
    "reason_for_cancellation__required": "other"
  },
  "subscriptions": [
    "shopify/orders/create"
  ],
  "subscriptions_template": "shopify/orders/create",
  "script": "{% comment %}\n  An opinion about option order:\n\n  {{ options.skus_to_watch_for__required_array }}\n  {{ options.quantity_threshold_for_cancellation__number_required }}\n  {{ options.send_cancellation_email_to_customer__boolean }}\n  {{ options.attempt_to_refund_or_void_payment_in_full__boolean }}\n  {{ options.reason_for_cancellation__required }}\n{% endcomment %}\n\n{% assign valid_reasons = \"customer,inventory,fraud,declined,other\" | split: \",\" %}\n{% if options.reason_for_cancellation__required != blank %}\n  {% unless valid_reasons contains options.reason_for_cancellation__required %}\n    {\"error\": {{ valid_reasons | json | prepend: \"'Reason for cancellation' must be one of \" | json }}}\n  {% endunless %}\n{% endif %}\n\n{% assign sku_count = 0 %}\n\n{% for line_item in order.line_items %}\n  {% if line_item.sku != blank and options.skus_to_watch_for__required_array contains line_item.sku %}\n    {% assign sku_count = sku_count | plus: line_item.quantity %}\n  {% endif %}\n{% endfor %}\n\n{% if event.preview or sku_count >= options.quantity_threshold_for_cancellation__number_required %}\n  {% action \"shopify\" %}\n      [\n        \"post\",\n        \"/admin/orders/{{ order.id }}/cancel.json\",\n        {\n          {% if options.attempt_to_refund_or_void_payment_in_full__boolean %}\n            {% capture refund_query %}\n              query {\n                order(id: {{ order.admin_graphql_api_id | json }}) {\n                  suggestedRefund(suggestFullRefund: true) {\n                    amountSet {\n                      shopMoney {\n                        amount\n                        currencyCode\n                      }\n                    }\n                  }\n                }\n              }\n            {% endcapture %}\n            {% assign refund_result = refund_query | shopify %}\n            {% assign refund_money = refund_result.data.order.suggestedRefund.amountSet.shopMoney %}\n\n            {% if event.preview %}\n              {% assign refund_money = hash %}\n              {% assign refund_money[\"amount\"] = order.total_price %}\n              {% assign refund_money[\"currencyCode\"] = order.currency %}\n            {% endif %}\n\n            \"amount\": {{ refund_money.amount | json }},\n            \"currency\": {{ refund_money.currencyCode | json }},\n          {% endif %}\n          \"email\": {{ options.send_cancellation_email_to_customer__boolean | json }},\n          \"reason\": {{ options.reason_for_cancellation__required | json }}\n        }\n      ]\n    {% endaction %}\n{% endif %}",
  "docs": "Useful for enforcing order limits on the backend, use this task to ensure that too many of a certain product cannot be purchased. This task can be configured with multiple SKUs, too!\n\nNotes:\r\n\r\n* SKUs are case-sensitive!\r\n* The total quantity will be calculated by adding the quantities from each line item in the order, having a SKU that matches the SKU(s) you provide.\r\n* Any refunds generated by this task will be for the maximum amount, for the order being cancelled.",
  "halt_action_run_sequence_on_error": false,
  "online_store_javascript": null,
  "order_status_javascript": null,
  "perform_action_runs_in_sequence": false
}
