{
  "docs": "Use this task to tag incoming orders with all the product tags in the order. Optionally, specify a specific list of tags to be copied, and/or a certain tag prefix to watch for. Can be run manually, to scan and tag historical orders.\n\nUse this task to tag incoming orders with all the product tags in the order. Optionally, specify a specific list of tags to be copied, and/or a certain tag prefix to watch for.\r\n\r\nRun this task manually to scan and tag all orders, in bulk.",
  "halt_action_run_sequence_on_error": false,
  "name": "Auto-tag orders using product tags",
  "online_store_javascript": null,
  "options": {
    "only_copy_these_tags__array": null,
    "only_copy_tags_having_one_of_these_prefixes__array": null
  },
  "order_status_javascript": null,
  "perform_action_runs_in_sequence": false,
  "script": "{% assign only_copy_these_tags = options.only_copy_these_tags__array %}\n{% assign only_copy_tags_having_one_of_these_prefixes = options.only_copy_tags_having_one_of_these_prefixes__array %}\n\n{% comment %}\n  -- check configured tags to make sure no inadvertent spaces are present\n{% endcomment %}\n\n{% for tag in only_copy_these_tags %}\n  {% assign tag_check = tag | strip %}\n\n  {% if tag_check == \"\" %}\n    {% error \"'Only copy these tags' contains an empty entry. Please correct to continue.\" %}\n  {% endif %}\n{% endfor %}\n\n{% for tag in only_copy_tags_having_one_of_these_prefixes %}\n  {% assign tag_check = tag | strip %}\n\n  {% if tag_check == \"\" %}\n    {% error \"'Only copy tags having one of these prefixes' contains an empty entry. Please correct to continue.\" %}\n  {% endif %}\n{% endfor %}\n\n{% assign order_ids_tags_and_product_tags = array %}\n\n{% if event.topic == \"shopify/orders/create\" or event.topic == \"mechanic/user/order\" %}\n  {% comment %}\n    -- query the order, line items, products, and tags\n  {% endcomment %}\n\n  {% capture query %}\n    query {\n      order(id: {{ order.admin_graphql_api_id | json }}) {\n        id\n        tags\n        lineItems(first: 250) {\n          nodes {\n            product {\n              tags\n            }\n          }\n        }\n      }\n    }\n  {% endcapture %}\n\n  {% assign result = query | shopify %}\n\n  {% if event.preview %}\n    {% capture result_json %}\n      {\n        \"data\": {\n          \"order\": {\n            \"id\": \"gid://shopify/Order/1234567890\",\n            \"lineItems\": {\n              \"nodes\": [\n                {\n                  \"product\": {\n                    \"tags\": [\n                      \"preview-tag\",\n                      {{ only_copy_these_tags.first | json }},\n                      {{ only_copy_tags_having_one_of_these_prefixes.first | json }}\n                    ]\n                  }\n                }\n              ]\n            }\n          }\n        }\n      }\n    {% endcapture %}\n\n    {% assign result = result_json | parse_json %}\n  {% endif %}\n\n  {% assign order = result.data.order %}\n\n  {% comment %}\n    -- save order ID and tags as the only item in the array for processing\n  {% endcomment %}\n\n  {% assign item = array %}\n  {% assign item[0] = order.id %}\n  {% assign item[1] = order.tags %}\n  {% assign item[2] = order.lineItems.nodes | map: \"product\" | map: \"tags\" | uniq %}\n  {% assign order_ids_tags_and_product_tags[0] = item %}\n\n{% elsif event.topic == \"mechanic/user/trigger\" %}\n  {% comment %}\n    -- use bulk op to get all orders in the shop\n  {% endcomment %}\n\n  {% capture bulk_operation_query %}\n    query {\n      orders {\n        edges {\n          node {\n            __typename\n            id\n            tags\n            lineItems {\n              edges {\n                node {\n                  __typename\n                  product {\n                    tags\n                  }\n                }\n              }\n            }\n          }\n        }\n      }\n    }\n  {% endcapture %}\n\n  {% action \"shopify\" %}\n    mutation {\n      bulkOperationRunQuery(\n        query: {{ bulk_operation_query | json }}\n      ) {\n        bulkOperation {\n          id\n          status\n        }\n        userErrors {\n          field\n          message\n        }\n      }\n    }\n  {% endaction %}\n\n{% elsif event.topic == \"mechanic/shopify/bulk_operation\" %}\n  {% if event.preview %}\n    {% capture objects_jsonl %}\n      {\"__typename\":\"Order\",\"id\":\"gid:\\/\\/shopify\\/Order\\/1234567890\",\"tags\":[]}\n      {\"__typename\":\"LineItem\",\"__parentId\":\"gid:\\/\\/shopify\\/Order\\/1234567890\",\"product\":{\"tags\":[\"preview-tag\",{{ only_copy_these_tags.first | json }},{{ only_copy_tags_having_one_of_these_prefixes.first | json }}]}}\n    {% endcapture %}\n\n    {% assign bulkOperation = hash %}\n    {% assign bulkOperation[\"objects\"] = objects_jsonl | parse_jsonl %}\n  {% endif %}\n\n  {% assign orders = bulkOperation.objects | where: \"__typename\", \"Order\" %}\n  {% assign line_items = bulkOperation.objects | where: \"__typename\", \"LineItem\" %}\n\n  {% comment %}\n    -- save order IDs and tags in array for processing\n  {% endcomment %}\n\n  {% for order in orders %}\n    {% assign order_product_tags\n      = line_items\n      | where: \"__parentId\", order.id\n      | map: \"product\"\n      | map: \"tags\"\n      | uniq\n    %}\n\n    {% assign item = array %}\n    {% assign item[0] = order.id %}\n    {% assign item[1] = order.tags %}\n    {% assign item[2] = order_product_tags %}\n    {% assign order_ids_tags_and_product_tags[order_ids_tags_and_product_tags.size] = item %}\n  {% endfor %}\n{% endif %}\n\n{% comment %}\n  -- process items to see which tags to add to each order\n{% endcomment %}\n\n{% for item in order_ids_tags_and_product_tags %}\n  {% assign order_id = item[0] %}\n  {% assign order_tags = item[1] %}\n  {% assign order_product_tags = item[2] %}\n\n  {% assign tags_to_add = array %}\n\n  {% for product_tag in order_product_tags %}\n    {% if order_tags contains product_tag %}\n      {% continue %}\n    {% endif %}\n\n    {% if only_copy_these_tags == blank and only_copy_tags_having_one_of_these_prefixes == blank %}\n      {% assign tags_to_add = tags_to_add | push: product_tag %}\n      {% continue %}\n    {% endif %}\n\n    {% for tag in only_copy_these_tags %}\n      {% if tag == product_tag %}\n        {% assign tags_to_add = tags_to_add | push: product_tag %}\n      {% endif %}\n    {% endfor %}\n\n    {% comment %}\n      -- make sure the prefix matches the beginning of the tag\n    {% endcomment %}\n\n    {% for tag in only_copy_tags_having_one_of_these_prefixes %}\n      {% assign prefix_length = tag.size %}\n      {% assign product_tag_substr = product_tag | slice: 0, prefix_length %}\n\n      {% if tag == product_tag_substr %}\n        {% assign tags_to_add = tags_to_add | push: product_tag %}\n      {% endif %}\n    {% endfor %}\n  {% endfor %}\n\n  {% comment %}\n    -- remove duplicate tags before adding to order\n  {% endcomment %}\n\n  {% assign tags_to_add = tags_to_add | compact | uniq %}\n\n  {% if tags_to_add != blank %}\n    {% action \"shopify\" %}\n      mutation {\n        tagsAdd(\n          id: {{ order_id | json }}\n          tags: {{ tags_to_add | json }}\n        ) {\n          userErrors {\n            field\n            message\n          }\n        }\n      }\n    {% endaction %}\n  {% endif %}\n{% endfor %}\n",
  "subscriptions": [
    "shopify/orders/create",
    "mechanic/user/trigger",
    "mechanic/shopify/bulk_operation",
    "mechanic/user/order"
  ],
  "subscriptions_template": "shopify/orders/create\nmechanic/user/trigger\nmechanic/shopify/bulk_operation\nmechanic/user/order",
  "tags": [
    "Auto-Tag",
    "Orders",
    "Products"
  ]
}
