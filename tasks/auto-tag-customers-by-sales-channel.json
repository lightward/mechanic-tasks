{
  "docs": "Use this task to tag customers, as their orders come in, based on which sales channel they used for their purchase. Run this task manually to backfill tags for customers based on their historical orders. Use test mode to see what this task _would_ do, if test mode wasn't enabled.",
  "halt_action_run_sequence_on_error": false,
  "name": "Auto-tag customers by sales channel",
  "online_store_javascript": null,
  "options": {
    "sales_channel_names_and_tags__keyval_required": {
      "Online Store": "online-customer",
      "Buy Button": "buy-button-customer"
    },
    "test_mode__boolean": true
  },
  "order_status_javascript": null,
  "perform_action_runs_in_sequence": false,
  "script": "{% assign sales_channel_names_and_tags = options.sales_channel_names_and_tags__keyval_required %}\n{% assign test_mode = options.test_mode__boolean %}\n\n{% assign sales_channel_names = sales_channel_names_and_tags | keys %}\n\n{% comment %}\n  -- get all of the sales channel names (i.e. publications aka app catalogs) in the shop\n{% endcomment %}\n\n{% capture query %}\n  query {\n    publications(\n      first: 250\n      catalogType:APP\n    ) {\n      nodes {\n        id\n        catalog {\n          ... on AppCatalog {\n            apps(first: 1) {\n              nodes {\n                title\n              }\n            }\n          }\n        }\n      }\n    }\n  }\n{% endcapture %}\n\n{% assign result = query | shopify %}\n\n{% if event.preview %}\n  {% capture result_json %}\n    {\n      \"data\": {\n        \"publications\": {\n          \"nodes\": [\n            {\n              \"id\": \"gid://shopify/Publication/1234567890\",\n              \"catalog\": {\n                \"apps\": {\n                  \"nodes\": [\n                    {\n                      \"title\": {{ sales_channel_names.first | json }}\n                    }\n                  ]\n                }\n              }\n            }\n          ]\n        }\n      }\n    }\n  {% endcapture %}\n\n  {% assign result = result_json | parse_json %}\n{% endif %}\n\n{% comment %}\n  -- add the configured publication names into a hash for use in lookups\n{% endcomment %}\n\n{% assign publication_ids = array %}\n{% assign publication_names_by_id = hash %}\n\n{% for publication in result.data.publications.nodes %}\n  {% assign publication_name = publication.catalog.apps.nodes.first.title %}\n\n  {% if sales_channel_names contains publication_name %}\n    {% assign publication_ids = publication_ids | push: publication.id %}\n    {% assign publication_names_by_id[publication.id] = publication_name %}\n  {% endif %}\n{% endfor %}\n\n{% if event.topic contains \"shopify/orders/\" %}\n  {% comment %}\n    -- get the publication ID (if any) that the order originated from\n    -- Note: publication.name is deprecated; publication IDs should be matched with app catalog titles instead\n  {% endcomment %}\n\n  {% capture query %}\n    query {\n      order(id: {{ order.admin_graphql_api_id | json }}) {\n        customer {\n          id\n          tags\n        }\n        publication {\n          id\n        }\n      }\n    }\n  {% endcapture %}\n\n  {% assign result = query | shopify %}\n\n  {% if event.preview %}\n    {% capture result_json %}\n      {\n        \"data\": {\n          \"order\": {\n            \"customer\": {\n              \"id\": \"gid://shopify/Customer/1234567890\",\n              \"tags\": []\n            },\n            \"publication\": {\n              \"id\": {{ publication_ids.first | json }}\n            }\n          }\n        }\n      }\n    {% endcapture %}\n\n    {% assign result = result_json | parse_json %}\n  {% endif %}\n\n  {% assign order_publication_id = result.data.order.publication.id %}\n\n  {% if order_publication_id == blank %}\n    {% log\n      message: \"This order did not originate from an app sales channel. Skipping.\",\n      order: result.data.order\n    %}\n    {% break %}\n  {% endif %}\n\n  {% comment %}\n    -- tag the customer if the order's sales channel matches one configured in this task\n  {% endcomment %}\n\n  {% assign publication_name = publication_names_by_id[order_publication_id] %}\n  {% assign tag_to_add = sales_channel_names_and_tags[publication_name] %}\n\n  {% if tag_to_add == blank %}\n    {% log\n      message: \"No tag found for this channel. Skipping.\",\n      publication_name: publication_name\n    %}\n\n  {% elsif result.data.order.customer.tags contains tag_to_add %}\n    {% log\n      message: \"The customer already has the tag for this channel. Skipping.\",\n      publication_name: publication_name,\n      tag_to_add: tag_to_add\n    %}\n\n  {% elsif test_mode %}\n    {% log\n      customer_id: result.data.order.customer.id,\n      publication_name: publication_name,\n      customer_tag_to_add: tag_to_add\n    %}\n\n  {% else %}\n    {% action \"shopify\" %}\n      mutation {\n        tagsAdd(\n          id: {{ result.data.order.customer.id | json }}\n          tags: {{ tag_to_add | json }}\n        ) {\n          userErrors {\n            field\n            message\n          }\n        }\n      }\n    {% endaction %}\n  {% endif %}\n\n{% elsif event.topic == \"mechanic/user/trigger\" %}\n  {% comment %}\n    -- get all customers and their orders\n  {% endcomment %}\n\n  {% capture bulk_operation_query %}\n    query {\n      customers {\n        edges {\n          node {\n            __typename\n            id\n            tags\n            orders {\n              edges {\n                node {\n                  __typename\n                  publication {\n                    id\n                  }\n                }\n              }\n            }\n          }\n        }\n      }\n    }\n  {% endcapture %}\n\n  {% action \"shopify\" %}\n    mutation {\n      bulkOperationRunQuery(\n        query: {{ bulk_operation_query | json }}\n      ) {\n        bulkOperation {\n          id\n          status\n        }\n        userErrors {\n          field\n          message\n        }\n      }\n    }\n  {% endaction %}\n\n{% elsif event.topic == \"mechanic/shopify/bulk_operation\" %}\n  {% if event.preview %}\n    {% capture jsonl_string %}\n      {\"__typename\":\"Customer\",\"id\":\"gid://shopify/Customer/1234567890\"}\n      {\"__typename\":\"Order\",\"publication\":{\"id\":\"gid://shopify/Publication/1234567890\"},\"__parentId\":\"gid://shopify/Customer/1234567890\"}\n    {% endcapture %}\n\n    {% assign bulkOperation = hash %}\n    {% assign bulkOperation[\"objects\"] = jsonl_string | parse_jsonl %}\n  {% endif %}\n\n  {% assign customers = bulkOperation.objects | where: \"__typename\", \"Customer\" %}\n  {% assign orders = bulkOperation.objects | where: \"__typename\", \"Order\" %}\n\n  {% assign publication_counts = hash %}\n\n  {% for order in orders %}\n    {% assign order_publication_id = order.publication.id %}\n    {% assign publication_name = publication_names_by_id[order_publication_id] %}\n\n    {% if publication_name == blank %}\n      {% assign publication_name = \"(not placed via a configured sales channel)\" %}\n    {% endif %}\n\n    {% assign publication_counts[publication_name] = publication_counts[publication_name] | plus: 1 %}\n  {% endfor %}\n\n  {% log publication_counts: publication_counts %}\n\n  {% if test_mode %}\n    {% assign summaries = array %}\n  {% endif %}\n\n  {% comment %}\n    -- process customers to see which should be tagged\n  {% endcomment %}\n\n  {% for customer in customers %}\n    {% assign customer_orders = orders | where: \"__parentId\", customer.id %}\n\n    {% comment %}\n      -- determine all sales channels this customer has ordered through\n    {% endcomment %}\n\n    {% assign customer_publication_names = array %}\n\n    {% for order in customer_orders %}\n      {% assign order_publication_id = order.publication.id %}\n      {% assign publication_name = publication_names_by_id[order_publication_id] %}\n\n      {% if publication_name == blank %}\n        {% continue %}\n      {% endif %}\n\n      {% unless customer_publication_names contains publication_name %}\n        {% assign customer_publication_names = customer_publication_names | push: publication_name %}\n      {% endunless %}\n    {% endfor %}\n\n    {% comment %}\n      -- assign tags by configured sales channels\n    {% endcomment %}\n\n    {% assign tags_to_add = array %}\n\n    {% for publication_name in customer_publication_names %}\n      {% assign tag = sales_channel_names_and_tags[publication_name] %}\n\n      {% if tag == blank or customer.tags contains tag %}\n        {% continue %}\n      {% endif %}\n\n      {% assign tags_to_add = tags_to_add | push: tag %}\n    {% endfor %}\n\n    {% if tags_to_add != blank %}\n      {% if test_mode %}\n        {% assign summary = hash %}\n        {% assign summary[\"customer_id\"] = customer.id %}\n        {% assign summary[\"customer_publication_names\"] = customer_publication_names %}\n        {% assign summary[\"customer_tags_to_add\"] = tags_to_add %}\n        {% assign summaries = summaries | push: summary %}\n\n      {% else %}\n        {% action \"shopify\" %}\n          mutation {\n            tagsAdd(\n              id: {{ customer.id | json }}\n              tags: {{ tags_to_add | uniq | json }}\n            ) {\n              userErrors {\n                field\n                message\n              }\n            }\n          }\n        {% endaction %}\n      {% endif %}\n    {% endif %}\n  {% endfor %}\n\n  {% if test_mode %}\n    {% log summaries %}\n  {% endif %}\n{% endif %}\n",
  "subscriptions": [
    "shopify/orders/create",
    "mechanic/user/trigger",
    "mechanic/shopify/bulk_operation"
  ],
  "subscriptions_template": "shopify/orders/create\nmechanic/user/trigger\nmechanic/shopify/bulk_operation",
  "tags": [
    "Auto-Tag",
    "Customers",
    "Sales Channel"
  ]
}
