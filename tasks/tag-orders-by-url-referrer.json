{
  "name": "Tag online orders by their ?ref= referral codes",
  "options": {
    "query_parameter_name__required": "ref",
    "cart_attribute_name__required": "Referral code",
    "tag_customer_with_parameter_value__boolean": false,
    "only_tag_the_customer_for_their_first_order__boolean": false
  },
  "subscriptions": [
    "shopify/orders/create"
  ],
  "subscriptions_template": "shopify/orders/create",
  "script": "{% comment %}\n  An opinion about option order\n\n  {{ options.query_parameter_name__required }}\n  {{ options.cart_attribute_name__required }}\n  {{ options.tag_customer_with_parameter_value__boolean }}\n  {{ options.only_tag_the_customer_for_their_first_order__boolean }}\n{% endcomment %}\n\n{% if event.preview %}\n  {% assign order = hash %}\n  {% assign order[\"admin_graphql_api_id\"] = \"gid://shopify/Order/1234567890\" %}\n  {% assign order[\"note_attributes\"] = hash %}\n  {% assign order[\"note_attributes\"][options.cart_attribute_name__required] = \"ABC123\" %}\n  {% assign order[\"customer\"] = hash %}\n  {% assign order[\"customer\"][\"admin_graphql_api_id\"] = \"gid://shopify/Customer/1234567890\" %}\n{% endif %}\n\n{% assign value = order.note_attributes[options.cart_attribute_name__required] %}\n{% if value == blank %}\n  {% log message: \"This order did not have the specified cart attribute - nothing to do.\", attributes: order.note_attributes %}\n{% else %}\n  {% assign order_tags = order.tags | split: \", \" %}\n  {% unless order_tags contains value %}\n    {% action \"shopify\" %}\n      mutation {\n        tagsAdd(\n          id: {{ order.admin_graphql_api_id | json }}\n          tags: {{ value | json }}\n        ) {\n          userErrors {\n            field\n            message\n          }\n        }\n      }\n    {% endaction %}\n  {% endunless %}\n{% endif %}\n\n{% if options.tag_customer_with_parameter_value__boolean %}\n  {% assign customer_qualifies = true %}\n\n  {% assign customer_tags = order.customer.tags | split: \", \" %}\n  {% if customer_tags contains value %}\n    {% assign customer_qualifies = false %}\n  {% endif %}\n\n  {% if options.only_tag_the_customer_for_their_first_order__boolean %}\n    {% comment %}\n      We go the long way about this, because (a) in a test store,\n      Shopify is not incrementing customer.orders_count, and (b)\n      it does not seem like the order reliably exists for retrieval\n      the instant it is placed. This way, we can mark the customer\n      as qualified if there are no orders, or if there is an order\n      and this is it.\n    {% endcomment %}\n\n    {% capture query %}\n      query {\n        customer(id: {{ order.customer.admin_graphql_api_id | json }}) {\n          tags\n          orders(first: 1) {\n            pageInfo {\n              hasNextPage\n            }\n            edges {\n              node {\n                id\n              }\n            }\n          }\n        }\n      }\n    {% endcapture %}\n\n    {% assign result = query | shopify %}\n\n    {% if event.preview %}\n      {% capture result_json %}\n        {\n          \"data\": {\n            \"customer\": {\n              \"tags\": [],\n              \"orders\": {\n                \"pageInfo\": {\n                  \"hasNextPage\": false\n                },\n                \"edges\": [\n                  {\n                    \"node\": {\n                      \"id\": {{ order.admin_graphql_api_id | json }}\n                    }\n                  }\n                ]\n              }\n            }\n          }\n        }\n      {% endcapture %}\n\n      {% assign result = result_json | parse_json %}\n    {% endif %}\n\n    {% if result.data.customer.orders.pageInfo.hasNextPage %}\n      {% assign customer_qualifies = false %}\n    {% elsif result.data.customer.orders.edges != empty and result.data.customer.orders.edges.first.node.id != order.admin_graphql_api_id %}\n      {% assign customer_qualifies = false %}\n    {% endif %}\n  {% endif %}\n\n  {% if customer_qualifies and value != blank %}\n    {% action \"shopify\" %}\n      mutation {\n        tagsAdd(\n          id: {{ order.customer.admin_graphql_api_id | json }}\n          tags: {{ value | json }}\n        ) {\n          userErrors {\n            field\n            message\n          }\n        }\n      }\n    {% endaction %}\n  {% endif %}\n{% endif %}",
  "docs": "Have your traffic sources refer customers using ?ref=referral-code-here URLs (using the query parameter of your choice), then use this task to automatically tag each customer's order according to the referral value they arrived with. Optionally, tag the customer as well.\n\nThis task adds JavaScript to your storefront, which adds referral parameters (using the query parameter of your choice) to the customer's cart (using the cart attribute name of your choice). (Referral values are saved in a browser cookie for one year.) When the corresponding order is created, this task copies the cart attribute over to the order's tags. Optionally, select to have the value applied to the customer as a tag as well.",
  "halt_action_run_sequence_on_error": false,
  "online_store_javascript": "// https://gist.github.com/bronson/6707533\nvar cookie = function(name, value, ms) {\n    if(arguments.length < 2) {\n        // read cookie\n        var cookies = document.cookie.split(';')\n        for(var i=0; i < cookies.length; i++) {\n            var c = cookies[i].replace(/^\\s+/, '')\n            if(c.indexOf(name+'=') == 0) {\n                return decodeURIComponent(c.substring(name.length+1).split('+').join(' '))    \n            }\n        }\n        return null\n    }\n\n    // write cookie\n    var date = new Date()\n    date.setTime(date.getTime()+ms)\n    document.cookie = name+\"=\" + encodeURIComponent(value) + (ms ? \";expires=\"+date.toGMTString() : '') + \";path=/\"\n}\n\nvar parameterName = {{ options.query_parameter_name__required | json }};\n\nvar valueKeyval = window.location.search.split(/[?&]/).filter(function (keyval) {\n  return keyval.slice(0, parameterName.length) === parameterName;\n})[0];\n\nvar valueFromCookie = cookie(parameterName);\n\nif (valueFromCookie || valueKeyval) {\n  var value = valueFromCookie || valueKeyval.split('=')[1];\n\n  if (!valueFromCookie) {\n    cookie(parameterName, value, 1000*60*60*24*365);\n  }\n\n  var xhr = new XMLHttpRequest();\n  xhr.open('POST', '/cart/update.json', true);\n\n  //Send the proper header information along with the request\n  xhr.setRequestHeader('Content-Type', 'application/json');\n\n  var attributes = {};\n  attributes[{{ options.cart_attribute_name__required | json }}] = value;\n  xhr.send(JSON.stringify({ attributes: attributes }));\n}",
  "order_status_javascript": null,
  "perform_action_runs_in_sequence": false
}
