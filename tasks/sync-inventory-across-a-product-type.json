{
  "name": "Sync inventory across a product type",
  "options": {
    "product_types_to_monitor__array_required": null
  },
  "subscriptions": [
    "mechanic/user/trigger",
    "mechanic/scheduler/10min"
  ],
  "subscriptions_template": "mechanic/user/trigger\nmechanic/scheduler/10min",
  "script": "{% assign product_types = options.product_types_to_monitor__array_required %}\n\n{% if event.topic == \"mechanic/user/trigger\" %}\n  {% for product_type in product_types %}\n    {% assign inventory_list = array %}\n    {% assign cursor = nil %}\n\n    {% for n in (0..100) %}\n      {% capture inventory_query %}\n        query {\n          productVariants(\n            first: 250\n            query: {{ product_type | json | prepend: \"product_type:\" | json }}\n            after: {{ cursor | json }}\n          ) {\n            pageInfo {\n              hasNextPage\n            }\n            edges {\n              node {\n                inventoryQuantity\n              }\n            }\n          }\n        }\n      {% endcapture %}\n\n      {% assign inventory_query_result = inventory_query | shopify %}\n\n      {% if event.preview %}\n        {% capture inventory_query_result_json %}\n          {\n            \"data\": {\n              \"productVariants\": {\n                \"pageInfo\": {\n                  \"hasNextPage\": false\n                },\n                \"edges\": [\n                  {\n                    \"node\": {\n                      \"inventoryQuantity\": 30\n                    }\n                  },\n                  {\n                    \"node\": {\n                      \"inventoryQuantity\": 30\n                    }\n                  },\n                  {\n                    \"node\": {\n                      \"inventoryQuantity\": 30\n                    }\n                  }\n                ]\n              }\n            }\n          }\n        {% endcapture %}\n\n        {% assign inventory_query_result = inventory_query_result_json | parse_json %}\n      {% endif %}\n\n      {% assign inventory_list = inventory_query_result.data.productVariants.edges | map: \"node\" | map: \"inventoryQuantity\" | concat: inventory_list %}\n\n      {% if inventory_query_result.data.productVariants.pageInfo.hasNextPage %}\n        {% assign cursor = inventory_query_result.data.productVariants.edges.last.cursor %}\n        {% continue %}\n      {% endif %}\n\n      {% break %}\n    {% endfor %}\n\n    {% assign inventory_total = inventory_list | sum %}\n    {% assign expected_inventory_total = inventory_list.first | times: inventory_list.size %}\n    {% if inventory_total != expected_inventory_total %}\n      {% error message: \"Not all inventory levels are in sync. Manually ensure everything is at the same level, and try again.\", product_type: product_type %}\n    {% else %}\n      {% assign cache_key = \"inventory_by_product_type:\" | append: product_type | sha256 %}\n      {% action \"cache\", \"set\", cache_key, inventory_list.first %}\n    {% endif %}\n  {% endfor %}\n{% elsif event.topic contains \"mechanic/scheduler/\" %}\n  {% capture primary_location_query %}\n    query {\n      location {\n        id\n      }\n    }\n  {% endcapture %}\n\n  {% assign primary_location_query_result = primary_location_query | shopify %}\n\n  {% if event.preview %}\n    {% capture primary_location_result_json %}\n      {\n        \"data\": {\n          \"location\": {\n            \"id\": \"gid://shopify/Location/1234567890\"\n          }\n        }\n      }\n    {% endcapture %}\n\n    {% assign primary_location_query_result = primary_location_result_json | parse_json %}\n  {% endif %}\n\n  {% assign primary_location_id = primary_location_query_result.data.location.id %}\n\n  {% for product_type in product_types %}\n    {% assign cache_key = \"inventory_by_product_type:\" | append: product_type | sha256 %}\n    {% assign inventory_old = cache[cache_key] %}\n\n    {% if event.preview %}\n      {% assign inventory_old = 30 %}\n    {% endif %}\n\n    {% if inventory_old == blank %}\n      {% error message: \"The inventory for this product type has not yet been cached. Manually synchronize the inventory for this product type and run this task manually per steps 2 and 3 in the task instructions.\", product_type: product_type %}\n    {% endif %}\n\n    {% assign variants = array %}\n    {% assign cursor = nil %}\n\n    {% assign variants = array %}\n\n    {% for n in (0..100) %}\n      {% capture inventory_query %}\n        query {\n          productVariants(\n            first: 250\n            query: {{ product_type | json | prepend: \"product_type:\" | json }}\n            after: {{ cursor | json }}\n          ) {\n            pageInfo {\n              hasNextPage\n            }\n            edges {\n              node {\n                inventoryQuantity\n                inventoryItem {\n                  id\n                }\n              }\n              cursor\n            }\n          }\n        }\n      {% endcapture %}\n\n      {% assign inventory_query_result = inventory_query | shopify %}\n\n      {% if event.preview %}\n        {% capture inventory_query_result_json %}\n          {\n            \"data\": {\n              \"productVariants\": {\n                \"pageInfo\": {\n                  \"hasNextPage\": false\n                },\n                \"edges\": [\n                  {\n                    \"node\": {\n                      \"inventoryQuantity\": 29,\n                      \"inventoryItem\": {\n                        \"id\": \"gid://shopify/InventoryItem/1234567890\"\n                      }\n                    },\n                    \"cursor\": \"eyJsYXN0X2lkIjozMTcxMTYwMDkwMjI0MSwibGFzdF92YWx1ZSI6IjMxNzExNjAwOTAyMjQxIn0=\"\n                  },\n                  {\n                    \"node\": {\n                      \"inventoryQuantity\": 25,\n                      \"inventoryItem\": {\n                        \"id\": \"gid://shopify/InventoryItem/2345678901\"\n                      }\n                    },\n                    \"cursor\": \"eyJsYXN0X2lkIjozMTcxMTYwMTgxOTc0NSwibGFzdF92YWx1ZSI6IjMxNzExNjAxODE5NzQ1In0=\"\n                  },\n                  {\n                    \"node\": {\n                      \"inventoryQuantity\": 30,\n                      \"inventoryItem\": {\n                        \"id\": \"gid://shopify/InventoryItem/3456789012\"\n                      }\n                    },\n                    \"cursor\": \"eyJsYXN0X2lkIjozMTcxMzYwNDc2Mzc0NSwibGFzdF92YWx1ZSI6IjMxNzEzNjA0NzYzNzQ1In0=\"\n                  }\n                ]\n              }\n            }\n          }\n        {% endcapture %}\n\n        {% assign inventory_query_result = inventory_query_result_json | parse_json %}\n      {% endif %}\n\n      {% assign variants = inventory_query_result.data.productVariants.edges | map: \"node\" | concat: variants %}\n\n      {% if inventory_query_result.data.productVariants.pageInfo.hasNextPage %}\n        {% assign cursor = inventory_query_result.data.productVariants.edges.last.cursor %}\n        {% continue %}\n      {% endif %}\n\n      {% break %}\n    {% endfor %}\n\n    {% assign inventory_list = variants | map: \"inventoryQuantity\" %}\n    {% assign inventory_total_old = inventory_old | times: inventory_list.size %}\n    {% assign inventory_total_new = inventory_list | sum %}\n    {% assign inventory_total_diff = inventory_total_new | minus: inventory_total_old %}\n    {% assign inventory_new = inventory_old | plus: inventory_total_diff %}\n\n    {% log inventory_old: inventory_old, inventory_total_old: inventory_total_old, inventory_total_new: inventory_total_new, inventory_total_diff: inventory_total_diff, inventory_new: inventory_new, product_type: product_type, variants_count: variants.size, variants: variants %}\n\n    {% if inventory_new == inventory_old %}\n      {% log message: \"No inventory adjustments needed\" %}\n    {% else %}\n      {% action \"cache\", \"set\", cache_key, inventory_new %}\n\n      {% assign inventory_item_adjustments = array %}\n\n      {% for variant in variants %}\n        {% assign adjustment = hash %}\n        {% assign adjustment[\"inventoryItemId\"] = variant.inventoryItem.id %}\n        {% assign adjustment[\"availableDelta\"] = inventory_new | minus: variant.inventoryQuantity %}\n        {% assign index = inventory_item_adjustments.size %}\n        {% assign inventory_item_adjustments[index] = adjustment %}\n      {% endfor %}\n\n      {% assign batch_size = 100 %}\n      {% assign batch_count = inventory_item_adjustments.size | times: 1.0 | divided_by: batch_size | ceil %}\n      {% for n in (1..batch_count) %}\n        {% assign batch = array %}\n        {% assign start_index = batch_size | times: forloop.index0 %}\n        {% assign stop_index = start_index | plus: batch_size | minus: 1 %}\n\n        {% for m in (start_index..stop_index) %}\n          {% if inventory_item_adjustments[m] %}\n            {% assign batch[batch.size] = inventory_item_adjustments[m] %}\n          {% endif %}\n        {% endfor %}\n\n        {% action \"shopify\" %}\n          mutation {\n            inventoryBulkAdjustQuantityAtLocation(\n              inventoryItemAdjustments: {{ batch | graphql_arguments }}\n              locationId: {{ primary_location_id | json }}\n            ) {\n              inventoryLevels {\n                id\n              }\n              userErrors {\n                field\n                message\n              }\n            }\n          }\n        {% endaction %}\n      {% endfor %}\n    {% endif %}\n  {% endfor %}\n{% endif %}",
  "docs": "Useful for custom orders, this task lets you offer multiple product and variant listings for what is ultimately the same stock. A purchase for a single product leads to the inventory for all other listings, of the same product type, being lowered by the amount ordered.\n\n### Getting started\r\n\r\n1. Populate the list of product types that you'd like this task to monitor.\r\n2. In the Shopify admin, navigate to the Products > Inventory area. For the first product type that you've chosen, search for all inventory items with that specific type, and ensure that all inventory items are at the same level. Repeat for each additional product type you're using.\r\n3. Back in Mechanic, click the \"Run task\" button. Mechanic will scan your product types, and cache the current inventory level for each one.\r\n4. Wait! :) Every ten minutes, Mechanic will check your inventory, and make any adjustments necessary to keep everything in sync. For example, if three different inventory items - within the same product type - are each sold three different times, Mechanic will ensure that each of those items are lowered by a further 6, and that all others are lowered by 9.\r\n\r\n### Notes\r\n\r\n* This task only works with a single location. Multiple locations are not supported.\r\n* By default, Mechanic will check your inventory every 10 minutes. Feel free to change that subscription to \"mechanic/scheduler/hourly\", or [something else that suits your needs](https://help.usemechanic.com/events/all-event-topics#mechanic).",
  "halt_action_run_sequence_on_error": false,
  "online_store_javascript": null,
  "order_status_javascript": null,
  "perform_action_runs_in_sequence": false
}
