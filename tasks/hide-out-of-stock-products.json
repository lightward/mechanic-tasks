{
  "docs": "This task monitors inventory updates, and pulls the product from the configured sales channels whenever a product's total inventory meets your \"out of stock\" threshold. Optionally, it'll send you an email when it does so. You may also choose whether to further refine the products being considered by this task by configuring inclusion or exclusion tags  (Note: exclusion tags will always take precedence over inclusion tags).\n\nThis task can also be run manually, to scan all products in the shop.\n\nIf you'd like to wait until the product has been out of stock for several days, use this task instead: [Unpublish products that have been out of stock for x days](https://tasks.mechanic.dev/unpublish-products-that-have-been-out-of-stock-for-x-days).",
  "halt_action_run_sequence_on_error": false,
  "name": "Hide out-of-stock products",
  "online_store_javascript": null,
  "options": {
    "out_of_stock_inventory_quantity__number_required": "0",
    "sales_channel_names__required_array": [
      "Online Store"
    ],
    "only_include_products_with_any_of_these_tags__array": null,
    "always_exclude_products_with_any_of_these_tags__array": null,
    "email_notification_recipient__email": null
  },
  "order_status_javascript": null,
  "perform_action_runs_in_sequence": false,
  "script": "{% assign out_of_stock_inventory_quantity = options.out_of_stock_inventory_quantity__number_required %}\n{% assign sales_channel_names = options.sales_channel_names__required_array %}\n{% assign inclusion_tags = options.only_include_products_with_any_of_these_tags__array %}\n{% assign exclusion_tags = options.always_exclude_products_with_any_of_these_tags__array %}\n{% assign email_notification_recipient = options.email_notification_recipient__email %}\n\n{% comment %}\n  -- get all of the sales channels in the shop\n{% endcomment %}\n\n{% capture query %}\n  query {\n    publications(first: 250) {\n      nodes {\n        id\n        name\n      }\n    }\n  }\n{% endcapture %}\n\n{% assign result = query | shopify %}\n\n{% assign publication_ids = array %}\n{% assign publication_names_by_id = hash %}\n\n{% for publication in result.data.publications.nodes %}\n  {% if sales_channel_names contains publication.name %}\n    {% assign publication_ids[publication_ids.size] = publication.id %}\n    {% assign publication_names_by_id[publication.id] = publication.name %}\n  {% endif %}\n{% endfor %}\n\n{% comment %}\n  -- make sure the configured sales channel names match what is in the shop; send alert email otherwise\n{% endcomment %}\n\n{% unless event.preview %}\n  {% assign available_channels = result.data.publications.nodes | map: \"name\" %}\n\n  {% if publication_ids.size != sales_channel_names.size %}\n    {% error\n      message: \"Each sales channel configured in this task must exist in the shop. Check the list of available channels and verify each configured channel exists.\",\n      available_sales_channel_names: available_channels,\n      configured_sales_channel_names: sales_channel_names\n    %}\n  {% endif %}\n{% endunless %}\n\n{% if event.preview %}\n  {% action \"shopify\" %}\n    mutation {\n      publishableUnpublish1: publishableUnpublish(\n        id: \"gid://shopify/Product/1234567890\"\n        input: {\n          publicationId: \"gid://shopify/Publication/1234567809\"\n        }\n      ) {\n        userErrors {\n          field\n          message\n        }\n      }\n    }\n  {% endaction %}\n\n  {% if email_notification_recipient != blank %}\n    {% capture email_subject %}\n      Out of stock: Short Sleeve T-shirt\n    {% endcapture %}\n\n    {% capture email_body %}\n      Hi there,\n\n      Your product is out of stock!\n\n      <a href=\"https://{{ shop.domain }}/admin/products/12345\">Manage this product</a>\n\n      Thanks,\n      - Mechanic, for {{ shop.name }}\n    {% endcapture %}\n\n    {% action \"email\" %}\n      {\n        \"to\": {{ email_notification_recipient | json }},\n        \"subject\": {{ email_subject | unindent | strip | json }},\n        \"body\": {{ email_body | unindent | strip | newline_to_br | json }}\n      }\n    {% endaction %}\n  {% endif %}\n\n{% elsif event.topic == \"mechanic/user/trigger\" %}\n  {% assign unpublished_product_links = array %}\n  {% assign cursor = nil %}\n  {% assign search_query = out_of_stock_inventory_quantity | prepend: \"inventory_total:<=\" %}\n\n  {% comment %}\n    -- if inclusion or exclusion tags are configured, use them to refine the search query in order to reduce the number of products to be processed\n  {% endcomment %}\n\n  {% if inclusion_tags != blank %}\n    {% assign inclusion_tag_filters = array %}\n\n    {% for inclusion_tag in inclusion_tags %}\n      {% assign inclusion_tag_filter\n        = inclusion_tag\n        | json\n        | prepend: \"tag:\"\n      %}\n      {% assign inclusion_tag_filters = inclusion_tag_filters | push: inclusion_tag_filter %}\n    {% endfor %}\n\n    {% capture search_query %}{{ search_query }} AND ({{ inclusion_tag_filters | join: \" OR \" }}){% endcapture %}\n  {% endif %}\n\n  {% if exclusion_tags != blank %}\n    {% assign exclusion_tag_filters = array %}\n\n    {% for exclusion_tag in exclusion_tags %}\n      {% assign exclusion_tag_filter\n        = exclusion_tag\n        | json\n        | prepend: \"tag_not:\"\n      %}\n      {% assign exclusion_tag_filters = exclusion_tag_filters | push: exclusion_tag_filter %}\n    {% endfor %}\n\n    {% capture search_query -%}\n      {{ search_query }} AND {{ exclusion_tag_filters | join: \" AND \" }}\n    {%- endcapture %}\n  {% endif %}\n\n  {% log search_query: search_query %}\n\n  {% comment %}\n    -- use paginated query to get all products in the shop at or below the inventory threshold, optionaly filtered by inclusion or exclusion tags\n  {% endcomment %}\n\n  {% for n in (0..100) %}\n    {% capture query %}\n      query {\n        products(\n          first: 250\n          after: {{ cursor | json }}\n          query: {{ search_query | json }}\n        ) {\n          pageInfo {\n            hasNextPage\n            endCursor\n          }\n          nodes {\n            id\n            legacyResourceId\n            title\n            totalInventory\n            tags\n            {% for publication_id in publication_ids %}\n              published{{ forloop.index }}: publishedOnPublication(publicationId: {{ publication_id | json }})\n            {% endfor %}\n          }\n        }\n      }\n    {% endcapture %}\n\n    {% assign result = query | shopify %}\n\n    {% comment %}\n      -- process this batch of returned products, unpublishing as needed and saving links for optional email output\n    {% endcomment %}\n\n    {% for product in result.data.products.nodes %}\n      {% assign mutations = array %}\n      {% assign publication_names = array %}\n\n      {% for publication_id in publication_ids %}\n        {% assign key = \"published\" | append: forloop.index %}\n\n        {% if product[key] == false %}\n          {% continue %}\n        {% endif %}\n\n        {% assign publication_names[publication_names.size] = publication_names_by_id[publication_id] %}\n\n        {% capture mutation %}\n          publishableUnpublish{{ forloop.index}}: publishableUnpublish(\n            id: {{ product.id | json }}\n            input: {\n              publicationId: {{ publication_id | json }}\n            }\n          ) {\n            userErrors {\n              field\n              message\n            }\n          }\n        {% endcapture %}\n\n        {% assign mutations[mutations.size] = mutation %}\n      {% endfor %}\n\n      {% if mutations != empty %}\n        {% action \"shopify\" %}\n          mutation {\n            {{ mutations | join: newline }}\n          }\n        {% endaction %}\n\n        {% capture link %}<li><a href=\"https://{{ shop.domain }}/admin/products/{{ product.legacyResourceId }}\">{{ product.title }}</a> ({{ product.totalInventory }} - unpublished from {{ publication_names | join: \", \" }})</li>{% endcapture %}\n\n        {% assign unpublished_product_links[unpublished_product_links.size] = link %}\n      {% endif %}\n    {% endfor %}\n\n    {% if result.data.products.pageInfo.hasNextPage %}\n      {% assign cursor = result.data.products.pageInfo.endCursor %}\n    {% else %}\n      {% break %}\n    {% endif %}\n  {% endfor %}\n\n  {% if unpublished_product_links == blank %}\n    {% log \"No products qualified to be unpublished during this task run.\" %}\n    {% break %}\n  {% endif %}\n\n  {% if email_notification_recipient != blank %}\n    {% capture email_subject %}\n      Found {{ unpublished_product_links.size }} {{ unpublished_product_links.size | pluralize: \"product\", \"products\" }} out of stock\n    {% endcapture %}\n\n    {% capture email_body %}\n      Hi there,\n      <br><br>\n      These products were found to be under your out of stock minimum quantity ({{ out_of_stock_inventory_quantity }}), when adding up the inventory for each product.\n      <br>\n      <ul>{{ unpublished_product_links | join: \"\" }}</ul>\n      <br>\n      Thanks,\n      <br>\n      - Mechanic, for {{ shop.name }}\n    {% endcapture %}\n\n    {% action \"email\" %}\n      {\n        \"to\": {{ email_notification_recipient | json }},\n        \"subject\": {{ email_subject | unindent | strip | json }},\n        \"body\": {{ email_body | unindent | strip | json }}\n      }\n    {% endaction %}\n  {% endif %}\n\n{% elsif event.topic contains \"shopify/inventory_levels/\" %}\n  {% comment %}\n    -- query the inventory level to get the product data needed for this task\n  {% endcomment %}\n\n  {% capture query %}\n    query {\n      inventoryLevel(\n        id: {{ inventory_level.admin_graphql_api_id | json }}\n      ) {\n        item {\n          variant {\n            product {\n              id\n              legacyResourceId\n              title\n              totalInventory\n              tags\n              {% for publication_id in publication_ids %}\n                published{{ forloop.index }}: publishedOnPublication(publicationId: {{ publication_id | json }})\n              {% endfor %}\n            }\n          }\n        }\n      }\n    }\n  {% endcapture %}\n\n  {% assign result = query | shopify %}\n\n  {% assign product = result.data.inventoryLevel.item.variant.product %}\n\n  {% comment %}\n    -- check to see if product is included or excluded (i.e. whether to process) by any configured tags\n  {% endcomment %}\n\n  {% assign product_included_by_tag = nil %}\n  {% assign product_excluded_by_tag = nil %}\n\n  {% if inclusion_tags != blank %}\n    {% for inclusion_tag in inclusion_tags %}\n      {% if product.tags contains inclusion_tag %}\n        {% assign product_included_by_tag = true %}\n      {% endif %}\n    {% endfor %}\n  {% endif %}\n\n  {% if exclusion_tags != blank %}\n    {% for exclusion_tag in exclusion_tags %}\n      {% if product.tags contains exclusion_tag %}\n        {% assign product_excluded_by_tag = true %}\n      {% endif %}\n    {% endfor %}\n  {% endif %}\n\n  {% comment %}\n    -- check if a product has been excluded first, then only if there are inclusion tags configured check if it has been included\n  {% endcomment %}\n\n  {% if product_excluded_by_tag %}\n    {% log\n      message: \"Product was excluded by a configured tag and will not be processed by this task.\",\n      exclusion_tags: exclusion_tags,\n      product: product\n    %}\n    {% break %}\n\n  {% elsif inclusion_tags != blank %}\n    {% unless product_included_by_tag %}\n      {% log\n        message: \"Product was not included by any configured tag and will not be processed by this task.\",\n        inclusion_tags: inclusion_tags,\n        product: product\n      %}\n      {% break %}\n    {% endunless %}\n  {% endif %}\n\n  {% comment %}\n    -- unpublish the product from the configured sales channels if it is at or below the configured out of stock threshold and optioanlly send email notification\n  {% endcomment %}\n\n  {% if product.totalInventory <= out_of_stock_inventory_quantity %}\n    {% assign mutations = array %}\n    {% assign publication_names = array %}\n\n    {% for publication_id in publication_ids %}\n      {% assign key = \"published\" | append: forloop.index %}\n\n      {% if product[key] == false %}\n        {% continue %}\n      {% endif %}\n\n      {% assign publication_names[publication_names.size] = publication_names_by_id[publication_id] %}\n\n      {% capture mutation %}\n        publishableUnpublish{{ forloop.index}}: publishableUnpublish(\n          id: {{ product.id | json }}\n          input: {\n            publicationId: {{ publication_id | json }}\n          }\n        ) {\n          userErrors {\n            field\n            message\n          }\n        }\n      {% endcapture %}\n\n      {% assign mutations[mutations.size] = mutation %}\n    {% endfor %}\n\n    {% if mutations != empty %}\n      {% action \"shopify\" %}\n        mutation {\n          {{ mutations | join: newline }}\n        }\n      {% endaction %}\n\n      {% if email_notification_recipient != blank %}\n        {% capture email_subject %}\n          Out of stock: {{ product.title }}\n        {% endcapture %}\n\n        {% capture email_body %}\n          Hi there,\n\n          Your product is out of stock! This product has been unpublished from: {{ publication_names | join: \", \" }}.\n\n          <a href=\"https://{{ shop.domain }}/admin/products/{{ product.legacyResourceId }}\">Manage this product</a>\n\n          Thanks,\n          - Mechanic, for {{ shop.name }}\n        {% endcapture %}\n\n        {% action \"email\" %}\n          {\n            \"to\": {{ email_notification_recipient | json }},\n            \"subject\": {{ email_subject | unindent | strip | json }},\n            \"body\": {{ email_body | unindent | strip | newline_to_br | json }}\n          }\n        {% endaction %}\n      {% endif %}\n    {% endif %}\n  {% endif %}\n{% endif %}\n",
  "subscriptions": [
    "mechanic/user/trigger",
    "shopify/inventory_levels/update"
  ],
  "subscriptions_template": "mechanic/user/trigger\nshopify/inventory_levels/update",
  "tags": [
    "Out of Stock",
    "Products",
    "Unpublish"
  ]
}
