{
  "name": "Hide out-of-stock products",
  "options": {
    "sales_channel_names__required_array": [
      "Online Store"
    ],
    "email_notification_recipient__email": "",
    "out_of_stock_inventory_quantity__number_required": "0"
  },
  "subscriptions": [
    "mechanic/user/trigger",
    "shopify/inventory_levels/update"
  ],
  "subscriptions_template": "mechanic/user/trigger\nshopify/inventory_levels/update",
  "script": "{% capture query %}\n  query {\n    publications(first: 250) {\n      edges {\n        node {\n          id\n          name\n        }\n      }\n    }\n  }\n{% endcapture %}\n\n{% assign result = query | shopify %}\n\n{% assign publication_ids = array %}\n{% assign publication_names_by_id = hash %}\n\n{% for publication_edge in result.data.publications.edges %}\n  {% if options.sales_channel_names__required_array contains publication_edge.node.name %}\n    {% assign publication_ids[publication_ids.size] = publication_edge.node.id %}\n    {% assign publication_names_by_id[publication_edge.node.id] = publication_edge.node.name %}\n  {% endif %}\n{% endfor %}\n\n{% unless event.preview %}\n  {% assign available_channels = result.data.publications.edges | map: \"node\" | map: \"name\" %}\n  {% if publication_ids.size != options.sales_channel_names__required_array.size %}\n    {% error message: \"Didn't find all configured sales channels. Please check the list of available channels, and compare it with the list of configured channels.\", available_channels: available_channels, configured_channels: options.sales_channel_names__required_array %}\n  {% endif %}\n{% endunless %}\n\n{% if event.preview %}\n  {% action \"shopify\" %}\n    mutation {\n      publishableUnpublish1: publishableUnpublish(\n        id: \"gid://shopify/Product/1234567890\"\n        input: {\n          publicationId: \"gid://shopify/Publication/1234567809\"\n        }\n      ) {\n        userErrors {\n          field\n          message\n        }\n      }\n    }\n  {% endaction %}\n\n  {% if options.email_notification_recipient__email != blank %}\n    {% capture email_subject %}\n      Out of stock: Short Sleeve T-shirt\n    {% endcapture %}\n\n    {% capture email_body %}\n      Hi there,\n\n      Your product is out of stock!\n\n      <a href=\"https://{{ shop.domain }}/admin/products/12345\">Manage this product</a>\n\n      Thanks,\n      - Mechanic, for {{ shop.name }}\n    {% endcapture %}\n\n    {% action \"email\" %}\n      {\n        \"to\": {{ options.email_notification_recipient__email | json }},\n        \"subject\": {{ email_subject | unindent | strip | json }},\n        \"body\": {{ email_body | unindent | strip | newline_to_br | json }}\n      }\n    {% endaction %}\n  {% endif %}\n{% elsif event.topic == \"mechanic/user/trigger\" %}\n  {% assign unpublished_product_links = array %}\n  {% assign cursor = nil %}\n\n  {% for n in (0..100) %}\n    {% capture query %}\n      query {\n        products(\n          first: 250\n          after: {{ cursor | json }}\n        ) {\n          pageInfo {\n            hasNextPage\n          }\n          edges {\n            cursor\n            node {\n              id\n              legacyResourceId\n              title\n              totalInventory\n\n              {% for publication_id in publication_ids %}\n                published{{ forloop.index }}: publishedOnPublication(publicationId: {{ publication_id | json }})\n              {% endfor %}\n            }\n          }\n        }\n      }\n    {% endcapture %}\n\n    {% assign result = query | shopify %}\n\n    {% for edge in result.data.products.edges %}\n      {% assign product_node = edge.node %}\n\n      {% if product_node.totalInventory > options.out_of_stock_inventory_quantity__number_required %}\n        {% continue %}\n      {% endif %}\n\n      {% assign mutations = array %}\n      {% assign publication_names = array %}\n\n      {% for publication_id in publication_ids %}\n        {% assign key = \"published\" | append: forloop.index %}\n        {% if product_node[key] == false %}\n          {% continue %}\n        {% endif %}\n\n        {% assign publication_names[publication_names.size] = publication_names_by_id[publication_id] %}\n\n        {% capture mutation %}\n          publishableUnpublish{{ forloop.index}}: publishableUnpublish(\n            id: {{ product_node.id | json }}\n            input: {\n              publicationId: {{ publication_id | json }}\n            }\n          ) {\n            userErrors {\n              field\n              message\n            }\n          }\n        {% endcapture %}\n        {% assign mutations[mutations.size] = mutation %}\n      {% endfor %}\n\n      {% if mutations != empty %}\n        {% action \"shopify\" %}\n          mutation {\n            {{ mutations | join: newline }}\n          }\n        {% endaction %}\n\n        {% capture link %}<li><a href=\"https://{{ shop.domain }}/admin/products/{{ product_node.legacyResourceId }}\">{{ product_node.title }}</a> ({{ product_node.totalInventory }} - unpublished from {{ publication_names | join: \", \" }})</li>{% endcapture %}\n        {% assign unpublished_product_links[unpublished_product_links.size] = link %}\n      {% endif %}\n    {% endfor %}\n\n    {% if result.data.products.pageInfo.hasNextPage %}\n      {% assign cursor = result.data.products.edges.last.cursor %}\n    {% else %}\n      {% break %}\n    {% endif %}\n  {% endfor %}\n\n  {% if unpublished_product_links != empty and options.email_notification_recipient__email != blank %}\n    {% capture email_subject %}\n      Found {{ unpublished_product_links.size }} {{ unpublished_product_links.size | pluralize: \"product\", \"products\" }} out of stock\n    {% endcapture %}\n\n    {% capture email_body %}\n      Hi there,\n      <br><br>\n      These products were found to be under your out of stock minimum quantity ({{ options.out_of_stock_inventory_quantity__number_required }}), when adding up the inventory for each product.\n      <br>\n      <ul>{{ unpublished_product_links | join: \"\" }}</ul>\n      <br>\n      Thanks,\n      <br>\n      - Mechanic, for {{ shop.name }}\n    {% endcapture %}\n\n    {% action \"email\" %}\n      {\n        \"to\": {{ options.email_notification_recipient__email | json }},\n        \"subject\": {{ email_subject | unindent | strip | json }},\n        \"body\": {{ email_body | unindent | strip | json }}\n      }\n    {% endaction %}\n  {% endif %}\n{% elsif event.topic contains \"shopify/inventory_levels/\" %}\n  {% capture query %}\n    query {\n      inventoryLevel(\n        id: {{ inventory_level.admin_graphql_api_id | json }}\n      ) {\n        item {\n          variant {\n            product {\n              id\n              legacyResourceId\n              title\n              totalInventory\n\n              {% for publication_id in publication_ids %}\n                published{{ forloop.index }}: publishedOnPublication(publicationId: {{ publication_id | json }})\n              {% endfor %}\n            }\n          }\n        }\n      }\n    }\n  {% endcapture %}\n\n  {% assign result = query | shopify %}\n  {% assign product_node = result.data.inventoryLevel.item.variant.product %}\n\n  {% if product_node.totalInventory <= options.out_of_stock_inventory_quantity__number_required %}\n    {% assign mutations = array %}\n    {% assign publication_names = array %}\n\n    {% for publication_id in publication_ids %}\n      {% assign key = \"published\" | append: forloop.index %}\n      {% if product_node[key] == false %}\n        {% continue %}\n      {% endif %}\n\n      {% assign publication_names[publication_names.size] = publication_names_by_id[publication_id] %}\n\n      {% capture mutation %}\n        publishableUnpublish{{ forloop.index}}: publishableUnpublish(\n          id: {{ product_node.id | json }}\n          input: {\n            publicationId: {{ publication_id | json }}\n          }\n        ) {\n          userErrors {\n            field\n            message\n          }\n        }\n      {% endcapture %}\n      {% assign mutations[mutations.size] = mutation %}\n    {% endfor %}\n\n    {% if mutations != empty %}\n      {% action \"shopify\" %}\n        mutation {\n          {{ mutations | join: newline }}\n        }\n      {% endaction %}\n\n      {% if options.email_notification_recipient__email != blank %}\n        {% capture email_subject %}\n          Out of stock: {{ product_node.title }}\n        {% endcapture %}\n\n        {% capture email_body %}\n          Hi there,\n\n          Your product is out of stock! This product has been unpublished from: {{ publication_names | join: \", \" }}.\n\n          <a href=\"https://{{ shop.domain }}/admin/products/{{ product_node.legacyResourceId }}\">Manage this product</a>\n\n          Thanks,\n          - Mechanic, for {{ shop.name }}\n        {% endcapture %}\n\n        {% action \"email\" %}\n          {\n            \"to\": {{ options.email_notification_recipient__email | json }},\n            \"subject\": {{ email_subject | unindent | strip | json }},\n            \"body\": {{ email_body | unindent | strip | newline_to_br | json }}\n          }\n        {% endaction %}\n      {% endif %}\n    {% endif %}\n  {% endif %}\n{% endif %}",
  "docs": "This task monitors inventory updates, and pulls the product from the selected sales channels whenever a product's total inventory meets your \"out of stock\" threshold. Optionally, it'll send you an email when it does so. This task can also be run manually, to scan all products at once.\n\nThis task monitors inventory updates, and pulls the product from the selected sales channels whenever a product's total inventory meets your \"out of stock\" threshold.\r\n\r\nTo scan your entire catalog for out of stock products, use the \"Run task\" button. Otherwise, this task will run whenever an inventory level is updated.\r\n\r\nIf you'd like to wait until the product has been out of stock for several days, use this task instead: [Unpublish products that have been out of stock for x days](https://usemechanic.com/task/unpublish-products-that-have-been-out-of-stock-for-x-days).",
  "halt_action_run_sequence_on_error": false,
  "online_store_javascript": null,
  "order_status_javascript": null,
  "perform_action_runs_in_sequence": false
}
