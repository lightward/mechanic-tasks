{
  "docs": "This task shows how to call an external API using the HTTP action type to first get a limited page of products, and then paginate through the responses until all of the products are fetched.\n\nFor this demonstration, the free [DummyJSON](https://dummyjson.com/) products resource will be used, which has a pagination method similar to many public REST APIs.\n\nThe ```mechanic/actions/perform``` event contains the results from the API. A decision is made based on the pagination data in the results on whether to make an additional API call. For each additional call, an array of fetched products is passed as [meta](https://learn.mechanic.dev/core/tasks/code/action-objects#meta) so they may all be processed at the end of the paginated calls.\n\n**NOTE: Reading the developer docs for an API is a must to understanding how its specific pagination works.**",
  "halt_action_run_sequence_on_error": false,
  "name": "Demonstration: Query external paginated API",
  "online_store_javascript": null,
  "options": {},
  "perform_action_runs_in_sequence": false,
  "preview_event_definitions": [
    {
      "description": "All fetched products",
      "event_attributes": {
        "topic": "user/demo_paginated_api/fetched_products",
        "data": {
          "fetched_products": [
            {
              "id": 1,
              "sku": "RCH45Q1A",
              "stock": 5
            },
            {
              "id": 2,
              "sku": "MVCFH27F",
              "stock": 44
            }
          ]
        }
      }
    }
  ],
  "script": "{% comment %}\n  -- using the DummyJSON service for this demonstration, with dummy data for 194 products\n  -- using a page limit of 50 should result in 4 calls to the API to get all of the products\n{% endcomment %}\n\n{% assign api_endpoint = \"https://dummyjson.com/products\" %}\n{% assign limit = 50 %}\n\n{% if event.topic == \"mechanic/user/trigger\" %}\n  {% comment %}\n    -- use query parameters to limit the results and only return the id (default), sku, and stock\n  {% endcomment %}\n\n  {%- capture api_endpoint_with_parameters -%}\n    {{ api_endpoint }}?select=sku,stock&limit={{ limit }}\n  {%- endcapture -%}\n\n  {% comment %}\n    -- make the first http get call to the external api\n    -- note: on this first call we can use the standard http action format since we don't yet need to pass meta values (e.g. products)\n  {% endcomment %}\n\n  {% action \"http\" %}\n    {\n      \"method\": \"get\",\n      \"url\": {{ api_endpoint_with_parameters | json }},\n      \"verify\": \"true\",\n      \"error_on_5xx\": \"true\"\n    }\n  {% endaction %}\n\n{% elsif event.topic == \"mechanic/actions/perform\" %}\n  {% comment %}\n    -- create preview stub data to simulate results that indicate there is more data to query\n  {% endcomment %}\n\n  {% if event.preview %}\n    {% capture action_json %}\n      {\n        \"type\": \"http\",\n        \"meta\": null,\n        \"run\": {\n          \"ok\": true,\n          \"result\": {\n            \"status\": 200,\n            \"body\": {\n              \"products\": [\n                {\n                  \"id\": 1,\n                  \"sku\": \"RCH45Q1A\",\n                  \"stock\": 5\n                }\n              ],\n              \"total\": 194,\n              \"skip\": 0,\n              \"limit\": 50\n            }\n          }\n        }\n      }\n    {% endcapture %}\n\n    {% assign action = action_json | parse_json %}\n  {% endif %}\n\n  {% comment %}\n    -- for demonstration purposes, only process http actions that ran successfully\n    -- typically, some error checking would be done here on the status code to see if a different action should be taken (e.g. 429 - Too many requests)\n  {% endcomment %}\n\n  {% unless action.type == \"http\" and action.run.ok and action.run.result.status == 200 %}\n    {% break %}\n  {% endunless %}\n\n  {% comment %}\n    -- assign api results to variables\n  {% endcomment %}\n\n  {% assign result_products = action.run.result.body.products %}\n  {% assign result_total = action.run.result.body.total %}\n  {% assign result_skip = action.run.result.body.skip %}\n  {% assign result_limit = action.run.result.body.limit %}\n\n  {% comment %}\n    -- get products passed in meta if this is not the first call, otherwise default to an empty array\n  {% endcomment %}\n\n  {% assign fetched_products = action.meta.fetched_products | default: array %}\n\n  {% comment %}\n    -- concatenate the new results to the fetched products array\n  {% endcomment %}\n\n  {% assign fetched_products = fetched_products | concat: result_products %}\n\n  {% comment %}\n    -- check to see if another API call should be made\n    -- the DummyJSON API uses limit based pagination with a skip parameter, and the limit returned will indicate the current size\n    -- this means the total objects retrieved so far should be the sum of the returned skip and limit values\n  {% endcomment %}\n\n  {% assign count_products_retrieved = result_skip | plus: result_limit %}\n\n  {% if count_products_retrieved < result_total %}\n    {% comment %}\n      -- we do not yet have the full set of products; log out how many have been retrieved and make the next api call\n      -- note: when accessing an api with low rate limiting, then you may want to use a delay strategy [see tutorial for this demo task for more detail]\n    {% endcomment %}\n\n    {% log\n      count_products_retrieved: count_products_retrieved,\n      total_products_expected: result_total\n    %}\n\n    {%- capture api_endpoint_with_parameters -%}\n      {{ api_endpoint }}?select=sku,stock&limit={{ limit }}&skip={{ count_products_retrieved }}\n    {%- endcapture -%}\n\n    {% comment %}\n      -- in order to pass the array of products retrieved so far, we need to use the http action format that supports passing meta values\n    {% endcomment %}\n\n    {% action %}\n      {\n        \"type\": \"http\",\n        \"options\": {\n          \"method\": \"get\",\n          \"url\": {{ api_endpoint_with_parameters | json }},\n          \"verify\": \"true\",\n          \"error_on_5xx\": \"true\"\n        },\n        \"meta\": {\n          \"fetched_products\": {{ fetched_products | json }}\n        }\n      }\n    {% endaction %}\n\n    {% break %}\n  {% endif %}\n\n  {% comment %}\n    -- we've reached the end of the api results, pass the fetched products array to a custom event for additional processing\n    -- note: the products could be processed here, but using a custom event is a useful indicator in the event logs that the task has finished fetching products\n  {% endcomment %}\n\n  {% action \"event\" %}\n    {\n      \"topic\": \"user/demo_paginated_api/fetched_products\",\n      \"task_id\": {{ task.id | json }},\n      \"data\": {\n        \"fetched_products\":{{ fetched_products | json }}\n      }\n    }\n  {% endaction %}\n\n{% elsif event.topic == \"user/demo_paginated_api/fetched_products\" %}\n  {% comment %}\n    -- for this demo, just log out the fetched products\n  {% endcomment %}\n\n  {% assign fetched_products = event.data.fetched_products %}\n\n  {% log %}\n    \"Fetched {{ fetched_products.size }} products from the external API.\"\n  {% endlog %}\n\n  {% log fetched_products: fetched_products %}\n\n  {% log \"Fetched products would be processed here...\" %}\n{% endif %}\n",
  "subscriptions": [
    "mechanic/user/trigger",
    "mechanic/actions/perform",
    "user/demo_paginated_api/fetched_products"
  ],
  "subscriptions_template": "mechanic/user/trigger\nmechanic/actions/perform\nuser/demo_paginated_api/fetched_products",
  "tags": [
    "Demonstration",
    "External API"
  ]
}
