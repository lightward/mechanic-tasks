{
  "name": "Sync inventory for shared SKUs",
  "options": {
    "product_skus_to_monitor__array_required": null
  },
  "subscriptions": [
    "mechanic/user/trigger",
    "mechanic/scheduler/10min"
  ],
  "subscriptions_template": "mechanic/user/trigger\nmechanic/scheduler/10min",
  "script": "{% assign primary_location = shop.locations[shop.primary_location_id] %}\n{% assign skus = options.product_skus_to_monitor__array_required %}\n{% assign variants_by_sku = hash %}\n\n{% capture search_query %}\nlocation_id:{{ shop.primary_location_id }} AND (sku:{{ skus | join: \" OR sku:\" }})\n{% endcapture %}\n\n{% assign cursor = nil %}\n\n{% for n in (0..100) %}\n  {% capture query %}\n    query {\n      productVariants(\n        first: 250\n        query: {{ search_query | strip_newlines | json }}\n        after: {{ cursor | json }}\n      ) {\n        pageInfo {\n          hasNextPage\n        }\n        edges {\n          cursor\n          node {\n            id\n            sku\n            inventoryItem {\n              id\n              inventoryLevel(locationId: {{ primary_location.admin_graphql_api_id | json }}) {\n                available\n              }\n            }\n          }\n        }\n      }\n    }\n  {% endcapture %}\n\n  {% assign result = query | shopify %}\n\n  {% if event.preview %}\n    {% capture result_json %}\n      {\n        \"data\": {\n          \"productVariants\": {\n            \"edges\": [\n              {\n                \"node\": {\n                  \"id\": \"gid://shopify/ProductVariant/1234567890\",\n                  \"sku\": {{ skus[0] | json }},\n                  \"inventoryItem\": {\n                    \"id\": \"gid://shopify/InventoryItem/1234567890\",\n                    \"inventoryLevel\": {\n                      \"available\": {% if event.topic == \"mechanic/user/trigger\" %}5{% else %}4{% endif %}\n                    }\n                  }\n                }\n              },\n              {\n                \"node\": {\n                  \"id\": \"gid://shopify/ProductVariant/2345678901\",\n                  \"sku\": {{ skus[0] | json }},\n                  \"inventoryItem\": {\n                    \"id\": \"gid://shopify/InventoryItem/2345678901\",\n                    \"inventoryLevel\": {\n                      \"available\": {% if event.topic == \"mechanic/user/trigger\" %}5{% else %}4{% endif %}\n                    }\n                  }\n                }\n              }\n            ]\n          }\n        }\n      }\n    {% endcapture %}\n\n    {% assign result = result_json | parse_json %}\n  {% endif %}\n\n  {% for productVariant_edge in result.data.productVariants.edges %}\n    {% assign variant = productVariant_edge.node %}\n\n    {% if variants_by_sku[variant.sku] == nil %}\n      {% assign variants_by_sku[variant.sku] = array %}\n    {% endif %}\n\n    {% assign _count = variants_by_sku[variant.sku].size %}\n    {% assign variants_by_sku[variant.sku][_count] = variant %}\n  {% endfor %}\n\n  {% if result.data.productVariants.pageInfo.hasNextPage %}\n    {% assign cursor = result.data.productVariants.edges.last.cursor %}\n  {% else %}\n    {% break %}\n  {% endif %}\n{% endfor %}\n\n{% log variants_by_sku: variants_by_sku %}\n\n{% if event.topic == \"mechanic/user/trigger\" %}\n  {% for pair in variants_by_sku %}\n    {% assign sku = pair[0] %}\n    {% assign variants = pair[1] %}\n\n    {% assign expected_inventory_quantity = variants[0].inventoryItem.inventoryLevel.available %}\n    {% for variant in variants %}\n      {% if variant.inventoryItem.inventoryLevel.available != expected_inventory_quantity %}\n        {% error %}\n          {{ \"Expected all \" | append: sku | append: \" variants to have an inventory quantity of \" | append: expected_inventory_quantity | append: \", but not every variant is at this level. Ensure every variant is in sync, and try again.\" | json }}\n        {% enderror %}\n      {% endif %}\n    {% endfor %}\n  {% endfor %}\n\n  {% for pair in variants_by_sku %}\n    {% assign sku = pair[0] %}\n    {% assign variants = pair[1] %}\n\n    {% assign cache_key = task.id | append: \"-\" | append: sku | sha256 %}\n    {% action \"cache\", \"set\", cache_key, variants[0].inventoryItem.inventoryLevel.available %}\n  {% endfor %}\n{% elsif event.topic contains \"mechanic/scheduler/\" %}\n  {% for sku in skus %}\n    {% assign cache_key = task.id | append: \"-\" | append: sku | sha256 %}\n    {% assign cached_inventory_quantity = cache[cache_key] %}\n\n    {% if event.preview %}\n      {% assign cached_inventory_quantity = 5 %}\n    {% endif %}\n\n    {% if cached_inventory_quantity == nil %}\n      {% error %}{{ \"Missing a cached inventory quantity for SKU \" | append: sku | append: \". Make sure all inventory is in sync across all of this task's monitored SKUs, then use the 'Run task' button to cache current inventory quantities.\" | json }}{% enderror %}\n    {% endif %}\n\n    {% assign total_delta = 0 %}\n    {% assign deltas = hash %}\n    {% assign adjustments = array %}\n\n    {% for variant in variants_by_sku[sku] %}\n      {% assign deltas[variant.id] = variant.inventoryItem.inventoryLevel.available | minus: cached_inventory_quantity %}\n      {% assign total_delta = total_delta | plus: deltas[variant.id] %}\n    {% endfor %}\n\n    {% log sku: sku, total_delta: total_delta %}\n\n    {% for variant in variants_by_sku[sku] %}\n      {% assign delta_for_sync = total_delta | minus: deltas[variant.id] %}\n      {% if delta_for_sync != 0 %}\n        {% capture adjustment %}\n          {\n            inventoryItemId: {{ variant.inventoryItem.id | json }}\n            availableDelta: {{ delta_for_sync | json }}\n          }\n        {% endcapture %}\n        {% assign adjustments[adjustments.size] = adjustment %}\n      {% endif %}\n    {% endfor %}\n\n    {% if adjustments != empty %}\n      {% action \"shopify\" %}\n        mutation {\n          inventoryBulkAdjustQuantityAtLocation(\n            inventoryItemAdjustments: [\n              {{ adjustments | join: newline }}\n            ]\n            locationId: {{ primary_location.admin_graphql_api_id | json }}\n          ) {\n            userErrors {\n              field\n              message\n            }\n          }\n        }\n      {% endaction %}\n    {% endif %}\n\n    {% if total_delta != 0 %}\n      {% assign current_inventory_quantity = cached_inventory_quantity | plus: total_delta %}\n      {% action \"cache\", \"set\", cache_key, current_inventory_quantity %}\n    {% endif %}\n  {% endfor %}\n{% endif %}",
  "docs": "This task monitors all variants having a SKU that you configure, and ensures that changes to inventory quantity are reflected across all variants sharing that SKU.\n\nTo set up this task, configure with the SKUs you'd like to monitor, manually synchronize all inventory quantities for those SKUs, then click the \"Run task\" button. This task will take a snapshot of the current inventory quantity for your SKUs. When the task automatically runs, every 10 minutes, it will check for changes to inventory, and ensure that the total change for a SKU is reflected across all product variants having that SKU.\n\n__Note: this task only considers a store's default location when managing inventory.__\n\nYouTube: [How this task was made](https://youtu.be/CoWvIdibz9Y)",
  "halt_action_run_sequence_on_error": false,
  "online_store_javascript": null,
  "order_status_javascript": null,
  "perform_action_runs_in_sequence": false
}
