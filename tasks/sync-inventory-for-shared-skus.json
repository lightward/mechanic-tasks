{
  "docs": "This task monitors all variants having a SKU that you configure, and ensures that changes to the available inventory quantity are reflected across all variants sharing that SKU.\n\nFirst, manually set all available inventory quantities to be equal for each of the SKUs you'd like to monitor. Then manually run this task which will then take a snapshot of the current available inventory quantity for your SKUs. When the task automatically runs, every 10 minutes, it will check for changes to inventory, and ensure that the cumulative change for a SKU is reflected across all product variants sharing that SKU.\n\n**Note:** This task only considers a store's default location when managing inventory.",
  "halt_action_run_sequence_on_error": false,
  "name": "Sync inventory for shared SKUs",
  "online_store_javascript": null,
  "options": {
    "product_skus_to_monitor__array_required": null
  },
  "order_status_javascript": null,
  "perform_action_runs_in_sequence": false,
  "script": "{% assign skus_to_monitor = options.product_skus_to_monitor__array_required %}\n{% assign primary_location = shop.locations[shop.primary_location_id] %}\n\n{% assign query_components = array %}\n\n{% for sku in skus_to_monitor %}\n  {% assign query_components[query_components.size] = sku | json | prepend: \"sku:\" %}\n{% endfor %}\n\n{% capture search_query -%}\n  location_id:{{ shop.primary_location_id }} AND ({{ query_components  | join: \" OR \" }})\n{%- endcapture %}\n\n{% log search_query: search_query %}\n\n{% if event.preview %}\n  {% assign skus_to_monitor = array | push: skus_to_monitor[0] %}\n{% endif %}\n\n{% assign variants_by_sku = hash %}\n{% assign cursor = nil %}\n\n{% for n in (0..200) %}\n  {% capture query %}\n    query {\n      productVariants(\n        first: 200\n        query: {{ search_query | json }}\n        after: {{ cursor | json }}\n      ) {\n        pageInfo {\n          hasNextPage\n          endCursor\n        }\n        nodes {\n          id\n          sku\n          inventoryItem {\n            id\n            inventoryLevel(locationId: {{ primary_location.admin_graphql_api_id | json }}) {\n              quantities(names: \"available\") {\n                name\n                quantity\n              }\n            }\n          }\n        }\n      }\n    }\n  {% endcapture %}\n\n  {% assign result = query | shopify %}\n\n  {% if event.preview %}\n    {% capture result_json %}\n      {\n        \"data\": {\n          \"productVariants\": {\n            \"nodes\": [\n              {\n                \"id\": \"gid://shopify/ProductVariant/1234567890\",\n                \"sku\": {{ skus_to_monitor[0] | json }},\n                \"inventoryItem\": {\n                  \"id\": \"gid://shopify/InventoryItem/1234567890\",\n                  \"inventoryLevel\": {\n                    \"quantities\": [\n                      {\n                        \"name\": \"available\",\n                        \"quantity\": {% if event.topic == \"mechanic/user/trigger\" %}5{% else %}4{% endif %}\n                      }\n                    ]\n                  }\n                }\n              },\n              {\n                \"id\": \"gid://shopify/ProductVariant/2345678901\",\n                \"sku\": {{ skus_to_monitor[0] | json }},\n                \"inventoryItem\": {\n                  \"id\": \"gid://shopify/InventoryItem/2345678901\",\n                  \"inventoryLevel\": {\n                    \"quantities\": [\n                      {\n                        \"name\": \"available\",\n                        \"quantity\": {% if event.topic == \"mechanic/user/trigger\" %}5{% else %}4{% endif %}\n                      }\n                    ]\n                  }\n                }\n              }\n            ]\n          }\n        }\n      }\n    {% endcapture %}\n\n    {% assign result = result_json | parse_json %}\n  {% endif %}\n\n  {% for variant in result.data.productVariants.nodes %}\n    {% assign variants_by_sku[variant.sku]\n      = variants_by_sku[variant.sku]\n      | default: array\n      | push: variant\n    %}\n  {% endfor %}\n\n  {% if result.data.productVariants.pageInfo.hasNextPage %}\n    {% assign cursor = result.data.productVariants.pageInfo.endCursor %}\n  {% else %}\n    {% break %}\n  {% endif %}\n{% endfor %}\n\n{% assign unmatched_skus = array %}\n\n{% for sku in skus_to_monitor %}\n  {% if variants_by_sku[sku] == blank %}\n    {% assign unmatched_skus = unmatched_skus | push: sku %}\n  {% endif %}\n{% endfor %}\n\n{% if unmatched_skus != blank %}\n  {% error\n    message: \"One or more configured SKUs were not matched in this shop. Please check the task configuration and try again.\",\n    unmatched_skus: unmatched_skus\n  %}\n{% endif %}\n\n{% log variants_by_sku: variants_by_sku %}\n\n{% if event.topic == \"mechanic/user/trigger\" %}\n  {% for pair in variants_by_sku %}\n    {% assign sku = pair[0] %}\n    {% assign variants = pair[1] %}\n\n    {% assign expected_inventory_quantity = variants[0].inventoryItem.inventoryLevel.quantities.first.quantity %}\n\n    {% for variant in variants %}\n      {% if variant.inventoryItem.inventoryLevel.quantities.first.quantity != expected_inventory_quantity %}\n        {% error %}\n          {{ \"Expected all '\" | append: sku | append: \"' variants to have an available inventory quantity of \" | append: expected_inventory_quantity | append: \", but not every variant is at this level. Ensure every variant is in sync, and try again.\" | json }}\n        {% enderror %}\n      {% endif %}\n    {% endfor %}\n  {% endfor %}\n\n  {% for pair in variants_by_sku %}\n    {% assign sku = pair[0] %}\n    {% assign variants = pair[1] %}\n\n    {% assign cache_key = task.id | append: \"-\" | append: sku | sha256 %}\n    {% action \"cache\", \"set\", cache_key, variants[0].inventoryItem.inventoryLevel.quantities.first.quantity %}\n  {% endfor %}\n\n{% elsif event.topic contains \"mechanic/scheduler/\" %}\n  {% assign inventory_adjustments = array %}\n\n  {% for sku in skus_to_monitor %}\n    {% assign cache_key = task.id | append: \"-\" | append: sku | sha256 %}\n    {% assign cached_inventory_quantity = cache[cache_key] %}\n\n    {% if event.preview %}\n      {% assign cached_inventory_quantity = 5 %}\n    {% endif %}\n\n    {% if cached_inventory_quantity == nil %}\n      {% error %}{{ \"Missing a cached inventory quantity for SKU '\" | append: sku | append: \"'. Make sure all inventory is in sync across all of this task's monitored SKUs, then use the 'Run task' button to cache current inventory quantities.\" | json }}{% enderror %}\n    {% endif %}\n\n    {% assign total_delta = 0 %}\n    {% assign deltas = hash %}\n\n    {% for variant in variants_by_sku[sku] %}\n      {% assign deltas[variant.id] = variant.inventoryItem.inventoryLevel.quantities.first.quantity | minus: cached_inventory_quantity %}\n      {% assign total_delta = total_delta | plus: deltas[variant.id] %}\n    {% endfor %}\n\n    {% log sku: sku, total_delta: total_delta %}\n\n    {% for variant in variants_by_sku[sku] %}\n      {% assign delta_for_sync = total_delta | minus: deltas[variant.id] %}\n\n      {% if delta_for_sync != 0 %}\n        {% assign inventory_adjustment = hash %}\n        {% assign inventory_adjustment[\"inventoryItemId\"] = variant.inventoryItem.id %}\n        {% assign inventory_adjustment[\"locationId\"] = primary_location.admin_graphql_api_id %}\n        {% assign inventory_adjustment[\"delta\"] = delta_for_sync %}\n        {% assign inventory_adjustments = inventory_adjustments | push: inventory_adjustment %}\n      {% endif %}\n    {% endfor %}\n\n    {% if total_delta != 0 %}\n      {% assign current_inventory_quantity = cached_inventory_quantity | plus: total_delta %}\n      {% action \"cache\", \"set\", cache_key, current_inventory_quantity %}\n    {% endif %}\n  {% endfor %}\n\n  {% if inventory_adjustments != blank %}\n    {% assign groups_of_inventory_adjustments = inventory_adjustments | in_groups_of: 250, fill_with: false %}\n\n    {% for group_of_inventory_adjustments in groups_of_inventory_adjustments %}\n      {% action \"shopify\" %}\n        mutation {\n          inventoryAdjustQuantities(\n            input: {\n              reason: \"correction\"\n              name: \"available\"\n              changes: {{ group_of_inventory_adjustments | graphql_arguments }}\n            }\n          ) {\n            inventoryAdjustmentGroup {\n              reason\n              changes {\n                name\n                delta\n                quantityAfterChange\n                item {\n                  id\n                  sku\n                }\n                location {\n                  name\n                }\n              }\n            }\n            userErrors {\n              code\n              field\n              message\n            }\n          }\n        }\n      {% endaction %}\n    {% endfor %}\n  {% endif %}\n{% endif %}\n",
  "subscriptions": [
    "mechanic/user/trigger",
    "mechanic/scheduler/10min"
  ],
  "subscriptions_template": "mechanic/user/trigger\nmechanic/scheduler/10min",
  "tags": [
    "Inventory",
    "SKU",
    "Sync"
  ]
}
