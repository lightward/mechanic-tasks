{
  "name": "Auto-tag orders that contain a matching product",
  "options": {
    "required_product_title": null,
    "required_product_tags__array": null,
    "order_tags_to_apply__required_array": null
  },
  "subscriptions": [
    "shopify/orders/create",
    "shopify/orders/edited",
    "mechanic/user/trigger",
    "mechanic/shopify/bulk_operation"
  ],
  "subscriptions_template": "shopify/orders/create\nshopify/orders/edited\nmechanic/user/trigger\nmechanic/shopify/bulk_operation",
  "script": "{% comment %}\n  Ordering the task options:\n\n  {{ options.required_product_title }}\n  {{ options.required_product_tags__array }}\n  {{ options.order_tags_to_apply__required_array }}\n{% endcomment %}\n\n{% if options.required_product_title == blank and options.required_product_tags__array == blank %}\n  {\"error\": \"Fill in at least one of 'Required product title' and 'Required product tags'. :)\"}\n{% endif %}\n\n{% if event.topic contains \"shopify/orders/\" %}\n  {% if order_edit %}\n    {% assign order = order_edit.order %}\n  {% endif %}\n\n  {% if event.preview %}\n    {% assign order = hash %}\n    {% assign order[\"admin_graphql_api_id\"] = \"gid://shopify/Order/1234567890\" %}\n    {% assign order[\"line_items\"] = array %}\n\n    {% assign product = hash %}\n    {% if options.required_product_title != blank %}\n      {% assign product[\"title\"] = options.required_product_title %}\n    {% endif %}\n    {% if options.required_product_tags__array  != blank %}\n      {% assign product[\"tags\"] = options.required_product_tags__array | join: \", \" %}\n    {% endif %}\n\n    {% assign order[\"line_items\"][0] = hash %}\n    {% assign order[\"line_items\"][0][\"fulfillable_quantity\"] = 1 %}\n    {% assign order[\"line_items\"][0][\"product\"] = product %}\n  {% endif %}\n\n  {% assign order_qualifies = false %}\n  {% assign order_qualifies_by_tag = nil %}\n  {% assign order_qualifies_by_title = nil %}\n\n  {% assign fulfillable_line_items = array %}\n\n  {% for line_item in order.line_items %}\n    {% if line_item.fulfillable_quantity > 0 %}\n      {% assign fulfillable_line_items[fulfillable_line_items.size] = line_item %}\n    {% endif %}\n  {% endfor %}\n\n  {% assign order_products = fulfillable_line_items | map: \"product\" %}\n\n  {% if options.required_product_title != blank %}\n    {% assign order_qualifies_by_title = false %}\n\n    {% assign order_product_titles = order_products | map: \"title\" %}\n    {% if order_product_titles contains options.required_product_title %}\n      {% assign order_qualifies_by_title = true %}\n    {% endif %}\n  {% endif %}\n\n  {% if options.required_product_tags__array != blank %}\n    {% assign order_qualifies_by_tag = false %}\n\n    {% for order_product in order_products %}\n      {% assign order_product_tags = order_product.tags | split: \", \" %}\n      {% assign order_product_qualifies_by_tag = true %}\n      {% for required_tag in options.required_product_tags__array %}\n        {% unless order_product_tags contains required_tag %}\n          {% assign order_product_qualifies_by_tag = false %}\n          {% break %}\n        {% endunless %}\n      {% endfor %}\n\n      {% if order_product_qualifies_by_tag %}\n        {% assign order_qualifies_by_tag = true %}\n        {% break %}\n      {% endif %}\n    {% endfor %}\n  {% endif %}\n\n  {% comment %}\n    Make sure *at least one* of the two qualifications were evaluated,\n    and make sure neither of them outright failed.\n  {% endcomment %}\n  {% if order_qualifies_by_tag != nil or order_qualifies_by_title != nil %}\n    {% if order_qualifies_by_tag != false and order_qualifies_by_title != false %}\n      {% assign order_qualifies = true %}\n    {% endif %}\n  {% endif %}\n\n  {% if order_qualifies %}\n    {% action \"shopify\" %}\n      mutation {\n        tagsAdd(\n          id: {{ order.admin_graphql_api_id | json }}\n          tags: {{ options.order_tags_to_apply__required_array | json }}\n        ) {\n          userErrors {\n            field\n            message\n          }\n        }\n      }\n    {% endaction %}\n  {% else %}\n    {% assign order_tags = order.tags | split: \", \"%}\n\n    {% for order_tag_to_apply in options.order_tags_to_apply__required_array %}\n      {% if order_tags contains order_tag_to_apply %}\n        {% action \"shopify\" %}\n          mutation {\n            tagsRemove(\n              id: {{ order.admin_graphql_api_id | json }}\n              tags: {{ options.order_tags_to_apply__required_array | json }}\n            ) {\n              userErrors {\n                field\n                message\n              }\n            }\n          }\n        {% endaction %}\n        {% break %}\n      {% endif%}\n    {% endfor %}\n  {% endif %}\n{% elsif event.topic == \"mechanic/user/trigger\" %}\n  {% capture bulk_operation_query %}\n    query {\n      orders {\n        edges {\n          node {\n            __typename\n            id\n            tags\n            lineItems {\n              edges {\n                node {\n                  __typename\n                  id\n                  fulfillableQuantity\n                  product {\n                    id\n                    title\n                    tags\n                  }\n                }\n              }\n            }\n          }\n        }\n      }\n    }\n  {% endcapture %}\n\n  {% action \"shopify\" %}\n    mutation {\n      bulkOperationRunQuery(\n        query: {{ bulk_operation_query | json }}\n      ) {\n        bulkOperation {\n          id\n          status\n        }\n        userErrors {\n          field\n          message\n        }\n      }\n    }\n  {% endaction %}\n{% elsif event.topic == \"mechanic/shopify/bulk_operation\" %}\n  {% if event.preview %}\n    {% assign bulkOperation = hash %}\n    {% assign bulkOperation[\"objects\"] = array %}\n\n    {% assign order = hash %}\n    {% assign order[\"__typename\"] = \"Order\" %}\n    {% assign order[\"id\"] = \"gid://shopify/Order/1234567890\" %}\n    {% assign order[\"tags\"] = array %}\n\n    {% assign product = hash %}\n    {% assign product[\"title\"] = options.required_product_title %}\n    {% assign product[\"tags\"] = options.required_product_tags__array %}\n\n    {% assign lineItem = hash %}\n    {% assign lineItem[\"__typename\"] = \"LineItem\" %}\n    {% assign lineItem[\"__parent\"] = order %}\n    {% assign lineItem[\"fulfillableQuantity\"] = 1 %}\n    {% assign lineItem[\"product\"] = product %}\n\n    {% assign bulkOperation[\"objects\"][0] = order %}\n    {% assign bulkOperation[\"objects\"][1] = lineItem %}\n  {% endif %}\n\n  {% assign qualifying_order_ids = array %}\n  {% assign order_ids_that_already_have_tags = array %}\n\n  {% for object in bulkOperation.objects %}\n    {% case object.__typename %}\n    {% when \"Order\" %}\n      {% assign order_already_has_tags = true %}\n      {% for tag in options.order_tags_to_apply__required_array %}\n        {% unless object.tags contains tag %}\n          {% assign order_already_has_tags = false %}\n        {% endunless %}\n      {% endfor %}\n\n      {% if order_already_has_tags %}\n        {% assign order_ids_that_already_have_tags[order_ids_that_already_have_tags.size] = object.id %}\n      {% endif %}\n    {% when \"LineItem\" %}\n      {% assign product = object.product %}\n\n      {% assign product_qualifies = false %}\n      {% assign product_qualifies_by_tag = nil %}\n      {% assign product_qualifies_by_title = nil %}\n\n      {% if options.required_product_title != blank %}\n        {% assign product_qualifies_by_title = false %}\n\n        {% if product.title == options.required_product_title %}\n          {% assign product_qualifies_by_title = true %}\n        {% endif %}\n      {% endif %}\n\n      {% if options.required_product_tags__array != blank %}\n        {% assign product_qualifies_by_tag = true %}\n        {% for required_tag in options.required_product_tags__array %}\n          {% unless product.tags contains required_tag %}\n            {% assign product_qualifies_by_tag = false %}\n            {% break %}\n          {% endunless %}\n        {% endfor %}\n      {% endif %}\n\n      {% comment %}\n        Make sure *at least one* of the two qualifications were evaluated,\n        and make sure neither of them outright failed.\n      {% endcomment %}\n      {% if product_qualifies_by_tag != nil or product_qualifies_by_title != nil %}\n        {% if product_qualifies_by_tag != false and product_qualifies_by_title != false %}\n          {% assign product_qualifies = true %}\n        {% endif %}\n      {% endif %}\n\n      {% if product_qualifies and object.fulfillableQuantity > 0 %}\n        {% assign qualifying_order_ids[qualifying_order_ids.size] = object.__parent.id %}\n      {% endif %}\n    {% endcase %}\n  {% endfor %}\n\n  {% assign qualifying_order_ids = qualifying_order_ids | uniq %}\n  {% assign order_ids_that_already_have_tags = order_ids_that_already_have_tags | uniq %}\n\n  {% for order_id in qualifying_order_ids %}\n    {% unless order_ids_that_already_have_tags contains order_id %}\n      {% action \"shopify\" %}\n        mutation {\n          tagsAdd(\n            id: {{ order_id | json }}\n            tags: {{ options.order_tags_to_apply__required_array | json }}\n          ) {\n            userErrors {\n              field\n              message\n            }\n          }\n        }\n      {% endaction %}\n    {% endunless %}\n  {% endfor %}\n\n  {% for order_id in order_ids_that_already_have_tags %}\n    {% unless qualifying_order_ids contains order_id %}\n      {% action \"shopify\" %}\n        mutation {\n          tagsRemove(\n            id: {{ order_id | json }}\n            tags: {{ options.order_tags_to_apply__required_array | json }}\n          ) {\n            userErrors {\n              field\n              message\n            }\n          }\n        }\n      {% endaction %}\n    {% endunless %}\n  {% endfor %}\n{% endif %}",
  "docs": "This task watches for incoming orders, and tags them if they contain a product that matches by title or by product tags. Additionally, edited orders will have tags added or removed in line with product additions or removals. Run this task manually to scan your store's order history, tagging older orders that qualify, and untagging those that have been edited and no longer do.\n\nNote: If more than one required product tag is specified, this task will look for products that _individually_ contain _all_ of the tags provided.",
  "halt_action_run_sequence_on_error": false,
  "online_store_javascript": null,
  "order_status_javascript": null,
  "perform_action_runs_in_sequence": false
}
