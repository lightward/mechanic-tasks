{
  "name": "Reset inventory levels when they get too low",
  "options": {
    "minimum_inventory_level__number_required": 0,
    "location_id__number": null,
    "whitelist_filter_mode__boolean": null,
    "blacklist_filter_mode__boolean": null,
    "filter_for_these_variant_ids__array_number": null,
    "filter_for_these_variant_options__keyval": null,
    "filter_for_these_product_types__array": null,
    "filter_for_these_product_ids__array_number": null
  },
  "subscriptions": [
    "shopify/inventory_levels/update"
  ],
  "subscriptions_template": "shopify/inventory_levels/update",
  "script": "{% comment %}\n  An opinion on option order:\n\n  {{ options.minimum_inventory_level__number_required }}\n  {{ options.location_id__number }}\n  {{ options.whitelist_filter_mode__boolean }}\n  {{ options.blacklist_filter_mode__boolean }}\n  {{ options.filter_for_these_variant_ids__array_number }}\n  {{ options.filter_for_these_variant_options__keyval }}\n  {{ options.filter_for_these_product_types__array }}\n  {{ options.filter_for_these_product_ids__array_number }}\n{% endcomment %}\n\n{% if event.preview %}\n  {% assign inventory_level = hash %}\n  {% assign inventory_level[\"inventory_item_id\"] = 1234567890 %}\n  {% assign inventory_level[\"location_id\"] = options.location_id__number | default: 1234567890 %}\n  {% assign inventory_level[\"available\"] = options.minimum_inventory_level__number_required | minus: 1 %}\n  {% assign inventory_level[\"admin_graphql_api_id\"] = \"gid://shopify/InventoryLevel/1234567890?inventory_item_id=1234567890\" %}\n{% endif %}\n\n{% assign minimum_inventory_level = options.minimum_inventory_level__number_required %}\n\n{% assign location_id_qualifies = false %}\n{% if options.location_id__number == blank or inventory_level.location_id == options.location_id__number %}\n  {% assign location_id_qualifies = true %}\n{% endif %}\n\n{% assign inventory_level_requires_reset = false %}\n{% if location_id_qualifies and inventory_level.available < minimum_inventory_level %}\n  {% assign inventory_level_requires_reset = true %}\n{% endif %}\n\n{% if inventory_level_requires_reset %}\n  {% capture query %}\n    query {\n      inventoryLevel(id: {{ inventory_level.admin_graphql_api_id | json }}) {\n        item {\n          variant {\n            legacyResourceId\n            selectedOptions {\n              name\n              value\n            }\n            product {\n              productType\n              legacyResourceId\n            }\n          }\n        }\n      }\n    }\n  {% endcapture %}\n\n  {% assign result = query | shopify %}\n\n  {% if event.preview %}\n    {% capture result_json %}\n      {\n        \"data\": {\n          \"inventoryLevel\": {\n            \"item\": {\n              \"variant\": {\n                \"legacyResourceId\": \n                  {% if options.whitelist_filter_mode__boolean %}\n                    {{ options.filter_for_these_variant_ids__array_number.first | append: \"\" | json }}\n                  {% else %}\n                    {{ \"now\" | date: \"%s\" | json }}\n                  {% endif %}\n                  ,\n                \"selectedOptions\": [\n                  {% if options.whitelist_filter_mode__boolean %}\n                    {\n                      \"name\": {{ options.filter_for_these_variant_options__keyval.first[0] | json }},\n                      \"value\": {{ options.filter_for_these_variant_options__keyval.first[1] | json }}\n                    }\n                  {% else %}\n                    {\n                      \"name\": {{ \"now\" | date: \"%s\" | sha256 | json }},\n                      \"value\": {{ \"now\" | date: \"%s\" | sha256 | json }}\n                    }\n                  {% endif %}\n                ],\n                \"product\": {\n                  \"productType\": \n                    {% if options.whitelist_filter_mode__boolean %}\n                      {{ options.filter_for_these_product_types__array.first | json }}\n                    {% else %}\n                      {{ \"now\" | date: \"%s\" | sha256 | json }}\n                    {% endif %}\n                    ,\n                  \"legacyResourceId\": \n                    {% if options.whitelist_filter_mode__boolean %}\n                      {{ options.filter_for_these_product_ids__array_number.first | append: \"\" | json }}\n                    {% else %}\n                      {{ \"now\" | date: \"%s\" | json }}\n                    {% endif %}\n                }\n              }\n            }\n          }\n        }\n      }\n    {% endcapture %}\n\n    {% assign result = result_json | parse_json %}\n  {% endif %}\n\n  {% assign inventory_level_filtered = nil %}\n\n  {% assign variant_id = result.data.inventoryLevel.item.variant.legacyResourceId | times: 1 %}\n  {% if options.filter_for_these_variant_ids__array_number contains variant_id %}\n    {% assign inventory_level_filtered = \"variant_id:\" | append: variant_id %}\n  {% endif %}\n\n  {% for filter_option_keyval in options.filter_for_these_variant_options__keyval %}\n    {% assign filter_option_name = filter_option_keyval[0] %}\n    {% assign filter_option_value = filter_option_keyval[1] %}\n    {% assign matching_filter_option = result.data.inventoryLevel.item.variant.selectedOptions | where: \"name\", filter_option_name | first %}\n\n    {% if matching_filter_option and matching_filter_option.value == filter_option_value %}\n      {% assign inventory_level_filtered = \"variant_option:\" | append: filter_option_name | append: \"=\" | append: filter_option_value %}\n      {% break %}\n    {% endif %}\n  {% endfor %}\n\n  {% assign product_id = result.data.inventoryLevel.item.variant.product.legacyResourceId | times: 1 %}\n  {% if options.filter_for_these_product_ids__array_number contains product_id %}\n    {% assign inventory_level_filtered = \"product_id:\" | append: product_id %}\n  {% endif %}\n\n  {% assign product_type = result.data.inventoryLevel.item.variant.product.productType %}\n  {% if options.filter_for_these_product_types__array contains product_type %}\n    {% assign inventory_level_filtered = \"product_type:\" | append: product_type %}\n  {% endif %}\n\n  {% if options.whitelist_filter_mode__boolean and options.blacklist_filter_mode__boolean %}\n    {% error \"Choose only one of 'Whitelist filter mode' or 'Blacklist filter mode'\" %}\n  {% elsif options.whitelist_filter_mode__boolean %}\n    {% if options.filter_for_these_variant_ids__array_number == blank and options.filter_for_these_variant_options__keyval == blank and options.filter_for_these_product_types__array == blank and options.filter_for_these_product_ids__array_number == blank %}\n      {% error \"When using the whitelist filter mode, at least one filter must be configured.\" %}\n    {% endif %}\n  {% elsif options.whitelist_filter_mode__boolean == false and options.blacklist_filter_mode__boolean == false %}\n    {% if options.filter_for_these_variant_ids__array_number != blank or options.filter_for_these_variant_options__keyval != blank or options.filter_for_these_product_types__array != blank or options.filter_for_these_product_ids__array_number != blank %}\n      {% error \"When using filters, a filter mode must be selected.\" %}\n    {% endif %}\n  {% endif }\n\n  {% assign adjust_quantity = false %}\n  {% if options.whitelist_filter_mode__boolean == false and options.blacklist_filter_mode__boolean == false %}\n    {% log filter_mode: nil %}\n    {% assign adjust_quantity = true %}\n  {% elsif options.whitelist_filter_mode__boolean %}\n    {% log filter_mode: \"whitelist\", filter_value: inventory_level_filtered %}\n\n    {% if inventory_level_filtered != blank %}\n      {% assign adjust_quantity = true %}\n    {% endif %}\n  {% elsif options.blacklist_filter_mode__boolean %}\n    {% log filter_mode: \"blacklist\", filter_value: inventory_level_filtered %}\n\n    {% if inventory_level_filtered == blank %}\n      {% assign adjust_quantity = true %}\n    {% endif %}\n  {% endif %}\n\n  {% if adjust_quantity %}\n    {% action \"shopify\" %}\n      mutation {\n        inventoryAdjustQuantity(\n          input: {\n            inventoryLevelId: {{ inventory_level.admin_graphql_api_id | json }}\n            availableDelta: {{ minimum_inventory_level | minus: inventory_level.available | json }}\n          }\n        ) {\n          inventoryLevel {\n            available\n          }\n          userErrors {\n            field\n            message\n          }\n        }\n      }\n    {% endaction %}\n  {% endif %}\n{% endif %}",
  "docs": "Use this task to automatically maintain minimum inventory levels. Optionally, filter by variant or product ID, or by variant option, or by product type, choosing whether to blacklist or whitelist your filter selections.\n\nThis task runs as inventory levels are updated, auto-updating qualifying levels to meet the configured minimum.\r\n\r\nThis task can be configured with several resource IDs. [Learn how to find these.](https://help.usemechanic.com/en/articles/2946120-how-do-i-find-an-id-for-a-product-collection-order-or-something-else)\r\n\r\nIf a location ID is provided, this task will _only_ adjust inventory for items at that location.\r\n\r\nAdditional filters may be configured, using either whitelist mode to _only_ perform inventory adustments for items that match the filter, or blacklist mode to perform adjustments for all items that do _not_ match the filter. All filters are optional, and each filter will be ignored if it is left unconfigured.",
  "halt_action_run_sequence_on_error": false,
  "online_store_javascript": null,
  "order_status_javascript": null,
  "perform_action_runs_in_sequence": false
}
