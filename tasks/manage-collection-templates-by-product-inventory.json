{
  "docs": "Use this task to automatically switch collections over to an appropriate theme template, when every product in the collection has gone completely out of stock, and to switch them back when inventory arrives.\n\nThis task can be run manually (using the \"Run task\" button), or be configured to run daily/hourly. If you encounter performance issues when running every time an inventory level is updated, disable this option.\n\nNote: For this task, products which do not track inventory in Shopify will be considered as in stock.",
  "halt_action_run_sequence_on_error": false,
  "name": "Manage collection templates by product inventory",
  "online_store_javascript": null,
  "options": {
    "collection_template_suffix_when_all_products_are_out_of_stock__required": "out-of-stock",
    "default_collection_template_suffix": null,
    "run_every_time_an_inventory_level_is_updated__boolean": true,
    "run_daily__boolean": null,
    "run_hourly__boolean": null
  },
  "order_status_javascript": null,
  "perform_action_runs_in_sequence": false,
  "script": "{% assign out_of_stock_collection_template_suffix = options.collection_template_suffix_when_all_products_are_out_of_stock__required %}\n{% assign default_collection_template_suffix = options.default_collection_template_suffix %}\n\n{% if event.topic contains \"shopify/inventory_levels/\" %}\n  {% comment %}\n    -- get this product's total inventory, and up to 250 collections\n  {% endcomment %}\n\n  {% capture query %}\n    query {\n      inventoryItem(id: {{ inventory_level.inventory_item_id | prepend: \"gid://shopify/InventoryItem/\" | json }}) {\n        variant {\n          product {\n            id\n            totalInventory\n            tracksInventory\n            collections(first: 250) {\n              nodes {\n                id\n                templateSuffix\n              }\n            }\n          }\n        }\n      }\n    }\n  {% endcapture %}\n\n  {% assign result = query | shopify %}\n\n  {% if event.preview %}\n    {% capture result_json %}\n      {\n        \"data\": {\n          \"inventoryItem\": {\n            \"variant\": {\n              \"product\": {\n                \"id\": \"gid://shopify/Product/1234567890\",\n                \"totalInventory\": 0,\n                \"tracksInventory\": true,\n                \"collections\": {\n                  \"nodes\": [\n                    {\n                      \"id\": \"gid://shopify/Collection/1234567890\",\n                      \"templateSuffix\": {{ default_collection_template_suffix | json }}\n                    }\n                  ]\n                }\n              }\n            }\n          }\n        }\n      }\n    {% endcapture %}\n\n    {% assign result = result_json | parse_json %}\n  {% endif %}\n\n  {% assign product = result.data.inventoryItem.variant.product %}\n  {% assign collections = product.collections.nodes %}\n\n  {% for collection in collections %}\n    {% assign has_default_template = nil %}\n    {% assign has_out_of_stock_template = nil %}\n    {% assign has_a_product_in_stock = nil %}\n\n    {% assign current_template_suffix = collection.templateSuffix %}\n\n    {% comment %}\n      -- Shopify stores this as *either* an empty string or as nil. Mechanic auto-nils empty strings for task options, so we coerce blanks to nils here.\n    {% endcomment %}\n\n    {% if current_template_suffix == blank %}\n      {% assign current_template_suffix = nil %}\n    {% endif %}\n\n    {% if current_template_suffix == default_collection_template_suffix %}\n      {% assign has_default_template = true %}\n\n    {% elsif current_template_suffix == out_of_stock_collection_template_suffix %}\n      {% assign has_out_of_stock_template = true %}\n    {% endif %}\n\n    {% comment %}\n      -- if the product's stock status matches the paired collection template, then stop processing that collection\n      -- NOTE: another product might cause the collection to change templates, but that should  be handled in an inventory level event for that product\n    {% endcomment %}\n\n    {% if product.totalInventory <= 0 and product.tracksInventory %}\n      {% if has_out_of_stock_template %}\n        {% continue %}\n      {% endif %}\n\n    {% elsif has_default_template %}\n      {% continue %}\n    {% endif %}\n\n    {% comment %}\n      -- query collection for up to 25K products, getting inventory of each\n      -- break the query loop early when at least one product is in stock and the collection has the out of stock template\n    {% endcomment %}\n\n    {% assign cursor = nil %}\n\n    {% for n in (1..100) %}\n      {% capture query %}\n        query {\n          collection(id: {{ collection.id | json }}) {\n            products(\n              first: 250\n              after: {{ cursor | json }}\n            ) {\n              pageInfo {\n                hasNextPage\n                endCursor\n              }\n              nodes {\n                id\n                totalInventory\n                tracksInventory\n              }\n            }\n          }\n        }\n      {% endcapture %}\n\n      {% assign result = query | shopify %}\n\n      {% if event.preview %}\n        {% capture result_json %}\n          {\n            \"data\": {\n              \"collection\": {\n                \"products\": {\n                  \"nodes\": [\n                    {\n                      \"id\": \"gid://shopify/Product/1234567890\",\n                      \"totalInventory\": 0,\n                      \"tracksInventory\": true\n                    }\n                  ]\n                }\n              }\n            }\n          }\n        {% endcapture %}\n\n        {% assign result = result_json | parse_json %}\n      {% endif %}\n\n      {% for product in result.data.collection.products.nodes %}\n        {% if product.totalInventory > 0 or product.tracksInventory == false %}\n          {% assign has_a_product_in_stock = true %}\n          {% break %}\n        {% endif %}\n      {% endfor %}\n\n      {% if has_a_product_in_stock %}\n        {% break %}\n      {% endif %}\n\n      {% if result.data.collection.products.pageInfo.hasNextPage %}\n        {% assign cursor = result.data.collection.products.pageInfo.endCursor %}\n      {% else %}\n        {% break %}\n      {% endif %}\n    {% endfor %}\n\n    {% if has_a_product_in_stock %}\n      {% unless has_default_template %}\n        {% action \"shopify\" %}\n          mutation {\n            collectionUpdate(\n              input: {\n                id: {{ collection.id | json }}\n                templateSuffix: {{ default_collection_template_suffix | json }}\n              }\n            ) {\n              collection {\n                id\n                title\n                templateSuffix\n              }\n              userErrors {\n                field\n                message\n              }\n            }\n          }\n        {% endaction %}\n      {% endunless %}\n\n    {% else %}\n      {% unless has_out_of_stock_template %}\n        {% action \"shopify\" %}\n          mutation {\n            collectionUpdate(\n              input: {\n                id: {{ collection.id | json }}\n                templateSuffix: {{ out_of_stock_collection_template_suffix | json }}\n              }\n            ) {\n              collection {\n                id\n                title\n                templateSuffix\n              }\n              userErrors {\n                field\n                message\n              }\n            }\n          }\n        {% endaction %}\n      {% endunless %}\n    {% endif %}\n  {% endfor %}\n\n{% elsif event.topic == \"mechanic/user/trigger\" or event.topic contains \"mechanic/scheduler/\" %}\n  {% capture bulk_operation_query %}\n    query {\n      collections {\n        edges {\n          node {\n            __typename\n            id\n            templateSuffix\n            products {\n              edges {\n                node {\n                  __typename\n                  id\n                  totalInventory\n                  tracksInventory\n                }\n              }\n            }\n          }\n        }\n      }\n    }\n  {% endcapture %}\n\n  {% action \"shopify\" %}\n    mutation {\n      bulkOperationRunQuery(\n        query: {{ bulk_operation_query | json }}\n      ) {\n        bulkOperation {\n          id\n          status\n        }\n        userErrors {\n          field\n          message\n        }\n      }\n    }\n  {% endaction %}\n\n{% elsif event.topic == \"mechanic/shopify/bulk_operation\" %}\n  {% if event.preview %}\n    {% capture jsonl_string %}\n      {\"__typename\":\"Collection\",\"id\":\"gid://shopify/Collection/1234567890\",\"templateSuffix\":{{ default_collection_template_suffix | json }}}\n      {\"__typename\":\"Product\",\"id\":\"gid://shopify/Product/1234567890\",\"totalInventory\":0,\"__parentId\":\"gid://shopify/Collection/1234567890\"}\n      {\"__typename\":\"Product\",\"id\":\"gid://shopify/Product/2345678901\",\"totalInventory\":0,\"__parentId\":\"gid://shopify/Collection/1234567890\"}\n    {% endcapture %}\n\n    {% assign bulkOperation = hash %}\n    {% assign bulkOperation[\"objects\"] = jsonl_string | parse_jsonl %}\n  {% endif %}\n\n  {% assign collections = bulkOperation.objects | where: \"__typename\", \"Collection\" %}\n  {% assign products = bulkOperation.objects | where: \"__typename\", \"Product\" %}\n\n  {% for collection in collections %}\n    {% assign has_default_template = nil %}\n    {% assign has_out_of_stock_template = nil %}\n    {% assign has_a_product_in_stock = nil %}\n\n    {% assign current_template_suffix = collection.templateSuffix %}\n\n    {% comment %}\n      -- Shopify stores this as *either* an empty string or as nil. Mechanic auto-nils empty strings for task options, so we coerce blanks to nils here.\n    {% endcomment %}\n\n    {% if current_template_suffix == blank %}\n      {% assign current_template_suffix = nil %}\n    {% endif %}\n\n    {% if current_template_suffix == default_collection_template_suffix %}\n      {% assign has_default_template = true %}\n\n    {% elsif current_template_suffix == out_of_stock_collection_template_suffix %}\n      {% assign has_out_of_stock_template = true %}\n    {% endif %}\n\n    {% assign collection_products = products | where: \"__parentId\", collection.id %}\n\n    {% comment %}\n      -- break the products loop early when at least one product is in stock\n    {% endcomment %}\n\n    {% for product in collection_products %}\n      {% if product.totalInventory > 0 or product.tracksInventory == false %}\n        {% assign has_a_product_in_stock = true %}\n        {% break %}\n      {% endif %}\n    {% endfor %}\n\n    {% if has_a_product_in_stock %}\n      {% unless has_default_template %}\n        {% action \"shopify\" %}\n          mutation {\n            collectionUpdate(\n              input: {\n                id: {{ collection.id | json }}\n                templateSuffix: {{ default_collection_template_suffix | json }}\n              }\n            ) {\n              collection {\n                id\n                title\n                templateSuffix\n              }\n              userErrors {\n                field\n                message\n              }\n            }\n          }\n        {% endaction %}\n      {% endunless %}\n\n    {% else %}\n      {% unless has_out_of_stock_template %}\n        {% action \"shopify\" %}\n          mutation {\n            collectionUpdate(\n              input: {\n                id: {{ collection.id | json }}\n                templateSuffix: {{ out_of_stock_collection_template_suffix | json }}\n              }\n            ) {\n              collection {\n                id\n                title\n                templateSuffix\n              }\n              userErrors {\n                field\n                message\n              }\n            }\n          }\n        {% endaction %}\n      {% endunless %}\n    {% endif %}\n  {% endfor %}\n{% endif %}\n",
  "subscriptions": [
    "shopify/inventory_levels/update",
    "mechanic/user/trigger",
    "mechanic/shopify/bulk_operation"
  ],
  "subscriptions_template": "{% if options.run_every_time_an_inventory_level_is_updated__boolean %}shopify/inventory_levels/update{% endif %}\nmechanic/user/trigger\n{% if options.run_daily__boolean %}mechanic/scheduler/daily{% endif %}\n{% if options.run_hourly__boolean %}mechanic/scheduler/hourly{% endif %}\nmechanic/shopify/bulk_operation",
  "tags": [
    "Collections",
    "Inventory"
  ]
}
