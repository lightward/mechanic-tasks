{
  "name": "Auto-tag products that meet a sales threshold",
  "options": {
    "tally_by_line_item_quantity__boolean": true,
    "tally_by_line_item_subtotals__boolean": false,
    "tally_by_number_of_orders__boolean": false,
    "minimum_tally_threshold_per_product__required_number": "",
    "product_tag_to_apply__required": "",
    "order_query__required": "financial_status:paid processed_at:past_week"
  },
  "subscriptions": [
    "mechanic/user/trigger",
    "mechanic/scheduler/daily"
  ],
  "subscriptions_template": "mechanic/user/trigger\nmechanic/scheduler/daily",
  "script": "{% comment %}\n  Preferred option order:\n\n  {{ options.tally_by_line_item_quantity__boolean }}\n  {{ options.tally_by_line_item_subtotals__boolean }}\n  {{ options.tally_by_number_of_orders__boolean }}\n  {{ options.minimum_tally_threshold_per_product__required_number }}\n  {{ options.product_tag_to_apply__required }}\n  {{ options.order_query__required }}\n{% endcomment %}\n\n{% assign product_tallies = hash %}\n{% assign products_already_tagged = array %}\n{% assign products_deserving_tag = array %}\n\n{% assign mode_selections = 0 %}\n{% if options.tally_by_line_item_quantity__boolean %}\n  {% assign mode = \"line_item_quantity\" %}\n  {% assign mode_selections = mode_selections | plus: 1 %}\n{% endif %}\n{% if options.tally_by_line_item_subtotals__boolean %}\n  {% assign mode = \"line_item_subtotal\" %}\n  {% assign mode_selections = mode_selections | plus: 1 %}\n{% endif %}\n{% if options.tally_by_number_of_orders__boolean %}\n  {% assign mode = \"order_count\" %}\n  {% assign mode_selections = mode_selections | plus: 1 %}\n{% endif %}\n\n{% if mode_selections == 0 %}\n  {\"error\": \"Choose one tally mode.\"}\n{% elsif mode_selections > 1 %}\n  {\"error\": \"Choose exactly one tally mode - more than one is not supported.\"}\n{% endif %}\n\n{% assign cursor = nil %}\n{% for n in (0..10000) %}\n  {% capture query %}\n    query {\n      products(\n        first: 250\n        after: {{ cursor | json }}\n        query: {{ options.product_tag_to_apply__required | json | prepend: \"tag:\" | json }}\n      ) {\n        pageInfo {\n          hasNextPage\n        }\n        edges {\n          cursor\n          node {\n            id\n          }\n        }\n      }\n    }\n  {% endcapture %}\n\n  {% assign result = query | shopify %}\n\n  {% assign products_already_tagged = result.data.products.edges | map: \"node\" | map: \"id\" | concat: products_already_tagged %}\n\n  {% if result.data.products.pageInfo.hasNextPage %}\n    {% assign cursor = result.data.products.edges.last.cursor %}\n  {% else %}\n    {% break %}\n  {% endif %}\n{% endfor %}\n\n{% assign cursor = nil %}\n{% for n in (0..10000) %}\n  {% capture query %}\n    query {\n      orders(\n        first: 10\n        after: {{ cursor | json }}\n        query: {{ options.order_query__required | json }}\n      ) {\n        pageInfo {\n          hasNextPage\n        }\n        edges {\n          cursor\n          node {\n            id\n            createdAt\n            lineItems(\n              first: 30\n            ) {\n              edges {\n                node {\n                  quantity\n                  originalTotalSet {\n                    shopMoney {\n                      amount\n                    }\n                  }\n                  product {\n                    id\n                  }\n                }\n              }\n            }\n          }\n        }\n      }\n    }\n  {% endcapture %}\n\n  {% assign result = query | shopify %}\n\n  {% for order_edge in result.data.orders.edges %}\n    {% assign order_node = order_edge.node %}\n    {% assign lineItem_nodes = order_node.lineItems.edges | map: \"node\" %}\n\n    {% case mode %}\n    {% when \"line_item_quantity\" %}\n      {% for lineItem_node in lineItem_nodes %}\n        {% if lineItem_node.product %}\n          {% assign product_tallies[lineItem_node.product.id] = product_tallies[lineItem_node.product.id] | default: 0 | plus: lineItem_node.quantity %}\n        {% endif %}\n      {% endfor %}\n    {% when \"line_item_subtotal\" %}\n      {% for lineItem_node in lineItem_nodes %}\n        {% if lineItem_node.product %}\n          {% assign product_tallies[lineItem_node.product.id] = product_tallies[lineItem_node.product.id] | default: 0 | plus: lineItem_node.originalTotalSet.shopMoney.amount %}\n        {% endif %}\n      {% endfor %}\n    {% when \"order_count\" %}\n      {% assign product_ids = lineItem_nodes | map: \"product\" | map: \"id\" | compact %}\n      {% for product_id in product_ids %}\n        {% assign product_tallies[product_id] = product_tallies[product_id] | default: 0 | plus: 1 %}\n      {% endfor %}\n    {% endcase %}\n  {% endfor %}\n\n  {% if result.data.orders.pageInfo.hasNextPage %}\n    {% assign cursor = result.data.orders.edges.last.cursor %}\n  {% else %}\n    {% break %}\n  {% endif %}\n{% endfor %}\n\n{% if event.preview %}\n  {% assign product_tallies[\"gid://shopify/Product/1234567890\"] = options.minimum_tally_threshold_per_product__required_number %}\n{% endif %}\n\n{% for keyval in product_tallies %}\n  {% assign product_id = keyval[0] %}\n  {% assign tally = keyval[1] %}\n\n  {% if tally >= options.minimum_tally_threshold_per_product__required_number %}\n    {% assign products_deserving_tag[products_deserving_tag.size] = product_id %}\n\n    {% unless products_already_tagged contains product_id %}\n      {% action \"shopify\" %}\n        mutation {\n          tagsAdd(\n            id: {{ product_id | json }}\n            tags: {{ options.product_tag_to_apply__required | json }}\n          ) {\n            userErrors {\n              field\n              message\n            }\n          }\n        }\n      {% endaction %}\n    {% endunless %}\n  {% endif %}\n{% endfor %}\n\n{% for product_id in products_already_tagged %}\n  {% unless products_deserving_tag contains product_id %}\n    {% action \"shopify\" %}\n      mutation {\n        tagsRemove(\n          id: {{ product_id | json }}\n          tags: {{ options.product_tag_to_apply__required | json }}\n        ) {\n          userErrors {\n            field\n            message\n          }\n        }\n      }\n    {% endaction %}\n  {% endunless %}\n{% endfor %}\n\n{\"log\": {{ product_tallies | json }}}",
  "docs": "Out of the box, this task scans the last week's worth of paid orders, and auto-tags products that meet the sales threshold of your choice, removing the tag from products that no longer qualify. This scan can be run on demand (with the \"Run task\" button), and will otherwise run nightly.\r\n\r\nYou can choose between a threshold defined by line item quantity (for the total number of units sold), by line item subtotals (for the total amount of money each product earned), or by number of orders (for the total number of times a customer placed an order including that product). You can also reconfigure the query used to fetch orders, to get specific about what orders you want to consider.\n\nOut of the box, this task scans the last week's worth of paid orders, and auto-tags products that meet the sales threshold of your choice, removing the tag from products that no longer qualify. This scan can be run on demand (with the \"Run task\" button), and will otherwise run nightly.\r\n\r\nYou can choose between a threshold defined by line item quantity (for the total number of units sold), by line item subtotals (for the total amount of money each product earned), or by number of orders (for the total number of times a customer placed an order including that product).\r\n\r\nConfigure the \"Order query\" option to get specific about which orders you want to consider. When altering the \"processed_at\" query parameter, you may use the following values:\r\n\r\n* past_week\r\n* past_month\r\n* past_quarter\r\n* past_year\r\n* ... or a YYYY-MM-DD value, as in \"processed_at:>=2019-01-01\" ([read about query comparators](https://help.shopify.com/en/api/getting-started/search-syntax#comparators))\r\n\r\nThis task can take some time to run, depending on the number of orders that need to be scanned. :)\r\n\r\nFor the interested, see the very end of the \"Task result\" portion of each task run's event, for a logged dump of product IDs mapped to the tallies Mechanic has arrived at for each one. You can use this to make sure you understand why Mechanic is making the tagging decisions it's making.",
  "halt_action_run_sequence_on_error": false,
  "online_store_javascript": null,
  "order_status_javascript": null,
  "perform_action_runs_in_sequence": false
}
