{
  "docs": "This task will remove products from markets when they go out of stock at specific locations. It runs on inventory level changes, checking the \"available\" inventory across all variants for that product and location, and if they are all out of stock it will unpublish the product from the market's publication, thus denying the product from online sale in that market. \n\nConfigure the task with the location names on the left and the paired market names on the right. Multiple market names for a location should be entered on separate lines.\n\nWhen the task is run manually it will query for all products in the shop with at least one variant out of stock at any location, and the process each of them as per above excepting that each configured location will be checked for each product.",
  "halt_action_run_sequence_on_error": false,
  "name": "Unpublish products from markets when locations are out of stock",
  "online_store_javascript": null,
  "options": {
    "locations_and_market_names__keyval_multiline_required": null
  },
  "order_status_javascript": null,
  "perform_action_runs_in_sequence": false,
  "preview_event_definitions": [
    {
      "description": "Sample inventory level update",
      "event_attributes": {
        "topic": "shopify/inventory_levels/update",
        "data": {
          "admin_graphql_api_id": "gid://shopify/InventoryLevel/987654321?inventory_item_id=1234567890",
          "available": 0,
          "inventory_item_id": 1234567890,
          "location_id": 987654321
        }
      }
    }
  ],
  "script": "{% comment %}\n  -- using a keyval with multiline configuration field allows location names to be mapped to multiple markets\n{% endcomment %}\n\n{% assign locations_and_market_names = options.locations_and_market_names__keyval_multiline_required %}\n\n{% assign location_names = locations_and_market_names | keys %}\n{% assign market_names\n  = locations_and_market_names\n  | values\n  | join: newline\n  | split: newline\n  | uniq\n%}\n\n{% if event.preview %}\n  {% assign location_names = array | push: \"Warehouse\" %}\n  {% assign market_names = array | push: \"International\" %}\n{% endif %}\n\n{% assign location_names_and_ids = hash %}\n{% assign inventory_level_inputs = array %}\n\n{% comment %}\n  -- check to make sure all of the location names configured in the task match locations in this shop\n  -- Shopify supports 1000 locations (as of June 2023), so searching by name filter instead of paginating\n{% endcomment %}\n\n{% for location_name in location_names %}\n  {% capture query %}\n    query {\n      locations(\n        first: 1\n        query: {{ location_name | json | prepend: \"name:\" | json }}\n      ) {\n        nodes {\n          id\n          name\n        }\n      }\n    }\n  {% endcapture %}\n\n  {% assign result = query | shopify %}\n\n  {% if event.preview %}\n    {% capture result_json %}\n      {\n        \"data\": {\n          \"locations\": {\n            \"nodes\": [\n              {\n                \"id\": \"gid://shopify/Location/1234567890\"\n              }\n            ]\n          }\n        }\n      }\n    {% endcapture %}\n\n    {% assign result = result_json | parse_json %}\n  {% endif %}\n\n  {% comment %}\n    -- using \"echo\" __error instead of log so that an error indicator shows in the event run log but the task still continues processing\n  {% endcomment %}\n\n  {% if result.data.locations == blank %}\n    {% action \"echo\"\n      __error: \"Configured location name does not match a location in this shop.\",\n      location_name: location_name\n    %}\n    {% continue %}\n  {% endif %}\n\n  {% assign location_id = result.data.locations.nodes.first.id %}\n  {% assign location_names_and_ids[location_name] = location_id %}\n\n  {% comment %}\n    -- save inventory level inputs for bulk querying so that only the locations configured in this task are returned\n    -- have to set alias for the inventoryLevel field because GraphQL requires field name uniqueness within each returned node\n  {% endcomment %}\n\n  {% capture inventory_level_input %}\n    {{ location_id | replace: \"gid://shopify/Location/\", \"location_\" }}: inventoryLevel(locationId: {{ location_id | json }}) {\n      location {\n        name\n      }\n      quantities(names: \"available\") {\n        quantity\n      }\n    }\n  {% endcapture %}\n\n  {% assign inventory_level_inputs = inventory_level_inputs | push: inventory_level_input %}\n{% endfor %}\n\n{% comment %}\n  -- Shopify only supports 50 markets (as of June 2023) and has no query filters for them, so have to retrieve them all\n  -- each market has only a single catalog and publication, so we can map market names to publication IDs in a hash for quicker lookup\n{% endcomment %}\n\n{% assign market_names_and_publication_ids = hash %}\n\n{% capture query %}\n  query {\n    markets(first: 50) {\n      nodes {\n        name\n        catalogs(first: 1) {\n          nodes {\n            publication {\n              id\n            }\n          }\n        }\n      }\n    }\n  }\n{% endcapture %}\n\n{% assign result = query | shopify %}\n\n{% if event.preview %}\n  {% capture result_json %}\n    {\n      \"data\": {\n        \"markets\": {\n          \"nodes\": [\n            {\n              \"name\": \"International\",\n              \"catalogs\": {\n                \"nodes\": [\n                  {\n                    \"publication\": {\n                      \"id\": \"gid://shopify/Publication/1234567890\"\n                    }\n                  }\n                ]\n              }\n            }\n          ]\n        }\n      }\n    }\n  {% endcapture %}\n\n  {% assign result = result_json | parse_json %}\n{% endif %}\n\n{% assign published_inputs = array %}\n\n{% for market in result.data.markets.nodes %}\n  {% assign publication_id = market.catalogs.nodes.first.publication.id %}\n  {% assign market_names_and_publication_ids[market.name] = publication_id %}\n\n  {% comment %}\n    -- save published inputs for checking to see which publications a product is currently published to\n    -- have to set alias for the publishedOnPublication field because GraphQL requires field name uniqueness within each returned node\n  {% endcomment %}\n\n  {% capture published_input -%}\n    published_{{ publication_id | remove: \"gid://shopify/Publication/\" }}: publishedOnPublication(publicationId: {{ publication_id | json }})\n  {%- endcapture %}\n\n  {% assign published_inputs = published_inputs | push: published_input %}\n{% endfor %}\n\n{% comment %}\n  -- check to make sure all of the market names configured in the task match markets in this shop\n  -- using \"echo\" __error instead of log or error tags so that an error indicator shows in the event run log but the task still continues processing\n{% endcomment %}\n\n{% for market_name in market_names %}\n  {% if market_names_and_publication_ids[market_name] == blank %}\n    {% action \"echo\"\n      __error: \"Configured market name does not match a market in this shop.\",\n      market_name: market_name\n    %}\n  {% endif %}\n{% endfor %}\n\n{% if event.topic == \"shopify/inventory_levels/update\" %}\n  {% comment %}\n    -- use the inventory level and location IDs from this event webhook to query available inventory for ALL of the product's variants at this location\n    -- Shopify supports 100 variants per product (as of June 2023)\n  {% endcomment %}\n\n  {% capture query %}\n    query {\n      inventoryLevel(id: {{ inventory_level.admin_graphql_api_id | json }}) {\n        location {\n          name\n        }\n        item {\n          variant {\n            product {\n              id\n              title\n              {{ published_inputs | join: newline }}\n              variants(first: 100) {\n                nodes {\n                  inventoryItem {\n                    inventoryLevel(locationId: {{ inventory_level.location_id | prepend: \"gid://shopify/Location/\" | json }}) {\n                      quantities(names: \"available\") {\n                        quantity\n                      }\n                    }\n                  }\n                }\n              }\n            }\n          }\n        }\n      }\n    }\n  {% endcapture %}\n\n  {% assign result = query | shopify %}\n\n  {% if event.preview %}\n    {% capture result_json %}\n      {\n        \"data\": {\n          \"inventoryLevel\": {\n            \"location\": {\n              \"name\": \"Warehouse\"\n            },\n            \"item\": {\n              \"variant\": {\n                \"product\": {\n                  \"id\": \"gid://shopify/Product/1234567890\",\n                  \"title\": \"Widget\",\n                  \"published_1234567890\": true,\n                  \"variants\": {\n                    \"nodes\": [\n                      {\n                        \"inventoryItem\": {\n                          \"inventoryLevel\": {\n                            \"quantities\": [\n                              {\n                                \"quantity\": 0\n                              }\n                            ]\n                          }\n                        }\n                      }\n                    ]\n                  }\n                }\n              }\n            }\n          }\n        }\n      }\n    {% endcapture %}\n\n    {% assign result = result_json | parse_json %}\n  {% endif %}\n\n  {% assign location_name = result.data.inventoryLevel.location.name %}\n  {% assign product = result.data.inventoryLevel.item.variant.product %}\n\n  {% comment %}\n    -- stop processing if this location isn't configured in the task\n  {% endcomment %}\n\n  {% unless location_names contains location_name %}\n    {% break %}\n  {% endunless %}\n\n  {% comment %}\n    -- stop processing if at least one variant is in stock at this location\n  {% endcomment %}\n\n  {% assign has_variant_in_stock_at_location = nil %}\n\n  {% for variant in product.variants.nodes %}\n    {% if variant.inventoryItem.inventoryLevel.quantities.first.quantity > 0 %}\n      {% assign has_variant_in_stock_at_location = true %}\n      {% break %}\n    {% endif %}\n  {% endfor %}\n\n  {% if has_variant_in_stock_at_location %}\n    {% log\n      message: \"Product has at least one variant in stock at this location; skipping.\",\n      product_title: product.title,\n      location_name: location_name\n    %}\n    {% break %}\n  {% endif %}\n\n  {% assign unpublish_market_names = locations_and_market_names[location_name] | split: newline %}\n\n  {% if event.preview %}\n    {% assign unpublish_market_names = array | push: \"International\" %}\n  {% endif %}\n\n  {% log\n    message: \"All variants of this product are out of stock at this location; unpublish the product from the paired markets.\",\n    product_title: product.title,\n    location_name: location_name,\n    unpublish_market_names: unpublish_market_names\n  %}\n\n  {% comment %}\n    -- check if product is published to markets and if so save the publication ID inputs for unpublishing\n  {% endcomment %}\n\n  {% assign publication_id_inputs = array %}\n\n  {% for unpublish_market_name in unpublish_market_names %}\n    {% assign publication_id = market_names_and_publication_ids[unpublish_market_name] %}\n    {% assign published_alias = publication_id | replace: \"gid://shopify/Publication/\", \"published_\" %}\n\n    {% if product[published_alias] %}\n      {% assign publication_id_input = hash %}\n      {% assign publication_id_input[\"publicationId\"] = publication_id %}\n      {% assign publication_id_inputs = publication_id_inputs | push: publication_id_input %}\n    {% endif %}\n  {% endfor %}\n\n  {% comment %}\n    -- \"DENY\" a product from markets by unpublishing it from the associated publications\n  {% endcomment %}\n\n  {% if publication_id_inputs != blank %}\n    {% action \"shopify\" %}\n      mutation {\n        publishableUnpublish(\n          id: {{ product.id | json }}\n          input: {{ publication_id_inputs | uniq | graphql_arguments }}\n        ) {\n          publishable {\n            ... on Product {\n              title\n            }\n          }\n          userErrors {\n            field\n            message\n          }\n        }\n      }\n    {% endaction %}\n\n  {% else %}\n    {% log\n      message: \"Product has already been unpublished from the paired markets.\",\n      product_title: product.title\n    %}\n  {% endif %}\n\n{% elsif event.topic == \"mechanic/user/trigger\" %}\n  {% comment %}\n    -- use bulk operation to query all products in the shop that have at least one variant out of stock in any location\n    -- this filters out products that are in stock across all variants and locations, reducing the number of products to process\n    -- only query for inventory levels of locations configured in task, using inputs captured earlier\n    -- NOTE: bulk operation queries require edges and ids for each node, and __typename should be included for filtering returned data\n  {% endcomment %}\n\n  {% capture bulk_operation_query %}\n    query {\n      products(\n        query: \"out_of_stock_somewhere:true\"\n      ) {\n        edges {\n          node {\n            __typename\n            id\n            title\n            {{ published_inputs | join: newline }}\n            variants {\n              edges {\n                node {\n                  __typename\n                  id\n                  inventoryItem {\n                    {{ inventory_level_inputs | join: newline }}\n                  }\n                }\n              }\n            }\n          }\n        }\n      }\n    }\n  {% endcapture %}\n\n  {% action \"shopify\" %}\n    mutation {\n      bulkOperationRunQuery(\n        query: {{ bulk_operation_query | json }}\n      ) {\n        bulkOperation {\n          id\n          status\n        }\n        userErrors {\n          field\n          message\n        }\n      }\n    }\n  {% endaction %}\n\n{% elsif event.topic == \"mechanic/shopify/bulk_operation\" %}\n  {% if event.preview %}\n    {% capture jsonl_string %}\n      {\"__typename\":\"Product\",\"id\":\"gid://shopify/Product/1234567890\",\"title\":\"Widget\",\"published_1234567890\": true}\n      {\"__typename\":\"ProductVariant\",\"inventoryItem\":{\"location_1234567890\":{\"location\":{\"name\":\"International\"},\"quantities\":[{\"quantity\":0}]}},\"__parentId\":\"gid://shopify/Product/1234567890\"}\n    {% endcapture %}\n\n    {% assign bulkOperation = hash %}\n    {% assign bulkOperation[\"objects\"] = jsonl_string | parse_jsonl %}\n  {% endif %}\n\n  {% assign bulk_products = bulkOperation.objects | where: \"__typename\", \"Product\" %}\n  {% assign bulk_variants = bulkOperation.objects | where: \"__typename\", \"ProductVariant\" %}\n\n  {% comment %}\n    -- loop through all products returned by the bulk operation\n  {% endcomment %}\n\n  {% for product in bulk_products %}\n    {% assign variants = bulk_variants | where: \"__parentId\", product.id %}\n\n    {% assign publication_id_inputs = array %}\n\n    {% comment %}\n      -- process each configured location in turn since we short-circuit a loop once any variant is found to be in stock there\n    {% endcomment %}\n\n    {% for keyval in location_names_and_ids %}\n      {% assign location_name = keyval[0] %}\n      {% assign location_id = keyval[1] %}\n      {% assign location_alias = location_id | replace: \"gid://shopify/Location/\", \"location_\" %}\n\n      {% assign has_variant_in_stock_at_location = nil %}\n\n      {% for variant in variants %}\n        {% if variant.inventoryItem[location_alias].quantities.first.quantity > 0 %}\n          {% assign has_variant_in_stock_at_location = true %}\n          {% break %}\n        {% endif %}\n      {% endfor %}\n\n      {% if has_variant_in_stock_at_location %}\n        {% log\n          message: \"Product has at least one variant in stock at this location; skipping.\",\n          product_title: product.title,\n          location_name: location_name\n        %}\n        {% continue %}\n      {% endif %}\n\n      {% assign unpublish_market_names = locations_and_market_names[location_name] | split: newline %}\n\n      {% if event.preview %}\n        {% assign unpublish_market_names = array | push: \"International\" %}\n      {% endif %}\n\n      {% log\n        message: \"All variants of this product are out of stock at this location; unpublish the product from the paired markets.\",\n        product_title: product.title,\n        location_name: location_name,\n        unpublish_market_names: unpublish_market_names\n      %}\n\n      {% comment %}\n        -- check if product is published to markets and if so save the publication ID inputs for unpublishing\n      {% endcomment %}\n\n      {% for unpublish_market_name in unpublish_market_names %}\n        {% assign publication_id = market_names_and_publication_ids[unpublish_market_name] %}\n        {% assign published_alias = publication_id | replace: \"gid://shopify/Publication/\", \"published_\" %}\n\n        {% if product[published_alias] %}\n          {% assign publication_id_input = hash %}\n          {% assign publication_id_input[\"publicationId\"] = publication_id %}\n          {% assign publication_id_inputs = publication_id_inputs | push: publication_id_input %}\n        {% endif %}\n      {% endfor %}\n    {% endfor %}\n\n    {% comment %}\n      -- \"DENY\" a product from markets by unpublishing it from the associated publications\n    {% endcomment %}\n\n    {% if publication_id_inputs != blank %}\n      {% action \"shopify\" %}\n        mutation {\n          publishableUnpublish(\n            id: {{ product.id | json }}\n            input: {{ publication_id_inputs | uniq | graphql_arguments }}\n          ) {\n            publishable {\n              ... on Product {\n                title\n              }\n            }\n            userErrors {\n              field\n              message\n            }\n          }\n        }\n      {% endaction %}\n\n    {% else %}\n      {% log\n        message: \"Product has already been unpublished from the paired markets.\",\n        product_title: product.title\n      %}\n    {% endif %}\n  {% endfor %}\n{% endif %}",
  "subscriptions": [
    "shopify/inventory_levels/update",
    "mechanic/user/trigger",
    "mechanic/shopify/bulk_operation"
  ],
  "subscriptions_template": "shopify/inventory_levels/update\nmechanic/user/trigger\nmechanic/shopify/bulk_operation",
  "tags": [
    "Bulk",
    "Markets",
    "Out of Stock",
    "Products",
    "Unpublish"
  ]
}
