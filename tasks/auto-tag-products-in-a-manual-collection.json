{
  "docs": "If you prefer to categorize your products using manual collections, but you still need your tags to match up, use this task to monitor your manual collection and automatically tag the products it contains.\n\nRun this task manually to auto-tag products in your configured collection, and to untag any products that are not in this collection. Otherwise, this task will run automatically whenever the configured collection is updated, which includes the addition or removal of products.\n\nThis task only supports manual collections, not automated collections. ([Learn about the differences here.](https://help.shopify.com/en/manual/products/collections#collection-types)) Configure this task with your collection ID. [Learn how to find this.](https://learn.mechanic.dev/techniques/finding-a-resource-id)",
  "halt_action_run_sequence_on_error": false,
  "name": "Auto-tag products in a manual collection",
  "online_store_javascript": null,
  "options": {
    "collection_tag__required": "sale",
    "collection_id__number_required": null
  },
  "order_status_javascript": null,
  "perform_action_runs_in_sequence": false,
  "script": "{% assign collection_tag = options.collection_tag__required %}\n{% assign collection_id = options.collection_id__number_required %}\n\n{% assign collection_tag_lower = collection_tag | downcase %}\n\n{% if event.topic == \"shopify/collections/update\" %}\n  {% comment %}\n    -- on collection update, exit if this is not the configured collection\n  {% endcomment %}\n\n  {% unless collection.id == collection_id or event.preview %}\n    {% break %}\n  {% endunless %}\n{% endif %}\n\n{% comment %}\n  -- get all of the product IDs currently in the collection\n{% endcomment %}\n\n{% assign cursor = nil %}\n{% assign collection_product_ids = array %}\n\n{% for n in (1..100) %}\n  {% capture query %}\n    query {\n      collection(id: {{ collection_id | prepend: \"gid://shopify/Collection/\" | json }}) {\n        products(\n          first: 250\n          after: {{ cursor | json }}\n        ) {\n          pageInfo {\n            hasNextPage\n            endCursor\n          }\n          nodes {\n            id\n          }\n        }\n      }\n    }\n  {% endcapture %}\n\n  {% assign result = query | shopify %}\n\n  {% if event.preview %}\n    {% capture result_json %}\n      {\n        \"data\": {\n          \"collection\": {\n            \"products\": {\n              \"nodes\": [\n                {\n                  \"id\": \"gid://shopify/Product/1234567890\"\n                }\n              ]\n            }\n          }\n        }\n      }\n    {% endcapture %}\n\n    {% assign result = result_json | parse_json %}\n  {% endif %}\n\n  {% assign collection_product_ids\n    = result.data.collection.products.nodes\n    | map: \"id\"\n    | concat: collection_product_ids\n  %}\n\n  {% if result.data.collection.products.pageInfo.hasNextPage %}\n    {% assign cursor = result.data.collection.products.pageInfo.endCursor %}\n  {% else %}\n    {% break %}\n  {% endif %}\n{% endfor %}\n\n{% comment %}\n  -- get IDs for all products with collection tag\n{% endcomment %}\n\n{% assign cursor = nil %}\n{% assign tagged_product_ids = array %}\n\n{% for n in (0..100) %}\n  {% capture query %}\n    query {\n      products(\n        first: 250\n        after: {{ cursor | json }}\n        query: {{ collection_tag | json | prepend: \"tag:\" | json }}\n      ) {\n        pageInfo {\n          hasNextPage\n          endCursor\n        }\n        nodes {\n          id\n          tags\n        }\n      }\n    }\n  {% endcapture %}\n\n  {% assign result = query | shopify %}\n\n  {% if event.preview %}\n    {% capture result_json %}\n      {\n        \"data\": {\n          \"products\": {\n            \"nodes\": [\n              {\n                \"id\": \"gid://shopify/Product/2345678901\",\n                \"tags\": {{ collection_tag | json }}\n              }\n            ]\n          }\n        }\n      }\n    {% endcapture %}\n\n    {% assign result = result_json | parse_json %}\n  {% endif %}\n\n  {% comment %}\n    -- double check that the collection tag exists on each product to avoid occasional query filter quirkiness\n  {% endcomment %}\n\n  {% for product in result.data.products.nodes %}\n    {% assign product_tags_lower = product.tags | json | downcase | parse_json %}\n\n    {% if product_tags_lower contains collection_tag_lower %}\n      {% assign tagged_product_ids = tagged_product_ids | push: product.id %}\n    {% endif %}\n  {% endfor %}\n\n  {% if result.data.products.pageInfo.hasNextPage %}\n    {% assign cursor = result.data.products.pageInfo.endCursor %}\n  {% else %}\n    {% break %}\n  {% endif %}\n{% endfor %}\n\n{% comment %}\n  -- add and remove the collection tag from products\n{% endcomment %}\n\n{% for collection_product_id in collection_product_ids %}\n  {% unless tagged_product_ids contains collection_product_id %}\n    {% action \"shopify\" %}\n      mutation {\n        tagsAdd(\n          id: {{ collection_product_id | json }}\n          tags: {{ collection_tag | json }}\n        ) {\n          userErrors {\n            field\n            message\n          }\n        }\n      }\n    {% endaction %}\n  {% endunless %}\n{% endfor %}\n\n{% for tagged_product_id in tagged_product_ids %}\n  {% unless collection_product_ids contains tagged_product_id %}\n    {% action \"shopify\" %}\n      mutation {\n        tagsRemove(\n          id: {{ tagged_product_id | json }}\n          tags: {{ collection_tag | json }}\n        ) {\n          userErrors {\n            field\n            message\n          }\n        }\n      }\n    {% endaction %}\n  {% endunless %}\n{% endfor %}\n",
  "subscriptions": [
    "mechanic/user/trigger",
    "shopify/collections/update"
  ],
  "subscriptions_template": "mechanic/user/trigger\nshopify/collections/update",
  "tags": [
    "Auto-Tag",
    "Collections",
    "Products"
  ]
}
