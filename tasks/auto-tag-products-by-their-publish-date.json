{
  "docs": "This task formats the publish date of a product (according to the format you choose), adds a prefix (also of your choosing), and applies it as a tag to the product. Run this task manually to scan your entire catalog of active products, or wait for the task to run automatically when products are created or updated.\n\nUse [strfti.me](http://www.strfti.me) to build a date format that suits you. Use the previews to the right of the task options form to verify that your date format does what you expect. If you've got any questions, use the chat button in the corner. :)",
  "halt_action_run_sequence_on_error": false,
  "name": "Auto-tag products by their publish date",
  "online_store_javascript": null,
  "options": {
    "date_format__required": "%B %Y",
    "tag_prefix__required": "Published: "
  },
  "order_status_javascript": null,
  "perform_action_runs_in_sequence": false,
  "script": "{% assign date_format = options.date_format__required %}\n{% assign tag_prefix = options.tag_prefix__required %}\n\n{% if date_format contains \",\" %}\n  {% error \"Tags are not permitted to include commas (','). :)\" %}\n{% endif %}\n\n{% if event.topic contains \"shopify/products/\" %}\n  {% capture query %}\n    query {\n      product(id: {{ product.admin_graphql_api_id | json }}) {\n        id\n        publishedAt\n        tags\n      }\n    }\n  {% endcapture %}\n\n  {% assign result = query | shopify %}\n\n  {% assign products = array | push: result.data.product %}\n\n{% elsif event.topic == \"mechanic/user/trigger\" %}\n  {% comment %}\n    -- get up to 25K active products in the shop\n  {% endcomment %}\n\n  {% assign cursor = nil %}\n  {% assign products = array %}\n\n  {% for n in (1..100) %}\n    {% capture query %}\n      query {\n        products(\n          first: 250\n          after: {{ cursor | json }}\n          query: \"status:active\"\n        ) {\n          pageInfo {\n            hasNextPage\n            endCursor\n          }\n          nodes {\n            id\n            publishedAt\n            tags\n          }\n        }\n      }\n    {% endcapture %}\n\n    {% assign result = query | shopify %}\n\n    {% if event.preview %}\n      {% capture result_json %}\n        {\n          \"data\": {\n            \"products\": {\n              \"nodes\": [\n                {\n                  \"id\": \"gid://shopify/Product/1234567890\"\n                }\n              ]\n            }\n          }\n        }\n      {% endcapture %}\n\n      {% assign result = result_json | parse_json %}\n    {% endif %}\n\n    {% assign products = products | concat: result.data.products.nodes %}\n\n    {% if result.data.products.pageInfo.hasNextPage %}\n      {% assign cursor = result.data.products.pageInfo.endCursor %}\n    {% else %}\n      {% break %}\n    {% endif %}\n  {% endfor %}\n{% endif %}\n\n{% if event.preview %}\n  {% capture products_json %}\n    [\n      {\n        \"id\": \"gid://shopify/Product/1234567890\",\n        \"publishedAt\": {{ \"now\" | date: \"%F\" | json }},\n        \"tags\": [\n          {{ \"now - 1 year\" | date: date_format | prepend: tag_prefix | json }}\n        ]\n      }\n    ]\n  {% endcapture %}\n\n  {% assign products = products_json | parse_json %}\n{% endif %}\n\n{% comment %}\n  -- process all products from paginated query, or the single product that initiated the webhook event\n{% endcomment %}\n\n{% for product in products %}\n  {% assign calculated_published_at_tag = nil %}\n  {% assign new_published_at_tag = nil %}\n  {% assign old_published_at_tags = array %}\n\n  {% if product.publishedAt != blank %}\n    {% assign calculated_published_at_tag = product.publishedAt | date: date_format | prepend: tag_prefix %}\n  {% endif %}\n\n  {% for tag in product.tags %}\n    {% if tag == calculated_published_at_tag %}\n      {% continue %}\n    {% endif %}\n\n    {% assign potential_tag_prefix = tag | slice: 0, tag_prefix.size %}\n\n    {% if potential_tag_prefix == tag_prefix %}\n      {% assign old_published_at_tags = old_published_at_tags | push: tag %}\n    {% endif %}\n  {% endfor %}\n\n  {% unless product.tags contains calculated_published_at_tag %}\n    {% assign new_published_at_tag = calculated_published_at_tag %}\n  {% endunless %}\n\n  {% if new_published_at_tag != blank or old_published_at_tags != blank %}\n    {% action \"shopify\" %}\n      mutation {\n        {% if new_published_at_tag != blank %}\n          tagsAdd(\n            id: {{ product.id | json }}\n            tags: {{ new_published_at_tag | json }}\n          ) {\n            userErrors {\n              field\n              message\n            }\n          }\n        {% endif %}\n\n        {% if old_published_at_tags != blank %}\n          tagsRemove(\n            id: {{ product.id | json }}\n            tags: {{ old_published_at_tags | json }}\n          ) {\n            userErrors {\n              field\n              message\n            }\n          }\n        {% endif %}\n      }\n    {% endaction %}\n  {% endif %}\n{% endfor %}\n",
  "subscriptions": [
    "mechanic/user/trigger",
    "shopify/products/create",
    "shopify/products/update"
  ],
  "subscriptions_template": "mechanic/user/trigger\nshopify/products/create\nshopify/products/update",
  "tags": [
    "Auto-Tag",
    "Products",
    "Publish"
  ]
}
