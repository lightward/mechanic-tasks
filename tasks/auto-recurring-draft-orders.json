{
  "docs": "This task searches for draft orders having the configured tag, and duplicates each one (minus the tag used for searching). Optionally, this task can automatically send an invoice to the customer on file, after the new draft order is created. Or, this task can auto-complete the draft order, which will mark it as paid unless the original draft order being duplicated has NET or EVENT payment terms.\n\nUse the \"Cycle start date\" and \"Number of days in cycle\" options to control the frequency of the recurring invoices. The task may also be run manually, but the cycle will still be checked to make sure the current day is valid for the cycle.\n\n**IMPORTANT**:\n- When duplicating invoices, this task will include most discount applications from the original draft order, including custom order and line item discounts, discount codes, and whether or not automatic discounts can be applied.\n- Auto-completed draft orders which do not have payment terms will result in the standard Shopify order confirmation email being sent to the customer on file for the original draft order.\n- EVENT payment terms include \"Payment on receipt\" and \"Payment on fulfillment\"\n- FIXED payment terms are not supported by this task\n",
  "halt_action_run_sequence_on_error": false,
  "name": "Auto-recurring draft orders",
  "online_store_javascript": null,
  "options": {
    "draft_order_tag__required": null,
    "cycle_start_date__date_required": null,
    "number_of_days_in_cycle__number_required": "7",
    "complete_the_order_after_creating__boolean": null,
    "send_email_invoice_after_creating__boolean": false,
    "email_invoice_subject": null,
    "email_invoice_bcc__email_array": null,
    "email_invoice_custom_message__multiline": null
  },
  "order_status_javascript": null,
  "perform_action_runs_in_sequence": false,
  "script": "{% assign draft_order_tag = options.draft_order_tag__required %}\n{% assign cycle_start_date = options.cycle_start_date__date_required %}\n{% assign number_of_days_in_cycle = options.number_of_days_in_cycle__number_required %}\n{% assign complete_the_order_after_creating = options.complete_the_order_after_creating__boolean %}\n{% assign send_email_invoice_after_creating = options.send_email_invoice_after_creating__boolean %}\n{% assign email_invoice_subject = options.email_invoice_subject %}\n{% assign email_invoice_bcc = options.email_invoice_bcc__email_array %}\n{% assign email_invoice_custom_message = options.email_invoice_custom_message__multiline %}\n\n{% if send_email_invoice_after_creating and complete_the_order_after_creating %}\n  {% error \"Choose either an email invoice or completing the order - not both. :)\" %}\n{% endif %}\n\n{% if event.topic == \"mechanic/user/trigger\" or event.topic contains \"mechanic/scheduler/\" %}\n  {% comment %}\n    -- see if today is valid run day based on the task cycle configuration\n  {% endcomment %}\n\n  {% assign run_qualifies = false %}\n  {% assign cycle_start_date = cycle_start_date %}\n  {% assign cycle_start_d    = cycle_start_date | date: \"%s\" | times: 1 | divided_by: 60 | divided_by: 60 | divided_by: 24 %}\n  {% assign now_d            = \"now\"            | date: \"%s\" | times: 1 | divided_by: 60 | divided_by: 60 | divided_by: 24 %}\n  {% assign day_gap          = now_d | minus: cycle_start_d | modulo: number_of_days_in_cycle %}\n\n  {% if day_gap == 0 or event.preview %}\n    {% assign run_qualifies = true %}\n  {% else %}\n    {% log %}\n      {{ number_of_days_in_cycle | minus: day_gap | prepend: \"Waiting another \" | append: \" day(s) for cycle to complete\" | json }}\n    {% endlog %}\n  {% endif %}\n\n  {% if run_qualifies %}\n    {% comment %}\n      -- get all payment terms templates available in shop, to support duplicating draft orders with payment terms\n    {% endcomment %}\n\n    {% capture query %}\n      query {\n        paymentTermsTemplates {\n          id\n          name\n          description\n          paymentTermsType\n          dueInDays\n        }\n      }\n    {% endcapture %}\n\n    {% assign result = query | shopify %}\n\n    {% if event.preview %}\n      {% capture result_json %}\n        {\n          \"data\": {\n            \"paymentTermsTemplates\": [\n              {\n                \"id\": \"gid://shopify/PaymentTermsTemplate/4\",\n                \"name\": \"Net 30\",\n                \"description\": \"Within 30 days\",\n                \"paymentTermsType\": \"NET\",\n                \"dueInDays\": 30\n              }\n            ]\n          }\n        }\n      {% endcapture %}\n\n      {% assign result = result_json | parse_json %}\n    {% endif %}\n\n    {% assign payment_terms_templates = result.data.paymentTermsTemplates %}\n\n    {% comment %}\n      -- get all draft orders with the configured tag\n    {% endcomment %}\n\n    {% assign cursor = nil %}\n\n    {% for n in (0..10) %}\n      {% capture query %}\n        query {\n          draftOrders(\n            first: 100\n            after: {{ cursor | json }}\n            query: {{ \"tag:\" | append: draft_order_tag | json }}\n            sortKey: NUMBER\n          ) {\n            pageInfo {\n              hasNextPage\n              endCursor\n            }\n            nodes {\n              id\n              name\n              createdAt\n              acceptAutomaticDiscounts\n              allowDiscountCodesInCheckout\n              appliedDiscount {\n                amountSet {\n                  shopMoney {\n                    amount\n                    currencyCode\n                  }\n                }\n                description\n                title\n                value\n                valueType\n              }\n              billingAddress {\n                address1\n                address2\n                city\n                company\n                countryCodeV2\n                firstName\n                lastName\n                phone\n                provinceCode\n                zip\n              }\n              customer {\n                id\n              }\n              customAttributes {\n                key\n                value\n              }\n              discountCodes\n              email\n              lineItems(first: 150) {\n                nodes {\n                  appliedDiscount {\n                    amountSet {\n                      shopMoney {\n                        amount\n                        currencyCode\n                      }\n                    }\n                    description\n                    title\n                    value\n                    valueType\n                  }\n                  customAttributes {\n                    key\n                    value\n                  }\n                  originalUnitPriceWithCurrency {\n                    amount\n                    currencyCode\n                  }\n                  quantity\n                  sku\n                  taxable\n                  title\n                  variant {\n                    id\n                  }\n                  weight {\n                    unit\n                    value\n                  }\n                }\n              }\n              note2\n              paymentTerms {\n                id\n                paymentTermsName\n                paymentTermsType\n                paymentSchedules(first: 1) {\n                  nodes {\n                    id\n                  }\n                }\n              }\n              shippingAddress {\n                address1\n                address2\n                city\n                company\n                countryCodeV2\n                firstName\n                lastName\n                phone\n                provinceCode\n                zip\n              }\n              shippingLine {\n                title\n                shippingRateHandle\n                originalPriceSet {\n                  shopMoney {\n                    amount\n                    currencyCode\n                  }\n                }\n              }\n              tags\n              taxExempt\n            }\n          }\n        }\n      {% endcapture %}\n\n      {% assign result = query | shopify %}\n\n      {% if event.preview %}\n        {% capture result_json %}\n          {\n            \"data\": {\n              \"draftOrders\": {\n                \"nodes\": [\n                  {\n                    \"id\": \"gid://shopify/DraftOrder/1234567890\",\n                    \"billingAddress\": {\n                      \"address1\": \"123 Main Street\",\n                      \"address2\": \"\",\n                      \"city\": \"Springfield\",\n                      \"company\": \"Widgets Inc\",\n                      \"countryCodeV2\": \"US\",\n                      \"firstName\": \"Marge\",\n                      \"lastName\": \"Simpson\",\n                      \"phone\": null,\n                      \"provinceCode\": \"IL\",\n                      \"zip\": \"62701\"\n                    },\n                    \"customer\": {\n                      \"id\": \"gid://shopify/Customer/1234567890\"\n                    },\n                    \"email\": \"customer@example.com\",\n                    \"lineItems\": {\n                      \"nodes\": [\n                        {\n                          \"originalUnitPriceWithCurrency\": {\n                            \"amount\": \"5.0\",\n                            \"currencyCode\": \"USD\"\n                          },\n                          \"quantity\": 2,\n                          \"requiresShipping\": false,\n                          \"sku\": \"WIDGET-BEST\",\n                          \"taxable\": true,\n                          \"title\": \"Widget, Our Best\",\n                          \"weight\": {\n                            \"unit\": \"Grams\",\n                            \"value\": 5\n                          }\n                        }\n                      ]\n                    },\n                    \"paymentTerms\": {\n                      \"paymentTermsName\": \"Net 30\",\n                      \"paymentTermsType\": \"NET\"\n                    },\n                    \"tags\": {{ array | push: draft_order_tag, \"preview-tag\" | json }}\n                  }\n                ]\n              }\n            }\n          }\n        {% endcapture %}\n\n        {% assign result = result_json | parse_json %}\n      {% endif %}\n\n      {% for draft_order in result.data.draftOrders.nodes %}\n        {% log\n          message: \"Draft order qualifies to be duplicated\",\n          original_draft_order: draft_order\n        %}\n\n        {% comment %}\n          -- marking draft orders as pending upon completion has been deprecated; added support for NET and EVENT payment terms\n        {% endcomment %}\n\n        {% assign payment_terms_input = nil %}\n\n        {% if draft_order.paymentTerms != blank %}\n          {% assign payment_terms_template_id\n            = payment_terms_templates\n            | where: \"name\", draft_order.paymentTerms.paymentTermsName\n            | map: \"id\"\n            | first\n          %}\n\n          {% if draft_order.paymentTerms.paymentTermsType == \"FIXED\" %}\n            {% log\n              message: \"FIXED payment terms are not supported by this task because arbitrary due dates cannot be calculated. The new draft order will not be created with any payment terms.\",\n              original_draft_order_name: draft_order.name\n            %}\n\n          {% elsif payment_terms_template_id == blank %}\n            {% log\n              message: \"Payment terms on original draft order could not be matched to available payment terms in shop.\",\n              payment_terms_templates: payment_terms_templates,\n              original_draft_order: draft_order\n            %}\n\n          {% else %}\n            {% capture payment_terms_input %}\n              paymentTerms: {\n                paymentTermsTemplateId: {{ payment_terms_template_id | json }}\n                {% if draft_order.paymentTerms.paymentTermsType == \"NET\" %}\n                  paymentSchedules: {\n                    issuedAt: {{ \"now\" | date: \"%Y-%m-%dT%H:%M:%SZ\", tz: \"UTC\" | json }}\n                  }\n                {% endif %}\n              }\n            {% endcapture %}\n          {% endif %}\n        {% endif %}\n\n        {% comment %}\n          -- create new recurring draft order with as much of the original draft order parameters as possible\n        {% endcomment %}\n\n        {% action \"shopify\" %}\n          mutation {\n            draftOrderCreate(\n              input: {\n                acceptAutomaticDiscounts: {{ draft_order.acceptAutomaticDiscounts | json }}\n                allowDiscountCodesInCheckout: {{ draft_order.allowDiscountCodesInCheckout | json }}\n                {% if draft_order.appliedDiscount %}\n                  appliedDiscount: {\n                    description: {{ draft_order.appliedDiscount.description | json }}\n                    title: {{ draft_order.appliedDiscount.title | json }}\n                    value: {{ draft_order.appliedDiscount.value }}\n                    valueType: {{ draft_order.appliedDiscount.valueType }}\n                  }\n                {% endif %}\n                {% if draft_order.billingAddress %}\n                  billingAddress: {\n                    address1: {{ draft_order.billingAddress.address1 | json }}\n                    address2: {{ draft_order.billingAddress.address2 | json }}\n                    city: {{ draft_order.billingAddress.city | json }}\n                    company: {{ draft_order.billingAddress.company | json }}\n                    countryCode: {{ draft_order.billingAddress.countryCodeV2 }}\n                    firstName: {{ draft_order.billingAddress.firstName | json }}\n                    lastName: {{ draft_order.billingAddress.lastName | json }}\n                    phone: {{ draft_order.billingAddress.phone | json }}\n                    provinceCode: {{ draft_order.billingAddress.provinceCode | json }}\n                    zip: {{ draft_order.billingAddress.zip | json }}\n                  }\n                {% endif %}\n                {% if draft_order.customer %}\n                  purchasingEntity: {\n                    customerId: {{ draft_order.customer.id | json }}\n                  }\n                {% endif %}\n                {% if draft_order.customAttributes != empty %}\n                  customAttributes: [\n                    {% for custom_attribute in draft_order.customAttributes %}\n                      {\n                        key: {{ custom_attribute.key | json }}\n                        value: {{ custom_attribute.value | json }}\n                      }\n                    {% endfor %}\n                  ]\n                {% endif %}\n                {% if draft_order.discountCodes != blank %}\n                  discountCodes: {{ draft_order.discountCodes | json }}\n                {% endif %}\n                {% if draft_order.email %}\n                  email: {{ draft_order.email | json }}\n                {% endif %}\n                lineItems: [\n                  {% for line_item in draft_order.lineItems.nodes %}\n                    {\n                      {% if line_item.appliedDiscount %}\n                        appliedDiscount: {\n                          description: {{ line_item.appliedDiscount.description | json }}\n                          title: {{ line_item.appliedDiscount.title | json }}\n                          value: {{ line_item.appliedDiscount.value | json }}\n                          valueType: {{ line_item.appliedDiscount.valueType }}\n                        }\n                      {% endif %}\n                      {% if line_item.customAttributes != empty %}\n                        customAttributes: [\n                          {% for custom_attribute in line_item.customAttributes %}\n                            {\n                              key: {{ custom_attribute.key | json }}\n                              value: {{ custom_attribute.value | json }}\n                            }\n                          {% endfor %}\n                        ]\n                      {% endif %}\n                      {% if line_item.originalUnitPriceWithCurrency.amount %}\n                        originalUnitPriceWithCurrency: {\n                          amount: {{ line_item.originalUnitPriceWithCurrency.amount | json }}\n                          currencyCode: {{ line_item.originalUnitPriceWithCurrency.currencyCode }}\n                        }\n                      {% endif %}\n                      quantity: {{ line_item.quantity | json }}\n                      {% if line_item.requiresShipping != nil %}\n                        requiresShipping: {{ line_item.requiresShipping | json }}\n                      {% endif %}\n                      {% if line_item.sku %}\n                        sku: {{ line_item.sku | json }}\n                      {% endif %}\n                      taxable: {{ line_item.taxable | json }}\n                      title: {{ line_item.title | json }}\n                      {% if line_item.variant %}\n                        variantId: {{ line_item.variant.id | json }}\n                      {% endif %}\n                      {% if line_item.weight and line_item.weight.value != 0 %}\n                        weight: {\n                          value: {{ line_item.weight.value | json }}\n                          unit: {{ line_item.weight.unit }}\n                        }\n                      {% endif %}\n                    }\n                  {% endfor %}\n                ]\n                {% if send_email_invoice_after_creating or complete_the_order_after_creating %}\n                  metafields: [\n                    {\n                      namespace: \"mechanic\"\n                      key: {% if send_email_invoice_after_creating %}\"autoinvoice\"{% else %}\"autocomplete\"{% endif %}\n                      value: \"true\"\n                      type: \"boolean\"\n                    }\n                  ]\n                {% endif %}\n                {% if payment_terms_input != blank %}\n                  {{ payment_terms_input }}\n                {% endif %}\n                {% if draft_order.note2 != blank %}\n                  note: {{ draft_order.note2 | json }}\n                {% endif %}\n                {% if draft_order.shippingAddress %}\n                  shippingAddress: {\n                    address1: {{ draft_order.shippingAddress.address1 | json }}\n                    address2: {{ draft_order.shippingAddress.address2 | json }}\n                    city: {{ draft_order.shippingAddress.city | json }}\n                    company: {{ draft_order.shippingAddress.company | json }}\n                    countryCode: {{ draft_order.shippingAddress.countryCodeV2 }}\n                    firstName: {{ draft_order.shippingAddress.firstName | json }}\n                    lastName: {{ draft_order.shippingAddress.lastName | json }}\n                    phone: {{ draft_order.shippingAddress.phone | json }}\n                    provinceCode: {{ draft_order.shippingAddress.provinceCode | json }}\n                    zip: {{ draft_order.shippingAddress.zip | json }}\n                  }\n                {% endif %}\n                {% if draft_order.shippingLine %}\n                  shippingLine: {\n                    priceWithCurrency: {\n                      amount: {{ draft_order.shippingLine.originalPriceSet.shopMoney.amount | json }}\n                      currencyCode: {{ draft_order.shippingLine.originalPriceSet.shopMoney.currencyCode }}\n                    }\n                    shippingRateHandle: {{ draft_order.shippingLine.shippingRateHandle | json }}\n                    title: {{ draft_order.shippingLine.title | json }}\n                  }\n                {% endif %}\n                tags: {{ draft_order.tags | remove_tag: draft_order_tag | json }}\n                taxExempt: {{ draft_order.taxExempt | json }}\n                useCustomerDefaultAddress: false\n              }\n            ) {\n              draftOrder {\n                id\n                name\n              }\n              userErrors {\n                field\n                message\n              }\n            }\n          }\n        {% endaction %}\n      {% endfor %}\n\n      {% if result.data.draftOrders.pageInfo.hasNextPage %}\n        {% assign cursor = result.data.draftOrders.pageInfo.endCursor %}\n      {% else %}\n        {% break %}\n      {% endif %}\n    {% endfor %}\n  {% endif %}\n\n{% elsif event.topic == \"shopify/draft_orders/create\" and send_email_invoice_after_creating %}\n  {% comment %}\n    -- check to see if this newly created draft order has the Mechanic autoinvoice metafield\n  {% endcomment %}\n\n  {% capture query %}\n    query {\n      draftOrder(\n        id: {{ draft_order.admin_graphql_api_id | json }}\n      ) {\n        metafield(\n          namespace: \"mechanic\"\n          key: \"autoinvoice\"\n        ) {\n          value\n        }\n      }\n    }\n  {% endcapture %}\n\n  {% assign result = query | shopify %}\n\n  {% if draft_order.email == blank or result.data.draftOrder.metafield == blank %}\n    {% unless event.preview %}\n      {% log \"Draft order does not contain the Mechanic autoinvoice metafield or the draft order does not have an email; no invoice will be sent.\" %}\n      {% break %}\n    {% endunless %}\n  {% endif %}\n\n  {% action \"shopify\" %}\n    mutation {\n      draftOrderInvoiceSend(\n        id: {{ draft_order.admin_graphql_api_id | json }}\n        email: {\n          {% if email_invoice_subject != blank %}\n            subject: {{ email_invoice_subject | json }}\n          {% endif %}\n          bcc: {{ email_invoice_bcc | json }}\n          customMessage: {{ email_invoice_custom_message | json }}\n        }\n      ) {\n        userErrors {\n          field\n          message\n        }\n      }\n    }\n  {% endaction %}\n\n{% elsif event.topic == \"shopify/draft_orders/create\" and complete_the_order_after_creating %}\n  {% comment %}\n    -- check to see if this newly created draft order has the Mechanic autocomplete metafield\n  {% endcomment %}\n\n  {% capture query %}\n    query {\n      draftOrder(\n        id: {{ draft_order.admin_graphql_api_id | json }}\n      ) {\n        metafield(\n          namespace: \"mechanic\"\n          key: \"autocomplete\"\n        ) {\n          value\n        }\n      }\n    }\n  {% endcapture %}\n\n  {% assign result = query | shopify %}\n\n  {% if result.data.draftOrder.metafield == blank %}\n    {% unless event.preview %}\n      {% log \"Draft order does not contain the Mechanic autocomplete metafield.\" %}\n      {% break %}\n    {% endunless %}\n  {% endif %}\n\n  {% action \"shopify\" %}\n    mutation {\n      draftOrderComplete(\n        id: {{ draft_order.admin_graphql_api_id | json }}\n      ) {\n        draftOrder {\n          order {\n            id\n          }\n        }\n        userErrors {\n          field\n          message\n        }\n      }\n    }\n  {% endaction %}\n{% endif %}\n",
  "subscriptions": [
    "mechanic/user/trigger",
    "mechanic/scheduler/daily"
  ],
  "subscriptions_template": "mechanic/user/trigger\nmechanic/scheduler/daily\n{% if options.send_email_invoice_after_creating__boolean or options.complete_the_order_after_creating__boolean %}\n  shopify/draft_orders/create\n{% endif %}",
  "tags": [
    "Draft Orders",
    "Recurring"
  ]
}
