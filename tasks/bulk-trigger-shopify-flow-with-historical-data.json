{
  "name": "Bulk trigger Shopify Flow with historical data",
  "options": {
    "start_date": "",
    "end_date": "",
    "flag_value": "mechanic-batch"
  },
  "subscriptions": [
    "mechanic/user/trigger",
    "mechanic/shopify/bulk_operation"
  ],
  "subscriptions_template": "mechanic/user/trigger\nmechanic/shopify/bulk_operation",
  "script": "{% assign start_date = options.start_date %}\n{% assign end_date = options.end_date %}\n\n{% if start_date %}\n  {% assign valid_start_date = start_date | parse_date: \"%Y-%m-%d\" %}\n  {% if valid_start_date == blank %}\n    {% error message: \"A start date could not be parsed. If you choose to include, ensure the format is YYYY-MM-DD.\"  %}\n  {% endif %}\n{% endif %}\n\n{% if end_date %}\n  {% assign valid_end_date = end_date | parse_date: \"%Y-%m-%d\" %}\n  {% if valid_end_date == blank %}\n    {% error message: \"An end date could not be parsed. If you choose to include, ensure the format is YYYY-MM-DD.\"  %}\n  {% endif %}\n{% endif %}\n\n{% if event.topic == \"mechanic/user/trigger\" %}\n  {% capture bulk_operation_query %}\n    query {\n      orders\n      {% if start_date and end_date %}\n        (query: \"created_at:>={{start_date}} AND created_at:<{{end_date}}\")     \n      {% elsif start_date %}\n        (query: \"created_at:>={{start_date}}\")\n      {% elsif end_date %}\n        (query: \"created_at:<{{end_date}}\")    \n      {% endif %}  \n       {\n        edges {\n          node {\n            __typename\n            legacyResourceId \n          }\n        }\n      }\n    }\n  {% endcapture %}\n\n  {% action \"shopify\" %}\n    mutation {\n      bulkOperationRunQuery(\n        query: {{ bulk_operation_query | json }}\n      ) {\n        bulkOperation {\n          id\n          status\n        }\n        userErrors {\n          field\n          message\n        }\n      }\n    }\n  {% endaction %}\n{% elsif event.topic == \"mechanic/shopify/bulk_operation\" %}\n  {% if event.preview %}\n    {% capture bulkOperation_objects_jsonl %}\n      {\"__typename\":\"Order\",\"legacyResourceId\":\"1234567890\"}\n    {% endcapture %}\n\n    {% assign bulkOperation = hash %}\n    {% assign bulkOperation[\"objects\"] = bulkOperation_objects_jsonl | parse_jsonl %}\n  {% endif %}\n\n  {% assign orders = bulkOperation.objects | where: \"__typename\", \"Order\" %}\n{% endif %}\n\n{% for order in orders %}\n  {% action \"flow\" %}\n    {\n      {% comment %}\n        Remember, Flow only accepts numeric IDs - not full global ID strings.\n      {% endcomment %}\n      \"order_id\": {{ order.legacyResourceId | json }},\n\n      {% comment %}\n        This flag value is intended to be used in Flow conditions; see the task docs for more details.\n      {% endcomment %}\n      \"user_string\": {{ options.flag_value | append: \"\" | json }}\n    }\n  {% endaction %}\n{% endfor %}",
  "docs": "Do you wish Shopify Flow workflows could run on historical data? Now they can! :D\n\nThis task queries your orders, and calls Shopify Flow for each order returned. You can optionally provide a date range to limit the orders to be processed. If provided, these dates must be in this format *YYYY-MM-DD*.\n\nIt includes a flag value, intended to help Flow workflows identify the Mechanic order triggers that are relevant, ignoring those that are not. The flag value _only_ has significance if there are Flow workflows looking for its value, using workflow conditions. A Flow condition for this purpose might read like, _if User string is equal to 'mechanic-import'_.\n\nThis task is written to process orders, but can be modified to process products or customers. To make a change like this, open the task code, and update the bulk operation to query for the right resources. Then, update the Flow action to send `product_id` or `customer_id` as appropriate, instead of `order_id`.",
  "halt_action_run_sequence_on_error": false,
  "online_store_javascript": null,
  "order_status_javascript": null,
  "perform_action_runs_in_sequence": false,
  "tags": [
    "Integration",
    "Shopify Flow"
  ]
}
