{
  "docs": "Need to print price tags whenever a SKU is added? Or make a note of a new variant price? Use this task to tag products that need your attention, whenever a specific variant attribute changes.\n\nConfigure this task with a specific variant attribute to watch for changes. Valid attributes include \"barcode\", \"compareAtPrice\", \"price\", \"sku\", and \"taxable\".\n\n*Important:* After saving this task, you must click the \"Run task\" button before the task will start monitoring your existing products. This task run will allow the task to scan your existing products, and store information about their existing variant attributes. This is what lets the task determine whether or not a specific variant attribute has changed.\n\nEnable the \"Tag product with the titles of each variant that has changed\" option to have this task add a separate tag for _each_ variant that has had its specific attribute change values. The variant title will be appended to your configured tag, resulting in one or more tags per product, resembling \"SKU RED\" or \"repriced 5 / SMALL\", depending on your tag choice and variant options.",
  "halt_action_run_sequence_on_error": false,
  "name": "Auto-tag products when their variants change",
  "online_store_javascript": null,
  "options": {
    "variant_attribute_to_watch_for_changes__required": null,
    "tag_product_with_the_titles_of_each_variant_that_has_changed__boolean": null,
    "product_tag_to_add__required": null,
    "ignore_products_with_any_of_these_tags__array": null
  },
  "order_status_javascript": null,
  "perform_action_runs_in_sequence": false,
  "script": "{% assign variant_attribute = options.variant_attribute_to_watch_for_changes__required %}\n{% assign tag_product_with_variant_titles = options.tag_product_with_the_titles_of_each_variant_that_has_changed__boolean %}\n{% assign product_tag_to_add = options.product_tag_to_add__required %}\n{% assign ignore_products_with_any_of_these_tags = options.ignore_products_with_any_of_these_tags__array %}\n\n{% comment %}\n  -- verify a supported variant value has been configured\n{% endcomment %}\n\n{% assign valid_variant_attributes = \"barcode,compareAtPrice,price,sku,taxable\" | split: \",\" %}\n\n{% unless valid_variant_attributes contains variant_attribute %}\n  {% capture message -%}\n    {{ variant_attribute | json }} is not a valid variant attribute. Choose one of these instead: {{ valid_variant_attributes | join: \", \" }}\n  {%- endcapture %}\n  {% error message %}\n{% endunless %}\n\n{% assign metafield_key = \"variant_ids_and_\" | append: variant_attribute | append: \"s\" %}\n\n{% assign products = array %}\n\n{% if event.topic == \"shopify/products/create\" or event.topic == \"shopify/products/update\" %}\n  {% comment %}\n    -- get all variants (up to 2K) for this product\n  {% endcomment %}\n\n  {% assign cursor = nil %}\n  {% assign variants = array %}\n\n  {% for n in (1..8) %}\n    {% capture query %}\n      query {\n        product(id: {{ product.admin_graphql_api_id | json }}) {\n          id\n          tags\n          metafield(\n            namespace: \"mechanic\"\n            key: {{ metafield_key | json }}\n          ) {\n            jsonValue\n          }\n          variants(\n            first: 250\n            after: {{ cursor | json }}\n          ) {\n            pageInfo {\n              hasNextPage\n              endCursor\n            }\n            nodes {\n              legacyResourceId\n              title\n              {{ variant_attribute }}\n            }\n          }\n        }\n      }\n    {% endcapture %}\n\n    {% assign result = query | shopify %}\n\n    {% if event.preview %}\n      {% capture result_json %}\n        {\n          \"data\": {\n            \"product\": {\n              \"id\": \"gid://shopify/Product/1234567890\",\n              \"variants\": {\n                \"nodes\": [\n                  {\n                    \"legacyResourceId\": \"1234567890\",\n                    \"title\": \"Widget\",\n                    {{ variant_attribute | json }}: \"PREVIEW\"\n                  }\n                ]\n              }\n            }\n          }\n        }\n      {% endcapture %}\n\n      {% assign result = result_json | parse_json %}\n    {% endif %}\n\n    {% assign products[0] = result.data.product %}\n    {% assign variants = variants | concat: result.data.product.variants.nodes %}\n\n    {% if result.data.product.variants.pageInfo.hasNextPage %}\n      {% assign cursor = result.data.product.variants.pageInfo.endCursor %}\n    {% else %}\n      {% break %}\n    {% endif %}\n  {% endfor %}\n\n{% elsif event.topic == \"mechanic/user/trigger\" %}\n  {% comment %}\n    -- get all active products in the shop and their variants\n  {% endcomment %}\n\n  {% capture bulk_operation_query %}\n    query {\n      products(\n        query: \"status:active\"\n      ) {\n        edges {\n          node {\n            __typename\n            id\n            tags\n            metafield(\n              namespace: \"mechanic\"\n              key: {{ metafield_key | json }}\n            ) {\n              jsonValue\n            }\n            variants {\n              edges {\n                node {\n                  __typename\n                  legacyResourceId\n                  title\n                  {{ variant_attribute }}\n                }\n              }\n            }\n          }\n        }\n      }\n    }\n  {% endcapture %}\n\n  {% action \"shopify\" %}\n    mutation {\n      bulkOperationRunQuery(\n        query: {{ bulk_operation_query | json }}\n      ) {\n        bulkOperation {\n          id\n          status\n        }\n        userErrors {\n          field\n          message\n        }\n      }\n    }\n  {% endaction %}\n\n  {% break %}\n\n{% elsif event.topic == \"mechanic/shopify/bulk_operation\" %}\n  {% if event.preview %}\n    {% capture jsonl_string %}\n      {\"__typename\":\"Product\",\"id\":\"gid://shopify/Product/1234567890\"}\n      {\"__typename\":\"ProductVariant\",\"legacyResourceId\":\"1234567890\",\"title\":\"Widget\",{{ variant_attribute | json }}:\"PREVIEW\",\"__parentId\":\"gid://shopify/Product/1234567890\"}\n    {% endcapture %}\n\n    {% assign bulkOperation = hash %}\n    {% assign bulkOperation[\"objects\"] = jsonl_string | parse_jsonl %}\n  {% endif %}\n\n  {% assign products = bulkOperation.objects | where: \"__typename\", \"Product\" %}\n  {% assign bulk_variants = bulkOperation.objects | where: \"__typename\", \"ProductVariant\" %}\n{% endif %}\n\n{% comment %}\n  -- process all products returned by bulk op query, or the product that caused the create/update event\n  -- for product create/update, \"variants\" will have been assigned in paginated queries above\n{% endcomment %}\n\n{% assign metafield_inputs = array %}\n\n{% for product in products %}\n  {% if event.topic == \"mechanic/shopify/bulk_operation\" %}\n    {% assign variants = bulk_variants | where: \"__parentId\", product.id %}\n  {% endif %}\n\n  {% comment %}\n    -- see if this product should be excluded by tag\n  {% endcomment %}\n\n  {% assign exclude_product = nil %}\n\n  {% if ignore_products_with_any_of_these_tags != blank %}\n    {% for tag in product.tags %}\n      {% if ignore_products_with_any_of_these_tags contains tag %}\n        {% log\n          message: \"Product is disqualified by tag\",\n          disqualifying_product_tag: tag\n        %}\n        {% assign exclude_product = true %}\n        {% break %}\n      {% endif %}\n    {% endfor %}\n  {% endif %}\n\n  {% if exclude_product %}\n    {% continue %}\n  {% endif %}\n\n  {% assign previous_variant_ids_and_values = product.metafield.jsonValue %}\n\n  {% comment %}\n    -- only tag and check existing metafield variant values when a product is updated\n    -- new products and bulk scans will always set metafields (but not tags)\n  {% endcomment %}\n\n  {% if event.topic == \"shopify/products/update\" %}\n    {% if previous_variant_ids_and_values == blank %}\n      {% unless event.preview %}\n        {% error \"Mechanic has not had an opportunity to store this product's previous variant values. Use the 'Run task' button to re-scan your products. :)\" %}\n      {% endunless %}\n    {% endif %}\n\n    {% assign product_qualifies = nil %}\n    {% assign tags_to_add = array %}\n\n    {% unless tag_product_with_variant_titles %}\n      {% assign tags_to_add = tags_to_add | push: product_tag_to_add %}\n    {% endunless %}\n\n    {% for variant in variants %}\n      {% if previous_variant_ids_and_values[variant.legacyResourceId] != variant[variant_attribute] %}\n        {% assign product_qualifies = true %}\n\n        {% if tag_product_with_variant_titles %}\n          {% if variant.title == \"Default Title\" %}\n            {% assign tags_to_add = tags_to_add | push: product_tag_to_add %}\n\n          {% else %}\n            {% assign tags_to_add[tags_to_add.size] = product_tag_to_add | append: \" \" | append: variant.title %}\n          {% endif %}\n        {% endif %}\n      {% endif %}\n    {% endfor %}\n\n    {% unless product_qualifies %}\n      {% break %}\n    {% endunless %}\n\n    {% action \"shopify\" %}\n      mutation {\n        tagsAdd(\n          id: {{ product.id | json }}\n          tags: {{ tags_to_add | json }}\n        ) {\n          userErrors {\n            field\n            message\n          }\n        }\n      }\n    {% endaction %}\n  {% endif %}\n\n  {% comment %}\n    -- product has variant changes, or has been newly scanned or created; set metafield values\n  {% endcomment %}\n\n  {% assign metafield_value = hash %}\n\n  {% for variant in variants %}\n    {% assign variant_id_string = variant.id | append: \"\" %}\n    {% assign metafield_value[variant.legacyResourceId] = variant[variant_attribute] %}\n  {% endfor %}\n\n  {% assign metafield_input = hash %}\n  {% assign metafield_input[\"ownerId\"] = product.id %}\n  {% assign metafield_input[\"namespace\"] = \"mechanic\" %}\n  {% assign metafield_input[\"key\"] = metafield_key %}\n  {% assign metafield_input[\"type\"] = \"json\" %}\n  {% assign metafield_input[\"value\"] = metafield_value | json %}\n  {% assign metafield_inputs = metafield_inputs | push: metafield_input %}\n{% endfor %}\n\n{% comment %}\n  -- process any metafield updates from this task run\n{% endcomment %}\n\n{% if metafield_inputs != blank %}\n  {% assign groups_of_metafield_inputs = metafield_inputs | in_groups_of: 25, fill_with: false %}\n\n  {% for group_of_metafield_inputs in groups_of_metafield_inputs %}\n    {% action \"shopify\" %}\n      mutation {\n        metafieldsSet(\n          metafields: {{ group_of_metafield_inputs | graphql_arguments }}\n        ) {\n          metafields {\n            id\n            namespace\n            key\n            type\n            value\n            owner {\n              ... on Product {\n                id\n              }\n            }\n          }\n          userErrors {\n            code\n            field\n            message\n          }\n        }\n      }\n    {% endaction %}\n  {% endfor %}\n{% endif %}\n",
  "subscriptions": [
    "shopify/products/create",
    "shopify/products/update",
    "mechanic/user/trigger",
    "mechanic/shopify/bulk_operation"
  ],
  "subscriptions_template": "shopify/products/create\nshopify/products/update\nmechanic/user/trigger\nmechanic/shopify/bulk_operation",
  "tags": [
    "Auto-Tag",
    "Products",
    "Variants",
    "Watch"
  ]
}
