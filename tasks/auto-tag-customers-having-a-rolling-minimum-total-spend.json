{
  "name": "Auto-tag customers having a rolling minimum total spend",
  "options": {
    "minimum_total_spent__number_required": null,
    "customer_tag_to_apply__required": null,
    "days_of_order_history_to_consider__number_required": 30,
    "only_monitor_customers_having_this_tag": null
  },
  "subscriptions": [
    "mechanic/user/trigger",
    "mechanic/scheduler/daily",
    "shopify/orders/create",
    "shopify/orders/updated",
    "shopify/orders/delete"
  ],
  "subscriptions_template": "mechanic/user/trigger\nmechanic/scheduler/daily\nshopify/orders/create\nshopify/orders/updated\nshopify/orders/delete",
  "script": "{% comment %}\n  express a preference for which option appears first\n  {{ options.minimum_total_spent__number_required }}\n  {{ options.customer_tag_to_apply__required }}\n  {{ options.days_of_order_history_to_consider__number_required }}\n{% endcomment %}\n\n{% assign acceptable_order_financial_statuses = \"paid partially_paid partially_refunded\" | split: \" \" %}\n{% assign acceptable_transaction_kinds = \"sale capture refund\" | split: \" \" %}\n\n{% assign days_in_seconds = options.days_of_order_history_to_consider__number_required | times: 24 | times: 60 | times: 60 %}\n{% assign min_created_at = \"now\" | date: \"%s\" | times: 1 | minus: days_in_seconds %}\n\n{% if options.only_monitor_customers_having_this_tag == options.customer_tag_to_apply__required %}\n  {% error \"The two customer tag values must be different. Please change either 'Customer tag to apply' or 'Only monitor customers having this tag'.\" %}\n{% endif %}\n\n{% assign customers = shop.customers %}\n{% if event.topic == \"shopify/orders/create\" or event.topic == \"shopify/orders/updated\" %}\n  {% assign customers = array %}\n  {% assign customers[0] = order.customer %}\n{% endif %}\n\n{% if event.preview %}\n  {% capture customers_json %}\n    [\n      {\n        \"admin_graphql_api_id\": \"gid://shopify/Customer/1234567890\",\n        \"email\": \"customer@example.com\",\n        \"tags\": {{ options.only_monitor_customers_having_this_tag | json }},\n        \"orders\": {\n          \"any\": [\n            {\n              \"created_at\": {{ min_created_at }},\n              \"financial_status\": \"paid\",\n              \"transactions\": [\n                {\n                  \"status\": \"success\",\n                  \"kind\": \"sale\",\n                  \"amount\": {{ options.minimum_total_spent__number_required | plus: 1 | json }}\n                }\n              ]\n            }\n          ]\n        }\n      }\n    ]\n  {% endcapture %}\n\n  {% assign customers = customers_json | parse_json %}\n{% endif %}\n\n{% for customer in customers %}\n  {% assign customer_tags = customer.tags | split: \", \" %}\n\n  {% if options.only_monitor_customers_having_this_tag != blank %}\n    {% unless customer_tags contains options.only_monitor_customers_having_this_tag %}\n      {% log \"Customer does not have the required tag for monitoring; skipping.\" %}\n      {% continue %}\n    {% endunless %}\n  {% endif %}\n\n  {% assign customer_total = 0.0 %}\n  {% assign customer_orders_count = 0 %}\n\n  {% for customer_order in customer.orders.any %}\n    {% assign customer_order_created_at_in_seconds = customer_order.created_at | date: \"%s\" | times: 1 %}\n    {% if customer_order_created_at_in_seconds < min_created_at %}\n      {% continue %}\n    {% endif %}\n\n    {% unless acceptable_order_financial_statuses contains customer_order.financial_status %}\n      {% continue %}\n    {% endunless %}\n\n    {% for transaction in customer_order.transactions %}\n      {% if transaction.status != \"success\" %}\n        {% continue %}\n      {% endif %}\n\n      {% unless acceptable_transaction_kinds contains transaction.kind %}\n        {% continue %}\n      {% endunless %}\n\n      {% if transaction.kind == \"refund\" %}\n        {% assign customer_total = customer_total | minus: transaction.amount %}\n      {% else %}\n        {% assign customer_total = customer_total | plus: transaction.amount %}\n      {% endif %}\n    {% endfor %}\n\n    {% assign customer_orders_count = customer_orders_count | plus: 1 %}\n  {% endfor %}\n\n  {% assign add_tag = false %}\n  {% assign remove_tag = false %}\n\n  {% capture log_line_prefix %}{{ customer.email | default: customer.id }} spent {{ customer_total }} across {{ customer_orders_count }} orders, {% endcapture %}\n\n  {% if customer_total >= options.minimum_total_spent__number_required %}\n    {% if customer_tags contains options.customer_tag_to_apply__required %}\n      {% log %}{{ log_line_prefix | append: \"qualifying them for the tag. They were already tagged, so there's nothing to do.\" | json }}{% endlog %}\n    {% else %}\n      {% log %}{{ log_line_prefix | append: \"qualifying them for the tag\" | json }}{% endlog %}\n      {% assign add_tag = true %}\n    {% endif %}\n  {% else %}\n    {% if customer_tags contains options.customer_tag_to_apply__required %}\n      {% log %}{{ log_line_prefix | append: \"and did not qualify for the tag\" | json }}{% endlog %}\n      {% assign remove_tag = true %}\n    {% else %}\n      {% log %}{{ log_line_prefix | append: \"and did not qualify for the tag. They were not previously tagged, so there's nothing to do.\" | json }}{% endlog %}\n    {% endif %}\n  {% endif %}\n\n  {% if add_tag or remove_tag %}\n    {% action \"shopify\" %}\n      mutation {\n      {% if add_tag %}tagsAdd{% elsif remove_tag %}tagsRemove{% endif %}(\n          id: {{ customer.admin_graphql_api_id | json }}\n          tags: {{ options.customer_tag_to_apply__required | json }}\n        ) {\n          userErrors {\n            field\n            message\n          }\n        } \n      }\n    {% endaction %}\n  {% endif %}\n{% endfor %}",
  "docs": "Use this task to tag customers who reach a certain spending threshold, by scanning a rolling period of order history. Useful for rewarding customers who keep a consistent spend total.\n\nRun this task manually to scan all of your customers. **This may take some time!**\r\n\r\nThis task will also scan all customers on a nightly basis, and will run for a single customer every time a customer's order is paid or cancelled.\r\n\r\nNote: By default, Mechanic only scans the last 60 days of order history. To change this, [follow this tutorial](https://help.usemechanic.com/tutorials/enabling-read_all_orders).",
  "halt_action_run_sequence_on_error": false,
  "online_store_javascript": null,
  "order_status_javascript": null,
  "perform_action_runs_in_sequence": false,
  "tags": [
    "Auto-Tag",
    "Customers",
    "Spend"
  ]
}
