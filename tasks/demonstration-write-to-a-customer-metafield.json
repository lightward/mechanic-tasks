{
  "docs": "This task demonstrates how to write to a Shopify metafield, belonging to a specific resource - in this case, a customer.\n\nThis example covers:\n\n* Retrieving an existing customer metafield, if any, having the desired namespace and key\n* Using the [customerUpdate](https://shopify.dev/docs/api/admin-graphql/latest/mutations/customerUpdate) GraphQL mutation, to either create a new metafield or update an existing one\n* Using the [metafieldsSet](https://shopify.dev/docs/api/admin-graphql/latest/mutations/metafieldsset) GraphQL mutation, which does not require a metafield ID\n\nTo use this task, provide the numeric ID of a customer in your store. ([Need help finding the customer ID?](https://learn.mechanic.dev/techniques/finding-a-resource-id)) Then, add in the desired metafield in the format of \"namespace.key\" (which will uniquely identify the metafield), and the metafield value (which will be stored within the metafield). Finally, choose between using the \"Customer update\" and \"Metafields set\" GraphQL mutations for performing the Shopify API operation, noting how the [task preview](https://learn.mechanic.dev/core/tasks/previews) changes to reflect your choice.\n\nRun the task to see the metafield create/update in action. After running the mutation, the task will log out a url to the customer's unstructured metafields list, which is where the metafield should be found unless it has a metafield definition (i.e. you are testing with an existing metafield).",
  "halt_action_run_sequence_on_error": false,
  "name": "Demonstration: Write to a customer metafield",
  "online_store_javascript": null,
  "options": {
    "customer_id__number_required": "",
    "customer_metafield__required": "foo.bar",
    "metafield_value__required": "baz",
    "mutation_choice__choice_o1_customer_update_o2_metafields_set_required": null
  },
  "order_status_javascript": null,
  "perform_action_runs_in_sequence": false,
  "script": "{% assign customer_id = options.customer_id__number_required %}\n{% assign customer_metafield = options.customer_metafield__required %}\n{% assign metafield_value = options.metafield_value__required %}\n{% assign mutation_choice = options.mutation_choice__choice_o1_customer_update_o2_metafields_set_required %}\n\n{% comment %}\n  -- get customer metafield data\n{% endcomment %}\n\n{% capture query %}\n  query {\n    customer(id: {{ customer_id | prepend: \"gid://shopify/Customer/\" | json }}) {\n      id\n      metafield(key: {{ customer_metafield | json }}) {\n        id\n        value\n      }\n    }\n  }\n{% endcapture %}\n\n{% assign result = query | shopify %}\n\n{% if event.preview %}\n  {% capture result_json %}\n    {\n      \"data\": {\n        \"customer\": {\n          \"id\": \"gid://shopify/Customer/1234567890\",\n          \"metafield\": {\n            \"id\": \"gid://shopify/Metafield/1234567890\",\n            \"value\": \"lorem\"\n          }\n        }\n      }\n    }\n  {% endcapture %}\n\n  {% assign result = result_json | parse_json %}\n{% endif %}\n\n{% assign customer = result.data.customer %}\n{% assign existing_metafield = customer.metafield.value %}\n\n{% if customer == blank %}\n  {% error %}\n    \"Customer not found with customer ID ({{ customer_id }}).\"\n  {% enderror %}\n\n  {% break %}\n{% endif %}\n\n{% unless event.preview %}\n  {% log customer: customer %}\n{% endunless %}\n\n{% comment %}\n  -- update customer metafield using configured mutation choice\n{% endcomment %}\n\n{% if mutation_choice == \"customer_update\" %}\n  {% action \"shopify\" %}\n    mutation {\n      customerUpdate(\n        input: {\n          id: {{ customer.id | json }}\n          metafields: [\n            {\n              id: {{ existing_metafield.id | json }}\n              namespace: {{ customer_metafield | split: \".\" | first | json }}\n              key: {{ customer_metafield | split: \".\" | last | json }}\n              value: {{ metafield_value | json }}\n              type: \"single_line_text_field\"\n            }\n          ]\n        }\n      ) {\n        userErrors {\n          field\n          message\n        }\n      }\n    }\n  {% endaction %}\n\n{% elsif mutation_choice == \"metafields_set\" %}\n  {% action \"shopify\" %}\n    mutation {\n      metafieldsSet(\n        metafields: [\n          {\n            ownerId: {{ customer.id | json }}\n            namespace: {{ customer_metafield | split: \".\" | first | json }}\n            key: {{ customer_metafield | split: \".\" | last | json }}\n            value: {{ metafield_value | json }}\n            type: \"single_line_text_field\"\n          }\n        ]\n      ) {\n        metafields {\n          id\n          namespace\n          key\n          type\n          value\n          owner {\n            ... on Customer {\n              id\n            }\n          }\n        }\n        userErrors {\n          code\n          field\n          message\n        }\n      }\n    }\n  {% endaction %}\n{% endif %}\n\n{%- capture log_message -%}\n  Assuming a metafield definition has not been previously created for the metafield configured in this task, then you can find the 'unstructured' metafield using the following url: {{ shop.admin_url }}customers/{{ customer_id }}/metafields/unstructured\n{%- endcapture -%}\n\n{% log log_message %}\n",
  "subscriptions": [
    "mechanic/user/trigger"
  ],
  "subscriptions_template": "mechanic/user/trigger",
  "tags": [
    "Demonstration",
    "Metafields"
  ]
}
