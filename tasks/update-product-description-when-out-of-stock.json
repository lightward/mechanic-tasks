{
  "name": "Update product description when out of stock",
  "options": {
    "only_modify_products_with_this_tag": "",
    "add_this_html_to_product_description__multiline_required": null,
    "add_the_html_to_end_of_product_description_instead_of_beginning__boolean": false
  },
  "subscriptions": [
    "shopify/inventory_levels/update",
    "mechanic/user/trigger"
  ],
  "subscriptions_template": "shopify/inventory_levels/update\nmechanic/user/trigger",
  "script": "{% comment %}\n  Options order:\n\n  {{ options.only_modify_products_with_this_tag }}\n  {{ options.add_this_html_to_product_description__multiline_required }}\n  {{ options.add_the_html_to_end_of_product_description_instead_of_beginning__boolean }}\n{% endcomment %}\n\n{% assign products_to_check = array %}\n\n{% if event.topic == \"shopify/inventory_levels/update\" %}\n  {% capture query %}\n    query {\n      inventoryLevel(\n        id: {{ inventory_level.admin_graphql_api_id | json }}\n      ) {\n        item {\n          variant {\n            product {\n              id\n              descriptionHtml\n              tags\n              totalInventory\n            }\n          }\n        }\n      }\n    }\n  {% endcapture %}\n\n  {% assign result = query | shopify %}\n\n  {% if event.preview %}\n    {% capture result_json %}\n      {\n        \"data\": {\n          \"inventoryLevel\": {\n            \"item\": {\n              \"variant\": {\n                \"product\": {\n                  \"id\": \"gid://shopify/Product/1234567890\",\n                  \"descriptionHtml\": \"<p>The best widget on the market!</p>\",\n                  \"tags\": {{ options.only_modify_products_with_this_tag | json }},\n                  \"totalInventory\": 0\n                }\n              }\n            }\n          }\n        }\n      }\n    {% endcapture %}\n\n    {% assign result = result_json | parse_json %}\n  {% endif %}\n\n  {% assign product = result.data.inventoryLevel.item.variant.product %}\n\n  {% if options.only_modify_products_with_this_tag != blank %}\n    {% if product.tags contains options.only_modify_products_with_this_tag %}\n      {% assign products_to_check[0] = product %}\n    {% else %}\n      {% log message: \"This product does not have the tag being filtered by; skipping\", tag_required: options.only_modify_products_with_this_tag, product_tags: product.tags %}\n    {% endif %}\n  {% else %}\n    {% assign products_to_check[0] = product %}\n  {% endif %}\n\n{% elsif event.topic == \"mechanic/user/trigger\" %}\n  {% assign cursor = nil %}\n  {% assign products_query = nil %}\n\n  {% if options.only_modify_products_with_this_tag != blank %}\n    {% assign products_query = options.only_modify_products_with_this_tag | json | prepend: \"tag:\" %}\n  {% endif %}\n\n  {% for n in (0..100) %}\n    {% capture query %}\n      query {\n        products(\n          first: 250\n          after: {{ cursor | json }}\n          query: {{ products_query | json }}\n        ) {\n          pageInfo {\n            hasNextPage\n          }\n          edges {\n            cursor\n            node {\n              id\n              descriptionHtml\n              tracksInventory\n              totalInventory\n            }\n          }\n        }\n      }\n    {% endcapture %}\n\n    {% assign result = query | shopify %}\n\n    {% if event.preview %}\n      {% capture result_json %}\n        {\n          \"data\": {\n            \"products\": {\n              \"edges\": [\n                {\n                  \"node\": {\n                    \"id\": \"gid://shopify/Product/1234567890\",\n                    \"descriptionHtml\": \"<p>The best widget on the market!</p>\",\n                    \"tracksInventory\": true,\n                    \"totalInventory\": 0\n                  }\n                }\n              ]\n            }\n          }\n        }\n      {% endcapture %}\n\n      {% assign result = result_json | parse_json %}\n    {% endif %}\n\n    {% assign products = result.data.products.edges | map: \"node\" | where: \"tracksInventory\" %}\n    {% assign products_to_check = products_to_check | concat: products %}\n\n    {% if result.data.products.pageInfo.hasNextPage %}\n      {% assign cursor = result.data.products.edges.last.cursor %}\n    {% else %}\n      {% break %}\n    {% endif %}\n  {% endfor %}\n{% endif %}\n\n{% if products_to_check != blank %}\n  {% for product in products_to_check %}\n    {% assign cache_key = product.id | append: \"__description_to_restore\" %}\n    {% assign cached_description_html = cache[cache_key] %}\n\n    {% if product.totalInventory > 0 %}\n      {% if cached_description_html != blank %}\n        {% action \"shopify\" %}\n          mutation {\n            productUpdate(\n              input: {\n                id: {{ product.id | json }}\n                descriptionHtml: {{ cached_description_html | json }}\n              }\n            ) {\n              userErrors {\n                field\n                message\n              }\n            }\n          }\n        {% endaction %}\n\n        {% action \"cache\", \"del\", cache_key %}\n      {% endif %}\n\n    {% else %}\n      {% unless product.descriptionHtml contains options.add_this_html_to_product_description__multiline_required %}\n        {% if options.add_the_html_to_end_of_product_description_instead_of_beginning__boolean %}\n          {% assign updated_description_html = product.descriptionHtml | append: options.add_this_html_to_product_description__multiline_required %}\n        {% else %}\n          {% assign updated_description_html = product.descriptionHtml | prepend: options.add_this_html_to_product_description__multiline_required %}\n        {% endif %}\n\n        {% action \"shopify\" %}\n          mutation {\n            productUpdate(\n              input: {\n                id: {{ product.id | json }}\n                descriptionHtml: {{ updated_description_html | json }}\n              }\n            ) {\n              userErrors {\n                field\n                message\n              }\n            }\n          }\n        {% endaction %}\n\n        {% action \"cache\", \"set\", cache_key, product.descriptionHtml %}\n      {% endunless %}\n    {% endif %}\n  {% endfor %}\n{% endif %}",
  "docs": "This task prepends an HTML message to the beginning of the product description, for each product that goes out of stock, and then restores the original product description when the product is back in stock. Optionally, you may choose to append the HTML message to the end of the product description, instead of prepending it to the beginning.\n\nThe task runs when inventory levels change, or may be run manually on demand. Manual runs will ignore products that do not have inventory tracking enabled.",
  "halt_action_run_sequence_on_error": false,
  "online_store_javascript": null,
  "order_status_javascript": null,
  "perform_action_runs_in_sequence": false,
  "tags": []
}
