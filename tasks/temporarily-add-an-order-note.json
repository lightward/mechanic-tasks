{
  "name": "Temporarily add an order note",
  "options": {
    "hours_to_wait__number_required": 12,
    "order_note_to_add__required": null
  },
  "subscriptions": [
    "mechanic/user/text",
    "user/orders/remove_note"
  ],
  "subscriptions_template": "mechanic/user/text\nuser/orders/remove_note",
  "script": "{% assign hours_to_wait_in_seconds = options.hours_to_wait__number_required | times: 60 | times: 60 %}\n\n{% if event.topic == \"mechanic/user/text\" %}\n  {% if event.preview %}\n    {% assign event = hash %}\n    {% assign event[\"preview\"] = true %}\n    {% assign event[\"data\"] = \"#1234\" %}\n  {% endif %}\n\n  {% assign order_numbers = event.data | strip | split: newline | sort | uniq %}\n\n  {% assign order_number_params = array %}\n  {% for number in order_numbers %}\n    {% assign order_number_params[order_number_params.size] = number | json %}\n  {% endfor %}\n\n  {% assign orders = array %}\n\n  {% assign cursor = nil %}\n\n  {% for n in (0..100) %}\n    {% capture query %}\n      query {\n        orders(\n          first: 250\n          query: {{ order_number_params | join: \" OR \" | json }}\n          after: {{ cursor | json }}\n        ) {\n          pageInfo {\n            hasNextPage\n          }\n          edges {\n            cursor\n            node {\n              id\n              name\n              note\n            }\n          }\n        }\n      }\n    {% endcapture %}\n\n    {% assign result = query | shopify %}\n\n    {% if event.preview %}\n      {% capture result_json %}\n        {\n          \"data\": {\n            \"orders\": {\n              \"edges\": [\n                {\n                  \"node\": {\n                    \"id\": \"gid://shopify/Order/1234567890\",\n                    \"name\": \"#1234\",\n                    \"note\": \"Existing order note\"\n                  }\n                }\n              ]\n            }\n          }\n        }\n      {% endcapture %}\n\n      {% assign result = result_json | parse_json %}\n    {% endif %}\n\n    {% for order_edge in result.data.orders.edges %}\n      {% assign order = order_edge.node %}\n      {% if order_numbers contains order.name %}\n        {% assign orders[orders.size] = order %}\n      {% endif %}\n    {% endfor %}\n\n    {% if result.data.orders.pageInfo.hasNextPage %}\n      {% assign cursor = result.data.orders.edges.last.cursor %}\n    {% else %}\n      {% break %}\n    {% endif %}\n  {% endfor %}\n\n  {% assign found_order_numbers = orders | map: \"name\" | sort %}\n  {% if found_order_numbers != order_numbers %}\n    {% error %}\n      {\n        \"message\": \"Tried to find {{ order_numbers.size }} order(s), found {{ found_order_numbers.size }} instead. Please check your input, and try again. Make sure to use the complete and exact order number, including any symbols and prefixes/suffixes (e.g. W#1234, not 1234).\",\n        \"order_numbers\": {{ order_numbers | json }},\n        \"found_order_numbers\": {{ found_order_numbers | json }}\n      }\n    {% enderror %}\n  {% elsif orders != blank %}\n    {% for order in orders %}\n      {% capture order_note_to_save %}{% if order.note != blank %}{{ order.note }}{{ newline }}{{ newline }}{% endif %}{{ options.order_note_to_add__required }}{% endcapture %}\n\n      {% log order: order %}\n\n      {% action \"shopify\" %}\n        mutation {\n          orderUpdate(\n            input: {\n              id: {{ order.id | json }}\n              note: {{ order_note_to_save | json }}\n            }\n          ) {\n            userErrors {\n              field\n              message\n            }\n          }\n        }\n      {% endaction %}\n    {% endfor %}\n\n    {% action \"event\" %}\n      {\n        \"topic\": \"user/orders/remove_note\",\n        \"run_at\": {{ \"now\" | date: \"%s\" | plus: hours_to_wait_in_seconds | round | json }},\n        \"data\": {\n          \"order_ids\": {{ orders | map: \"id\" | json }},\n          \"order_note_content_to_remove\": {{ options.order_note_to_add__required | json }}\n        }\n      }\n    {% endaction %}\n  {% endif %}\n{% elsif event.topic == \"user/orders/remove_note\" %}\n  {% if event.preview %}\n    {% capture event_json %}\n      {\n        \"preview\": true,\n        \"data\": {\n          \"order_ids\": [\"gid://shopify/Order/1234567890\"],\n          \"order_note_content_to_remove\": {{ options.order_note_to_add__required | json }}\n        }\n      }\n    {% endcapture %}\n\n    {% assign event = event_json | parse_json %}\n  {% endif %}\n\n  {% for order_id in event.data.order_ids %}\n    {% capture query %}\n      query {\n        order(id: {{ order_id | json }}) {\n          id\n          name\n          note\n        }\n      }\n    {% endcapture %}\n\n    {% assign result = query | shopify %}\n\n    {% if event.preview %}\n      {% capture result_json %}\n        {\n          \"data\": {\n            \"order\": {\n              \"id\": \"gid://shopify/Order/1234567890\",\n              \"name\": \"#1234\",\n              \"note\": {{ \"Existing note!\" | append: newline | append: newline | append: options.order_note_to_add__required | json }}\n            }\n          }\n        }\n      {% endcapture %}\n\n      {% assign result = result_json | parse_json %}\n    {% endif %}\n\n    {% assign order = result.data.order %}\n\n    {% if order == nil %}\n      {% log message: \"Order no longer exists\", id: order_id %}\n      {% continue %}\n    {% endif %}\n\n    {% assign order_note_parts = order.note | split: newline %}\n    {% assign order_note_to_save = \"\" %}\n    {% for order_note_part in order_note_parts %}\n      {% unless order_note_part == options.order_note_to_add__required %}\n        {% capture order_note_to_save %}{% if order_note_to_save != blank %}{{ order_note_to_save }}{{ newline }}{% endif %}{{ order_note_part }}{% endcapture %}\n      {% endunless %}\n    {% endfor %}\n\n    {% assign order_note_to_save = order_note_to_save | strip %}\n\n    {% if order_note_to_save == order.note %}\n      {% log message: \"Order note to save appears to match the existing order note\", order: order, order_note_to_save: order_note_to_save %}\n    {% else %}\n      {% action \"shopify\" %}\n        mutation {\n          orderUpdate(\n            input: {\n              id: {{ order.id | json }}\n              note: {{ order_note_to_save | json }}\n            }\n          ) {\n            userErrors {\n              field\n              message\n            }\n          }\n        }\n      {% endaction %}\n    {% endif %}\n  {% endfor %}\n{% endif %}",
  "docs": "This task looks up orders by their order number, adds the note of your choice to the order record, and removes that same note 12 hours later. A bespoke task for a very specific merchant need, we publish this task as an example of getting creative with Mechanic. :)\n\nRun this task manually, and enter one or more order numbers (one per line, making sure to use the exact order number - including symbols and prefixes/suffixes. Mechanic will add the note you configure to the corresponding order, and remove it 12 hours later.\r\n\r\nMechanic will preserve any existing notes on file for these orders, appending the new note content to the end of the content already in place.",
  "halt_action_run_sequence_on_error": false,
  "online_store_javascript": null,
  "order_status_javascript": null,
  "perform_action_runs_in_sequence": false
}
