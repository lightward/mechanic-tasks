{
  "docs": "After waiting 7 days (or another timespan of your choice), this task attempts to capture all open authorized payments for an order. (Multiple authorizations can exist on edited orders or with post-purchase upsells.)\n\nIf the order is modified before capturing, due to applying discounts, changing shipping fees, and/or making item adjustments, then this task will only capture up to a maximum of the current order total. Refunds that are not associated with an item adjustment are not supported by this task.",
  "halt_action_run_sequence_on_error": true,
  "name": "Auto-capture order payment after x days",
  "online_store_javascript": null,
  "options": {
    "days_to_wait_before_capturing__number_required": "7"
  },
  "order_status_javascript": null,
  "perform_action_runs_in_sequence": true,
  "script": "{% comment %}\n  -- get GraphQL order and transaction data\n{% endcomment %}\n\n{% capture query %}\n  query {\n    order(id: {{ order.admin_graphql_api_id | json }}) {\n      id\n      name\n      displayFinancialStatus\n      currentTotalPriceSet {\n        presentmentMoney {\n          amount\n        }\n      }\n      totalReceivedSet {\n        presentmentMoney {\n          amount\n          currencyCode\n        }\n      }\n      transactions(capturable: true) {\n        id\n        kind\n        totalUnsettledSet {\n          presentmentMoney {\n            amount\n            currencyCode\n          }\n        }\n      }\n    }\n  }\n{% endcapture %}\n\n{% assign result = query | shopify %}\n\n{% if event.preview %}\n  {% capture result_json %}\n    {\n      \"data\": {\n        \"order\": {\n          \"id\": \"gid://shopify/Order/1234567890\",\n          \"name\": \"#SAMPLE\",\n          \"displayFinancialStatus\": \"AUTHORIZED\",\n          \"currentTotalPriceSet\": {\n            \"presentmentMoney\": {\n              \"amount\": \"23.45\"\n            }\n          },\n          \"transactions\": [\n            {\n              \"id\": \"gid://shopify/OrderTransaction/1234567890\",\n              \"kind\": \"AUTHORIZATION\",\n              \"totalUnsettledSet\": {\n                \"presentmentMoney\": {\n                  \"amount\": \"20.00\",\n                  \"currencyCode\": \"USD\"\n                }\n              }\n            },\n            {\n              \"id\": \"gid://shopify/OrderTransaction/2345678901\",\n              \"kind\": \"AUTHORIZATION\",\n              \"totalUnsettledSet\": {\n                \"presentmentMoney\": {\n                  \"amount\": \"10.00\",\n                  \"currencyCode\": \"USD\"\n                }\n              }\n            }\n          ]\n        }\n      }\n    }\n  {% endcapture %}\n\n  {% assign result = result_json | parse_json %}\n{% endif %}\n\n{% assign order = result.data.order %}\n\n{% comment %}\n  -- the current total price will reflect changes made after the initial sale: discounts, shipping changes, item adjustments\n  -- reducing by total received (i.e. partially paid orders) is for payment gateways that support multiple captures (e.g. Shopify Payments)\n{% endcomment %}\n\n{% assign current_total_price = order.currentTotalPriceSet.presentmentMoney.amount | times: 1.0 %}\n{% assign total_received = order.totalReceivedSet.presentmentMoney.amount | times: 1.0 %}\n{% assign left_to_capture = current_total_price | minus: total_received %}\n\n{% unless event.preview %}\n  {% log\n    current_total_price: current_total_price,\n    total_received: total_received,\n    left_to_capture: left_to_capture\n  %}\n{% endunless %}\n\n{% if order.displayFinancialStatus == \"AUTHORIZED\" or order.displayFinancialStatus == \"PARTIALLY_PAID\" %}\n  {% assign authorized_transactions = order.transactions | where: \"kind\", \"AUTHORIZATION\" %}\n\n  {% comment %}\n    -- multiple authorizations could be on the order due to upsells or item additions\n  {% endcomment %}\n\n  {% for transaction in authorized_transactions %}\n    {% comment %}\n      -- capture the unsettled amount of this transaction without exceeding the amount left to capture\n    {% endcomment %}\n\n    {% assign unsettled_amount = transaction.totalUnsettledSet.presentmentMoney.amount | times: 1.0 %}\n    {% assign amount_to_capture = unsettled_amount | at_most: left_to_capture %}\n\n    {% unless event.preview %}\n      {% log\n        transaction_id: transaction.id,\n        unsettled_amount: unsettled_amount,\n        amount_to_capture: amount_to_capture\n      %}\n    {% endunless %}\n\n    {% if amount_to_capture > 0 %}\n      {% comment %}\n        -- reduce the amount left to capture by the amount captured for this transaction\n      {% endcomment %}\n\n      {% assign left_to_capture = left_to_capture | minus: amount_to_capture %}\n\n      {% action \"shopify\" %}\n        mutation {\n          orderCapture(\n            input: {\n              id: {{ order.id | json }}\n              parentTransactionId: {{ transaction.id | json }}\n              amount: {{ amount_to_capture | json }}\n              currency: {{ transaction.totalUnsettledSet.presentmentMoney.currencyCode }}\n            }\n          ) {\n            transaction {\n              id\n              status\n              parentTransaction {\n                id\n                kind\n              }\n            }\n            userErrors {\n              field\n              message\n            }\n          }\n        }\n      {% endaction %}\n    {% endif %}\n  {% endfor %}\n{% endif %}\n",
  "subscriptions": [
    "shopify/orders/create+7.days"
  ],
  "subscriptions_template": "shopify/orders/create+{{ options.days_to_wait_before_capturing__number_required | default: 7 }}.days",
  "tags": [
    "Payment",
    "Schedule"
  ]
}
