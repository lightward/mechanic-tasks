{
  "name": "Accept a maximum number of orders per day",
  "options": {
    "maximum_daily_orders__number_required": "10",
    "only_count_orders_matching_this_query": "-status:cancelled",
    "only_clear_inventory_for_products_with_this_tag": "",
    "restore_inventory_levels_the_next_day__boolean": true,
    "restore_inventory_levels_on_demand__boolean": false
  },
  "subscriptions": [
    "shopify/orders/create",
    "mechanic/scheduler/daily"
  ],
  "subscriptions_template": "shopify/orders/create\n\n{% if options.restore_inventory_levels_the_next_day__boolean %}\n  mechanic/scheduler/daily\n{% endif %}\n\n{% if options.restore_inventory_levels_on_demand__boolean %}\n  mechanic/user/trigger\n{% endif %}",
  "script": "{% comment %}\n  Options order:\n\n  {{ options.maximum_daily_orders__number_required }}\n  {{ options.only_count_orders_matching_this_query }}\n  {{ options.only_clear_inventory_for_products_with_this_tag }}\n  {{ options.restore_inventory_levels_the_next_day__boolean }}\n  {{ options.restore_inventory_levels_on_demand__boolean }}\n{% endcomment %}\n\n{% if options.maximum_daily_orders__number_required <= 0 %}\n  {% error \"'Maximum daily orders' must be at least 1. :)\" %}\n{% endif %}\n\n{% assign inventory_is_zeroed_cache_key = \"inventory_is_zeroed:\" | append: task.id %}\n{% assign inventory_is_zeroed = cache[inventory_is_zeroed_cache_key] | default: false %}\n\n{% if event.topic contains \"shopify/orders\" %}\n  {% assign cursor = nil %}\n  {% assign orders_today = 0 %}\n  {% assign previous_midnight = \"now\" | date: \"%Y-%m-%dT00:00:00%z\" %}\n  {% assign previous_midnight_s = previous_midnight | date: \"%s\" %}\n  {% assign cache_key = \"inventory_to_restore:\" | append: previous_midnight_s %}\n  {% assign inventory_levels_to_zero = cache[cache_key] | default: hash %}\n\n  {% capture orders_query %}\n    created_at:>={{ previous_midnight | json }} {{ options.only_count_orders_matching_this_query }}\n  {% endcapture %}\n  {% assign orders_query = orders_query | strip %}\n\n  {% for n in (0..100) %}\n    {% capture query %}\n      query {\n        orders(\n          first: 250\n          after: {{ cursor | json }}\n          query: {{ orders_query | json }}\n        ) {\n          pageInfo {\n            hasNextPage\n          }\n          edges {\n            cursor\n          }\n        }\n      }\n    {% endcapture %}\n\n    {% assign result = query | shopify %}\n\n    {% if event.preview %}\n      {% assign inventory_is_zeroed = false %}\n\n      {% capture result_json %}\n        {\n          \"data\": {\n            \"orders\": {\n              \"pageInfo\": {\n                \"hasNextPage\": false\n              },\n              \"edges\": [\n                {% for n in (1..options.maximum_daily_orders__number_required) %}\n                  {\n                    \"cursor\": \"eyJsYXN0X2lkIjoyMTQ4MTQ2MjQ5NzczLCJsYXN0X3ZhbHVlIjoiMjAyMC0wNC0wMyAxNzowMjoxMyJ9\"\n                  }{% unless forloop.last %},{% endunless %}\n                {% endfor %}\n              ]\n            }\n          }\n        }\n      {% endcapture %}\n\n      {% assign result = result_json | parse_json %}\n    {% endif %}\n\n    {% assign orders_today = orders_today | plus: result.data.orders.edges.size %}\n\n    {% if result.data.orders.pageInfo.hasNextPage %}\n      {% assign cursor = result.data.orders.edges.last.cursor %}\n    {% else %}\n      {% break %}\n    {% endif %}\n  {% endfor %}\n\n  {% log orders_today_thus_far: orders_today, orders_query: orders_query, inventory_is_already_zeroed: inventory_is_zeroed %}\n\n  {% if orders_today >= options.maximum_daily_orders__number_required and inventory_is_zeroed == false %}\n    {% action \"cache\", \"set\", inventory_is_zeroed_cache_key, true %}\n\n    {% assign cursor = nil %}\n\n    {% for n in (0..100) %}\n      {% capture query %}\n        query {\n          inventoryItems(\n            first: 65\n            after: {{ cursor | json }}\n          ) {\n            pageInfo {\n              hasNextPage\n            }\n            edges {\n              cursor\n              node {\n                variant {\n                  product {\n                    tags\n                  }\n                }\n                inventoryLevels(\n                  first: 10\n                ) {\n                  edges {\n                    node {\n                      id\n                      available\n                    }\n                  }\n                }\n              }\n            }\n          }\n        }\n      {% endcapture %}\n\n      {% assign result = query | shopify %}\n\n      {% if event.preview %}\n        {% capture result_json %}\n          {\n            \"data\": {\n              \"inventoryItems\": {\n                \"pageInfo\": {\n                  \"hasNextPage\": false\n                },\n                \"edges\": [\n                  {\n                    \"cursor\": \"eyJsYXN0X2lkIjozNTIxODc4MTAxMjAxMywibGFzdF92YWx1ZSI6IjM1MjE4NzgxMDEyMDEzIn0=\",\n                    \"node\": {\n                      \"variant\": {\n                        \"product\": {\n                          \"tags\": [\n                            {% if options.only_clear_inventory_for_products_with_this_tag != blank %}\n                              {{ options.only_clear_inventory_for_products_with_this_tag | json }}\n                            {% endif %}\n                          ]\n                        }\n                      },\n                      \"inventoryLevels\": {\n                        \"edges\": [\n                          {\n                            \"node\": {\n                              \"id\": \"gid://shopify/InventoryLevel/1234567890?inventory_item_id=1234567890\",\n                              \"available\": 20\n                            }\n                          }\n                        ]\n                      }\n                    }\n                  }\n                ]\n              }\n            }\n          }\n        {% endcapture %}\n\n        {% assign result = result_json | parse_json %}\n      {% endif %}\n\n      {% for inventoryItem_edge in result.data.inventoryItems.edges %}\n        {% if options.only_clear_inventory_for_products_with_this_tag != blank %}\n          {% unless inventoryItem_edge.node.variant.product.tags contains options.only_clear_inventory_for_products_with_this_tag %}\n            {% continue %}\n          {% endunless %}\n        {% endif %}\n\n        {% for inventoryLevel_edge in inventoryItem_edge.node.inventoryLevels.edges %}\n          {% if inventoryLevel_edge.node.available <= 0 %}\n            {% continue %}\n          {% endif %}\n\n          {% assign inventory_levels_to_zero[inventoryLevel_edge.node.id] = inventoryLevel_edge.node.available %}\n        {% endfor %}\n      {% endfor %}\n\n      {% if result.data.inventoryItems.pageInfo.hasNextPage %}\n        {% assign cursor = result.data.inventoryItems.edges.last.cursor %}\n      {% else %}\n        {% break %}\n      {% endif %}\n    {% endfor %}\n\n    {% if inventory_levels_to_zero.size > 0 %}\n      {% for keyval in inventory_levels_to_zero %}\n        {% assign inventory_level_id = keyval[0] %}\n        {% assign inventory_level_available = keyval[1] %}\n\n        {% action \"shopify\" %}\n          mutation {\n            inventoryAdjustQuantity(\n              input: {\n                inventoryLevelId: {{ inventory_level_id | json }}\n                availableDelta: {{ inventory_level_available | times: -1 | json }}\n              }\n            ) {\n              inventoryLevel {\n                available\n              }\n              userErrors {\n                field\n                message\n              }\n            }\n          }\n        {% endaction %}\n      {% endfor %}\n\n      {% if options.restore_inventory_levels_the_next_day__boolean or options.restore_inventory_levels_on_demand__boolean %}\n        {% action \"cache\", \"set\", cache_key, inventory_levels_to_zero %}\n      {% endif %}\n    {% endif %}\n  {% endif %}\n{% elsif event.topic contains \"mechanic/\" %}\n  {% assign proceed = false %}\n\n  {% if event.topic == \"mechanic/scheduler/daily\" and options.restore_inventory_levels_the_next_day__boolean %}\n    {% assign proceed = true %}\n  {% elsif event.topic == \"mechanic/user/trigger\" and options.restore_inventory_levels_on_demand__boolean %}\n    {% assign proceed = true %}\n  {% endif %}\n\n  {% if proceed %}\n    {% action \"cache\", \"del\", inventory_is_zeroed_cache_key %}\n\n    {% assign day_in_s = 60 | times: 60 | times: 24 %}\n    {% assign midnight = \"now\" | date: \"%s\" | minus: day_in_s | date: \"%Y-%m-%dT00:00:00%z\" %}\n    {% assign midnight_s = midnight | date: \"%s\" %}\n    {% assign cache_key = \"inventory_to_restore:\" | append: midnight_s %}\n\n    {% assign inventory_levels_to_restore = cache[cache_key] | default: hash %}\n\n    {% if inventory_levels_to_restore == blank %}\n      {% assign midnight = \"now\" | date: \"%Y-%m-%dT00:00:00%z\" %}\n      {% assign midnight_s = midnight | date: \"%s\" %}\n      {% assign cache_key = \"inventory_to_restore:\" | append: midnight_s %}\n      {% assign inventory_levels_to_restore = cache[cache_key] | default: hash %}\n    {% endif %}\n\n    {% if event.preview %}\n      {% assign inventory_levels_to_restore = hash %}\n      {% assign id = \"gid://shopify/InventoryLevel/1234567890?inventory_item_id=1234567890\" %}\n      {% assign inventory_levels_to_restore[id] = 20 %}\n    {% endif %}\n\n    {% log inventory_levels_to_restore_count: inventory_levels_to_restore.size, inventory_levels_to_restore: inventory_levels_to_restore, since: midnight %}\n\n    {% for keyval in inventory_levels_to_restore %}\n      {% assign inventory_level_id = keyval[0] %}\n      {% assign inventory_level_available = keyval[1] %}\n\n      {% action \"shopify\" %}\n        mutation {\n          inventoryAdjustQuantity(\n            input: {\n              inventoryLevelId: {{ inventory_level_id | json }}\n              availableDelta: {{ inventory_level_available | json }}\n            }\n          ) {\n            inventoryLevel {\n              available\n            }\n            userErrors {\n              field\n              message\n            }\n          }\n        }\n      {% endaction %}\n    {% endfor %}\n\n    {% if inventory_levels_to_restore != blank %}\n      {% action \"cache\", \"del\", cache_key %}\n    {% endif %}\n  {% endif %}\n{% endif %}",
  "docs": "This task works by setting your inventory to zero when the order limit is reached. (Specifically, this means setting inventory levels to 0 for all items that have a greater-than-zero inventory level.) When the limit is reached, your inventory will be dropped to zero. If your store is configured to stop selling out-of-stock products, your customers will be prevented from making additional purchases.\n\nAnd, this task can restore inventory to its original levels at midnight the next day, or on demand. (Restore levels on demand by enabling this option, then using the \"Run task\" button.).\n\n### Important notes\n\n* ​This task only works for products that have inventory tracking enabled, which are configured to be unavailable when out of stock. This means that the \"Track quantity\" product option needs to be enabled, and the \"Continue selling when out of stock\" option needs to be disabled, for all products.\n* The \"Only clear inventory for products with this tag\" does _not_ change which orders are considered for the daily maximum. Use the \"Only count orders matching this query\" option to filter orders for counting, using the same order search syntax as the Shopify admin.\n* **This task may be not behave as intended if you receive multiple orders per minute. We don't recommend using it for high-volume stores.**",
  "halt_action_run_sequence_on_error": false,
  "online_store_javascript": null,
  "order_status_javascript": null,
  "perform_action_runs_in_sequence": false,
  "tags": [
    "Max Orders",
    "Orders"
  ]
}
