{
  "name": "Get email alerts for out of stock products",
  "options": {
    "out_of_stock_inventory_quantity__number_required": "10",
    "only_monitor_products_matching_this_search_query": "shirt",
    "send_email_for_out_of_stock_products__boolean": true,
    "send_email_for_back_in_stock_products__boolean": true,
    "stock_update_email_recipients__email_array_required": []
  },
  "subscriptions": [
    "shopify/inventory_levels/update",
    "mechanic/user/trigger"
  ],
  "subscriptions_template": "shopify/inventory_levels/update\nmechanic/user/trigger",
  "script": "{% assign out_of_stock_inventory_quantity = options.out_of_stock_inventory_quantity__number_required %}\n{% assign query = options.only_monitor_products_matching_this_search_query | default: \"\" %}\n\n{% assign metafield_key = task.id | append: query | append: out_of_stock_inventory_quantity | sha256 | slice: 0, 7 | append: \"-out-of-stock\" %}\n\n{% if event.topic contains \"shopify/inventory_levels/\" %}\n  {% capture product_query %}\n    query {\n      inventoryLevel(\n        id: {{ inventory_level.admin_graphql_api_id | json }}\n      ) {\n        item {\n          variant {\n            product {\n              id\n              title\n            }\n          }\n        }\n      }\n    }\n  {% endcapture %}\n\n  {% assign product_result = product_query | shopify %}\n  {% assign product_result = product_result.data.inventoryLevel.item.variant.product %}\n\n  {% assign query = product_result.title | json | prepend: \" title:\" | prepend: query %}\n{% endif %}\n\n{% assign back_in_stock_email_list = array %}\n{% assign newly_back_in_stock_email_product_title = nil %}\n{% assign newly_back_in_stock_metafield_ids = array %}\n{% assign newly_back_in_stock_product_ids = array %}\n{% assign newly_out_of_stock_product_ids = array %}\n{% assign out_of_stock_email_list = array %}\n{% assign out_of_stock_email_product_title = nil %}\n\n{% assign cursor = nil %}\n\n{% for n in (0..100) %}\n  {% capture products_search_query %}\n    query {\n      products(\n        first: 250\n        query: {{ query | json }}\n        after: {{ cursor | json }}\n      ) {\n        pageInfo {\n          hasNextPage\n        }\n        edges {\n          cursor\n          node {\n            id\n            legacyResourceId\n            title\n            totalInventory\n            metafield(\n              namespace: \"mechanic\"\n              key: {{ metafield_key | json }}\n            ) {\n              id\n            }\n          }\n        }\n      }\n    }\n  {% endcapture %}\n\n  {% assign products_search_result = products_search_query | shopify %}\n\n  {% for edge in products_search_result.data.products.edges %}\n    {% if edge.node.totalInventory <= out_of_stock_inventory_quantity %}\n      {% if edge.node.metafield == nil or event.topic == \"mechanic/user/trigger\" %}\n        {\"log\": {{ edge.node.title | append: \" is out of stock.\" | json }}}\n        {% assign out_of_stock_email_product_title = edge.node.title %}\n\n        {% if edge.node.metafield == nil %}\n          {% comment %}\n            For a manual run, we always send an email about out-of-stock products. But, we\n            don't need to consider these products *newly* out of stock.\n          {% endcomment %}\n          {% assign newly_out_of_stock_product_ids[newly_out_of_stock_product_ids.size] = edge.node.id %}\n        {% endif %}\n\n        {% assign out_of_stock_email_list[out_of_stock_email_list.size] = '<li><a href=\"https://' | append: shop.domain | append: '/admin/products/' | append: edge.node.legacyResourceId | append: '\">' | append: edge.node.title | append: '</a></li>' %}\n      {% endif %}\n    {% else %}\n      {% if edge.node.metafield %}\n        {\"log\": {{ edge.node.title | append: \" is back in stock.\" | json }}}\n        {% assign newly_back_in_stock_email_product_title = edge.node.title %}\n        {% assign newly_back_in_stock_product_ids[newly_back_in_stock_product_ids.size] = edge.node.id %}\n        {% assign newly_back_in_stock_metafield_ids[newly_back_in_stock_metafield_ids.size] = edge.node.metafield.id %}\n        {% assign back_in_stock_email_list[back_in_stock_email_list.size] = '<li><a href=\"https://' | append: shop.domain | append: '/admin/products/' | append: edge.node.legacyResourceId | append: '\">' | append: edge.node.title | append: '</a></li>' %}\n      {% endif %}\n    {% endif %}\n  {% endfor %}\n\n  {% if products_search_result.products.pageInfo.hasNextPage %}\n    {% assign cursor = products_search_result.data.products.edges.last.cursor %}\n  {% else %}\n    {% break %}\n  {% endif %}\n{% endfor %}\n\n{% if event.preview %}\n  {% assign out_of_stock_email_list[back_in_stock_email_list.size] = '<li><a>Premium T-Shirt</a></li>' %}\n  {% assign newly_out_of_stock_product_ids[newly_out_of_stock_product_ids.size] = 'gid://shopify/Product/1234567890' %}\n  {% assign out_of_stock_email_product_title = 'Premium T-Shirt' %}\n{% endif %}\n\n{% assign mutations = array %}\n\n{% for product_id in newly_out_of_stock_product_ids %}\n  {% capture mutation %}\n    mutation {\n      productUpdate(\n        input: {\n          id: {{ product_id | json }}\n          metafields: [\n            {\n              namespace: \"mechanic\"\n              key: {{ metafield_key | json }}\n              valueType: INTEGER\n              value: \"1\"\n            }\n          ]\n        }\n      ) {\n        userErrors {\n          field\n          message\n        }\n      }\n    }\n  {% endcapture %}\n\n  {% assign mutations[mutations.size] = mutation %}\n{% endfor %}\n\n{% for metafield_id in newly_back_in_stock_metafield_ids %}\n  {% capture mutation %}\n    mutation {\n      metafieldDelete(\n        input: {\n          id: {{ metafield_id | json }}\n        }\n      ) {\n        userErrors {\n          field\n          message\n        }\n      }\n    }\n  {% endcapture %}\n\n  {% assign mutations[mutations.size] = mutation %}\n{% endfor %}\n\n{\"log\": \"Out of stock: {{ newly_out_of_stock_product_ids.size }} product(s)\"}\n{\"log\": \"Back in stock: {{ newly_back_in_stock_product_ids.size }} product(s)\"}\n\n{% if options.send_email_for_out_of_stock_products__boolean != true %}\n  {% assign out_of_stock_email_list = array %}\n{% endif %}\n\n{% if options.send_email_for_back_in_stock_products__boolean != true %}\n  {% assign back_in_stock_email_list = array %}\n{% endif %}\n\n{% if out_of_stock_email_list.size > 0 or back_in_stock_email_list.size > 0 %}\n  {% capture email_subject %}\n    {% if out_of_stock_email_list.size == 1 and back_in_stock_email_list.size == 0 %}\n      Out of stock: {{ out_of_stock_email_product_title }}\n    {% elsif back_in_stock_email_list.size == 1 and out_of_stock_email_list.size == 0 %}\n      Back in stock: {{ newly_back_in_stock_email_product_title }}\n    {% elsif out_of_stock_email_list.size > 1 and back_in_stock_email_list.size == 0 %}\n      Out of stock: {{ out_of_stock_email_list.size }} products\n    {% elsif back_in_stock_email_list.size > 1 and out_of_stock_email_list.size == 0 %}\n      Back in stock: {{ out_of_stock_email_list.size }} products\n    {% else %}\n      Stock update: {{ out_of_stock_email_list.size }} out of stock, {{ back_in_stock_email_list.size }} back in stock\n    {% endif %}\n  {% endcapture %}\n\n  {% capture email_body %}\n    Hi there,\n    <br><br>\n\n    {% if out_of_stock_email_list.size > 0 %}\n      We found <b>{{ out_of_stock_email_list.size }} out of stock {{ out_of_stock_email_list.size | pluralize: 'product', 'products' }}</b>:\n      <br>\n      <ul>{{ out_of_stock_email_list | join: \"\" }}</ul>\n      <br>\n    {% endif %}\n\n    {% if back_in_stock_email_list.size > 0 %}\n      We found <b>{{ back_in_stock_email_list.size }} back in stock {{ back_in_stock_email_list.size | pluralize: 'product', 'products' }}</b>:\n      <br>\n      <ul>{{ back_in_stock_email_list | join: \"\" }}</ul>\n      <br>\n    {% endif %}\n\n    Thanks,\n    <br>Mechanic (for {{ shop.name }})\n  {% endcapture %}\n\n  {% action \"email\" %}\n    {\n      \"to\": {{ options.stock_update_email_recipients__email_array_required | join: \", \" | json }},\n      \"subject\": {{ email_subject | strip | json }},\n      \"body\": {{ email_body | unindent | strip | json }},\n      \"reply_to\": {{ shop.customer_email | json }},\n      \"from_display_name\": {{ shop.name | json }}\n    }\n  {% endaction %}\n{% endif %}\n\n{% for mutation in mutations %}\n  {% action \"shopify\" mutation %}\n{% endfor %}",
  "docs": "Use this task to keep you and your team updated when products go out of stock - and, optionally, when they go back in stock. Filter with a simple product search to only track products you care about. Choose a custom stock threshold to get a heads up before the stock level reaches zero.\n\nConfigure this task to receive email alerts when products go out of stock, for the threshold of your choice, optionally applying a specific product search.\r\n\r\nRun this task manually to scan all products up front. While this task normally remembers which products were out (or in) stock, running this task manually will always result in an email summary of out of stock products.",
  "halt_action_run_sequence_on_error": false,
  "online_store_javascript": null,
  "order_status_javascript": null,
  "perform_action_runs_in_sequence": false,
  "tags": [
    "Alert",
    "Email",
    "Out of Stock"
  ]
}
