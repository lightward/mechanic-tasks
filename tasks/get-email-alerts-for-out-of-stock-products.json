{
  "docs": "Use this task to keep you and your team updated when products go out of stock - and, optionally, when they go back in stock. Filter with a simple product search to only track products you care about. Choose a custom stock threshold to get a heads up before the stock level reaches zero.\n\nRun this task manually to scan all products up front. While this task normally remembers which products were out (or in) stock, running this task manually will always result in an email summary of out of stock products.",
  "halt_action_run_sequence_on_error": false,
  "name": "Get email alerts for out of stock products",
  "online_store_javascript": null,
  "options": {
    "out_of_stock_inventory_quantity__number_required": "10",
    "only_monitor_products_matching_this_search_query": "shirt",
    "send_email_for_out_of_stock_products__boolean": true,
    "send_email_for_back_in_stock_products__boolean": true,
    "stock_update_email_recipients__email_array_required": []
  },
  "order_status_javascript": null,
  "perform_action_runs_in_sequence": false,
  "script": "{% assign out_of_stock_inventory_quantity = options.out_of_stock_inventory_quantity__number_required %}\n{% assign search_query = options.only_monitor_products_matching_this_search_query | default: \"\" %}\n\n{% assign metafield_key\n  = task.id\n  | append: search_query\n  | append: out_of_stock_inventory_quantity\n  | sha256\n  | slice: 0, 7\n  | append: \"-out-of-stock\"\n%}\n\n{% if event.topic contains \"shopify/inventory_levels/\" %}\n  {% capture query %}\n    query {\n      inventoryLevel(\n        id: {{ inventory_level.admin_graphql_api_id | json }}\n      ) {\n        item {\n          variant {\n            product {\n              legacyResourceId\n            }\n          }\n        }\n      }\n    }\n  {% endcapture %}\n\n  {% assign result = query | shopify %}\n\n  {% comment %}\n    -- send the product ID through the paginated query so any configured search query can be applied to it\n  {% endcomment %}\n\n  {%- capture search_query -%}\n    {{ search_query }} id:{{ result.data.inventoryLevel.item.variant.product.legacyResourceId }}\n  {%- endcapture -%}\n{% endif %}\n\n{% assign back_in_stock_email_list = array %}\n{% assign newly_back_in_stock_email_product_title = nil %}\n{% assign newly_back_in_stock_product_ids = array %}\n{% assign newly_out_of_stock_product_ids = array %}\n{% assign out_of_stock_email_list = array %}\n{% assign out_of_stock_email_product_title = nil %}\n\n{% assign cursor = nil %}\n\n{% for n in (0..100) %}\n  {% capture query %}\n    query {\n      products(\n        first: 250\n        query: {{ search_query | json }}\n        after: {{ cursor | json }}\n      ) {\n        pageInfo {\n          hasNextPage\n          endCursor\n        }\n        nodes {\n          id\n          legacyResourceId\n          title\n          totalInventory\n          metafield(\n            namespace: \"mechanic\"\n            key: {{ metafield_key | json }}\n          ) {\n            id\n          }\n        }\n      }\n    }\n  {% endcapture %}\n\n  {% assign result = query | shopify %}\n\n  {% for product in result.data.products.nodes %}\n    {% if product.totalInventory <= out_of_stock_inventory_quantity %}\n      {% if product.metafield == blank or event.topic == \"mechanic/user/trigger\" %}\n        {%- capture log_message -%}\n          {{ product.title }} is out of stock.\n        {%- endcapture -%}\n\n        {% log log_message %}\n\n        {% assign out_of_stock_email_product_title = product.title %}\n\n        {% if product.metafield == blank %}\n          {% comment %}\n            For a manual run, we always send an email about out-of-stock products. But, we\n            don't need to consider these products *newly* out of stock.\n          {% endcomment %}\n          {% assign newly_out_of_stock_product_ids[newly_out_of_stock_product_ids.size] = product.id %}\n        {% endif %}\n\n        {%- capture list_item -%}\n          <li><a href=\"{{ shop.admin_url }}/products/{{ product.legacyResourceId }}\">{{ product.title }}</a></li>\n        {%- endcapture -%}\n\n        {% assign out_of_stock_email_list = out_of_stock_email_list | push: list_item %}\n      {% endif %}\n\n    {% else %}\n      {% if product.metafield %}\n        {%- capture log_message -%}\n          {{ product.title }} is back in stock.\n        {%- endcapture -%}\n\n        {% log log_message %}\n\n        {% assign newly_back_in_stock_email_product_title = product.title %}\n        {% assign newly_back_in_stock_product_ids[newly_back_in_stock_product_ids.size] = product.id %}\n\n        {%- capture list_item -%}\n          <li><a href=\"{{ shop.admin_url }}/products/{{ product.legacyResourceId }}\">{{ product.title }}</a></li>\n        {%- endcapture -%}\n\n        {% assign back_in_stock_email_list = back_in_stock_email_list | push: list_item %}\n      {% endif %}\n    {% endif %}\n  {% endfor %}\n\n  {% if result.products.pageInfo.hasNextPage %}\n    {% assign cursor = result.data.products.pageInfo.endCursor %}\n  {% else %}\n    {% break %}\n  {% endif %}\n{% endfor %}\n\n{% if event.preview %}\n  {% assign out_of_stock_email_list[back_in_stock_email_list.size] = '<li><a>Premium T-Shirt</a></li>' %}\n  {% assign newly_out_of_stock_product_ids[newly_out_of_stock_product_ids.size] = 'gid://shopify/Product/1234567890' %}\n  {% assign out_of_stock_email_product_title = 'Premium T-Shirt' %}\n{% endif %}\n\n{% log\n  newly_out_of_stock_product_count: newly_out_of_stock_product_ids.size,\n  newly_back_in_stock_product_count: newly_back_in_stock_product_ids.size\n%}\n\n{% comment %}\n  -- save mutation inputs for setting and deleting metafields\n{% endcomment %}\n\n{% assign metafields_to_set = array %}\n{% assign metafields_to_delete = array %}\n\n{% for product_id in newly_out_of_stock_product_ids %}\n  {% assign metafield_to_set = hash %}\n  {% assign metafield_to_set[\"ownerId\"] = product_id %}\n  {% assign metafield_to_set[\"namespace\"] = \"mechanic\" %}\n  {% assign metafield_to_set[\"key\"] = metafield_key %}\n  {% assign metafield_to_set[\"type\"] = \"number_integer\" %}\n  {% assign metafield_to_set[\"value\"] = \"1\" %}\n  {% assign metafields_to_set = metafields_to_set | push: metafield_to_set %}\n{% endfor %}\n\n{% for product_id in newly_back_in_stock_product_ids %}\n  {% assign metafield_to_delete = hash %}\n  {% assign metafield_to_delete[\"ownerId\"] = product_id %}\n  {% assign metafield_to_delete[\"namespace\"] = \"mechanic\" %}\n  {% assign metafield_to_delete[\"key\"] = metafield_key %}\n  {% assign metafields_to_delete = metafields_to_delete | push: metafield_to_delete %}\n{% endfor %}\n\n{% if options.send_email_for_out_of_stock_products__boolean != true %}\n  {% assign out_of_stock_email_list = array %}\n{% endif %}\n\n{% if options.send_email_for_back_in_stock_products__boolean != true %}\n  {% assign back_in_stock_email_list = array %}\n{% endif %}\n\n{% if out_of_stock_email_list.size > 0 or back_in_stock_email_list.size > 0 %}\n  {% capture email_subject %}\n    {% if out_of_stock_email_list.size == 1 and back_in_stock_email_list.size == 0 %}\n      Out of stock: {{ out_of_stock_email_product_title }}\n    {% elsif back_in_stock_email_list.size == 1 and out_of_stock_email_list.size == 0 %}\n      Back in stock: {{ newly_back_in_stock_email_product_title }}\n    {% elsif out_of_stock_email_list.size > 1 and back_in_stock_email_list.size == 0 %}\n      Out of stock: {{ out_of_stock_email_list.size }} products\n    {% elsif back_in_stock_email_list.size > 1 and out_of_stock_email_list.size == 0 %}\n      Back in stock: {{ out_of_stock_email_list.size }} products\n    {% else %}\n      Stock update: {{ out_of_stock_email_list.size }} out of stock, {{ back_in_stock_email_list.size }} back in stock\n    {% endif %}\n  {% endcapture %}\n\n  {% capture email_body %}\n    Hi there,\n    <br><br>\n\n    {% if out_of_stock_email_list.size > 0 %}\n      We found <b>{{ out_of_stock_email_list.size }} out of stock {{ out_of_stock_email_list.size | pluralize: 'product', 'products' }}</b>:\n      <br>\n      <ul>{{ out_of_stock_email_list | join: \"\" }}</ul>\n      <br>\n    {% endif %}\n\n    {% if back_in_stock_email_list.size > 0 %}\n      We found <b>{{ back_in_stock_email_list.size }} back in stock {{ back_in_stock_email_list.size | pluralize: 'product', 'products' }}</b>:\n      <br>\n      <ul>{{ back_in_stock_email_list | join: \"\" }}</ul>\n      <br>\n    {% endif %}\n\n    Thanks,\n    <br>Mechanic (for {{ shop.name }})\n  {% endcapture %}\n\n  {% action \"email\" %}\n    {\n      \"to\": {{ options.stock_update_email_recipients__email_array_required | join: \", \" | json }},\n      \"subject\": {{ email_subject | strip | json }},\n      \"body\": {{ email_body | unindent | strip | json }},\n      \"reply_to\": {{ shop.customer_email | json }},\n      \"from_display_name\": {{ shop.name | json }}\n    }\n  {% endaction %}\n{% endif %}\n\n{% comment %}\n  -- metafields may be set 25 at a time\n{% endcomment %}\n\n{% if metafields_to_set != blank %}\n  {% assign groups_of_metafields_to_set = metafields_to_set | in_groups_of: 25, fill_with: false %}\n\n  {% for group_of_metafields_to_set in groups_of_metafields_to_set %}\n    {% action \"shopify\" %}\n      mutation {\n        metafieldsSet(\n          metafields: {{ group_of_metafields_to_set | graphql_arguments }}\n        ) {\n          metafields {\n            id\n            namespace\n            key\n            type\n            value\n            owner {\n              ... on Product {\n                id\n              }\n            }\n          }\n          userErrors {\n            code\n            field\n            message\n          }\n        }\n      }\n    {% endaction %}\n  {% endfor %}\n{% endif %}\n\n{% comment %}\n  -- metafields may be deleted in batches of 250\n{% endcomment %}\n\n{% if metafields_to_delete != blank %}\n  {% assign groups_of_metafields_to_delete = metafields_to_delete | in_groups_of: 250, fill_with: false %}\n\n  {% for group_of_metafields_to_delete in groups_of_metafields_to_delete %}\n    {% action \"shopify\" %}\n      mutation {\n        metafieldsDelete(\n          metafields: {{ group_of_metafields_to_delete | graphql_arguments }}\n        ) {\n          deletedMetafields {\n            ownerId\n            namespace\n            key\n          }\n          userErrors {\n            field\n            message\n          }\n        }\n      }\n    {% endaction %}\n  {% endfor %}\n{% endif %}\n",
  "subscriptions": [
    "shopify/inventory_levels/update",
    "mechanic/user/trigger"
  ],
  "subscriptions_template": "shopify/inventory_levels/update\nmechanic/user/trigger",
  "tags": [
    "Alert",
    "Email",
    "Out of Stock"
  ]
}
