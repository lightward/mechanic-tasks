{
  "name": "Move out-of-stock products to the end of a collection",
  "options": {
    "base_sort_order__required": "ALPHA_DESC",
    "collection_titles_or_ids_to_include__array": null,
    "collection_titles_or_ids_to_exclude__array": null,
    "force_manual_sorting_on_collections__boolean": false,
    "run_hourly__boolean": false,
    "run_daily__boolean": false
  },
  "subscriptions": [
    "mechanic/user/trigger",
    "user/reorder_collection/stage_2"
  ],
  "subscriptions_template": "mechanic/user/trigger\n{% if options.run_hourly__boolean %}mechanic/scheduler/hourly{% endif %}\n{% if options.run_daily__boolean %}mechanic/scheduler/daily{% endif %}",
  "script": "{% assign allowed_base_sort_orders = \"MANUAL,BEST_SELLING,ALPHA_ASC,ALPHA_DESC,PRICE_DESC,PRICE_ASC,CREATED_DESC,CREATED\" | split: \",\" %}\n\n{% unless allowed_base_sort_orders contains options.base_sort_order__required %}\n  {% error %}\n    {{ allowed_base_sort_orders | join: \", \" | prepend: \"Base sort order must be one of: \" | json }}\n  {% enderror %}\n{% endunless %}\n\n{% log %}\n  {{ options.base_sort_order__required | prepend: \"Base sort order for this task run: \" | json }}\n{% endlog %}\n\n{% assign product_sort_order = options.base_sort_order__required %}\n{% assign reverse_sort = nil %}\n\n{% case product_sort_order %}\n  {% when \"ALPHA_ASC\" %}\n    {% assign product_sort_order = \"TITLE\" %}\n\n  {% when \"ALPHA_DESC\" %}\n    {% assign product_sort_order = \"TITLE\" %}\n    {% assign reverse_sort = true %}\n\n  {% when \"CREATED_DESC\" %}\n    {% assign product_sort_order = \"CREATED\" %}\n    {% assign reverse_sort = true %}\n\n  {% when \"PRICE_ASC\" %}\n    {% assign product_sort_order = \"PRICE\" %}\n\n  {% when \"PRICE_DESC\" %}\n    {% assign product_sort_order = \"PRICE\" %}\n    {% assign reverse_sort = true %}\n{% endcase %}\n\n{% assign collection_titles_or_ids_to_include = options.collection_titles_or_ids_to_include__array %}\n{% assign collection_titles_or_ids_to_exclude = options.collection_titles_or_ids_to_exclude__array %}\n{% assign force_manual_sorting_on_collections = options.force_manual_sorting_on_collections__boolean %}\n\n{% if event.preview %}\n  {% capture shop_json %}\n    {\n      \"collections\": [\n        {\n          \"id\": {{ collection_titles_or_ids_to_include.first | default: \"1234567890\" | json }},\n          \"admin_graphql_api_id\": \"gid://shopify/Collection/1234567890\"\n        }\n      ]\n    }\n  {% endcapture %}\n\n  {% assign shop = shop_json | parse_json %}\n{% endif %}\n\n{% for collection in shop.collections %}\n  {% assign collection_id_string = \"\" | append: collection.id %}\n\n  {% if collection_titles_or_ids_to_include != blank  %}\n    {% unless collection_titles_or_ids_to_include contains collection_id_string\n      or collection_titles_or_ids_to_include contains collection.title %}\n      {% continue %}\n    {% endunless %}\n\n  {% elsif collection_titles_or_ids_to_exclude != blank  %}\n    {% if collection_titles_or_ids_to_exclude contains collection_id_string\n      or collection_titles_or_ids_to_exclude contains collection.title %}\n      {% continue %}\n    {% endif %}\n  {% endif %}\n\n  {% if collection.sort_order != \"manual\" %}\n    {% if force_manual_sorting_on_collections or event.preview %}\n      {% action \"shopify\" %}\n        mutation {\n          collectionUpdate(\n            input: {\n              id: {{ collection.admin_graphql_api_id | json }}\n              sortOrder: MANUAL\n            }\n          ) {\n            userErrors {\n              field\n              message\n            }\n          }\n        }\n      {% endaction %}\n\n    {% else %}\n      {% log %}\n        {{ collection.title | json | append: \" is not configured for manual sorting; skipping.\" | json }}\n      {% endlog %}\n\n      {% continue %}\n    {% endif %}\n  {% endif %}\n\n  {% assign all_product_ids_current_sort = array %}\n  {% assign cursor = nil %}\n\n  {% for n in (0..100) %}\n    {% capture query %}\n      query {\n        collection(id: {{ collection.admin_graphql_api_id | json }}) {\n          products(\n            sortKey: COLLECTION_DEFAULT\n            first: 250\n            after: {{ cursor | json }}\n          ) {\n            pageInfo {\n              hasNextPage\n            }\n            edges {\n              cursor\n              node {\n                id\n              }\n            }\n          }\n        }\n      }\n    {% endcapture %}\n\n    {% assign result = query | shopify %}\n\n    {% for product_edge in result.data.collection.products.edges %}\n      {% assign all_product_ids_current_sort[all_product_ids_current_sort.size] = product_edge.node.id %}\n    {% endfor %}\n\n    {% if result.data.collection.products.pageInfo.hasNextPage %}\n      {% assign cursor = result.data.collection.products.edges.last.cursor %}\n    {% else %}\n      {% break %}\n    {% endif %}\n  {% endfor %}\n\n  {% assign in_stock_product_ids = array %}\n  {% assign out_of_stock_product_ids = array %}\n  {% assign cursor = nil %}\n\n  {% for n in (0..100) %}\n    {% capture query %}\n      query {\n        collection(id: {{ collection.admin_graphql_api_id | json }}) {\n          products(\n            sortKey: {{ product_sort_order }}\n            reverse: {{ reverse_sort | json }}\n            first: 250\n            after: {{ cursor | json }}\n          ) {\n            pageInfo {\n              hasNextPage\n            }\n            edges {\n              cursor\n              node {\n                id\n                tracksInventory\n                totalInventory\n              }\n            }\n          }\n        }\n      }\n    {% endcapture %}\n\n    {% assign result = query | shopify %}\n\n    {% if event.preview %}\n      {% capture result_json %}\n        {\n          \"data\": {\n            \"collection\": {\n              \"products\": {\n                \"edges\": [\n                  {\n                    \"node\": {\n                      \"id\": \"gid://shopify/Product/1234567890\",\n                      \"tracksInventory\": true,\n                      \"totalInventory\": 1\n                    }\n                  },\n                  {\n                    \"node\": {\n                      \"id\": \"gid://shopify/Product/2345678901\",\n                      \"tracksInventory\": true,\n                      \"totalInventory\": 0\n                    }\n                  },\n                  {\n                    \"node\": {\n                      \"id\": \"gid://shopify/Product/3456789012\",\n                      \"tracksInventory\": false,\n                      \"totalInventory\": null\n                    }\n                  },\n                  {\n                    \"node\": {\n                      \"id\": \"gid://shopify/Product/4567890123\",\n                      \"tracksInventory\": true,\n                      \"totalInventory\": 2\n                    }\n                  }\n                ]\n              }\n            }\n          }\n        }\n      {% endcapture %}\n\n      {% assign result = result_json | parse_json %}\n    {% endif %}\n\n    {% for product_edge in result.data.collection.products.edges %}\n      {% if product_edge.node.tracksInventory and product_edge.node.totalInventory <= 0 %}\n        {% assign out_of_stock_product_ids[out_of_stock_product_ids.size] = product_edge.node.id %}\n      {% else %}\n        {% assign in_stock_product_ids[in_stock_product_ids.size] = product_edge.node.id %}\n      {% endif %}\n    {% endfor %}\n\n    {% if result.data.collection.products.pageInfo.hasNextPage %}\n      {% assign cursor = result.data.collection.products.edges.last.cursor %}\n    {% else %}\n      {% break %}\n    {% endif %}\n  {% endfor %}\n\n  {% assign all_product_ids = in_stock_product_ids | concat: out_of_stock_product_ids %}\n\n  {% assign moves = array %}\n\n  {% for product_id in all_product_ids %}\n    {% if all_product_ids_current_sort[forloop.index0] != product_id %}\n      {% assign move = hash %}\n      {% assign move[\"id\"] = product_id %}\n      {% assign move[\"newPosition\"] = \"\" | append: forloop.index0 %}\n      {% assign moves[moves.size] = move %}\n    {% endif %}\n  {% endfor %}\n\n  {% assign move_groups = moves | in_groups_of: 250, fill_with: false %}\n\n  {% for move_group in move_groups %}\n    {% action \"shopify\" %}\n      mutation {\n        collectionReorderProducts(\n          id: {{ collection.admin_graphql_api_id | json }}\n          moves: {{ move_group | graphql_arguments }}\n        ) {\n          userErrors {\n            field\n            message\n          }\n        }\n      }\n    {% endaction %}\n\n  {% else %}\n    {% log\n      message: \"No position moves necessary for this collection, everything is already in its appropriate sort order.\",\n      collection: collection.title\n    %}\n  {% endfor %}\n{% endfor %}",
  "docs": "This task re-sorts your collections, beginning with the sort order of your choice (alphabetically, best selling first, etc), and then moving all out-of-stock products to the very end of the collection.\n\nRun this task manually to re-sort your collections on demand. Optionally, configure this task to run hourly or nightly as well.\n\nBy default, this task will run against **ALL** of your collections. Alternatively, you may configure this task to only _include_ certain collections using each collection's title, or its ID. [Learn how to find the collection IDs.](https://learn.mechanic.dev/techniques/finding-a-resource-id)\n\nConversely, you may configure this task to _exclude_ certain collections using each collection's title, or its ID, in which case it will run against all collections except the ones in this list. [Note: if there are any collections entered into the inclusion list, then the exclusion list will be ignored.]\n\nThe combination of inclusion and exclusion options _can_ allow multiple copies of this task to run (to use different base sorting for instance), provided they are configured properly.\n\nThis task will skip any collections it encounters if the collection sorting is not already set to manual. Check the \"Force manual sorting on collections\" option to have the task update those collections to the manual sorting required by this task.\n\nYou may use any of these options for the base sort order:\n\n* MANUAL\n* ALPHA_ASC\n* ALPHA_DESC\n* BEST_SELLING\n* CREATED\n* CREATED_DESC\n* PRICE_ASC\n* PRICE_DESC\n\n__Note__: To function correctly, the \"Perform action runs in sequence\" option should stay enabled in the task's advanced settings.",
  "halt_action_run_sequence_on_error": false,
  "online_store_javascript": null,
  "order_status_javascript": null,
  "perform_action_runs_in_sequence": true,
  "tags": [
    "Collections",
    "Sort"
  ]
}
