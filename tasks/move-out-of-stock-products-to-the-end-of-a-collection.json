{
  "name": "Move out-of-stock products to the end of a collection",
  "options": {
    "base_sort_order__required": "ALPHA_DESC",
    "collection_titles_or_ids__array_required": null,
    "run_hourly__boolean": false,
    "run_daily__boolean": false
  },
  "subscriptions": [
    "mechanic/user/trigger",
    "user/reorder_collection/stage_2"
  ],
  "subscriptions_template": "mechanic/user/trigger\n{% if options.run_hourly__boolean %}mechanic/scheduler/hourly{% endif %}\n{% if options.run_daily__boolean %}mechanic/scheduler/daily{% endif %}\nuser/reorder_collection/stage_2",
  "script": "{% assign allowed_base_sort_orders = \"MANUAL,BEST_SELLING,ALPHA_ASC,ALPHA_DESC,PRICE_DESC,PRICE_ASC,CREATED_DESC,CREATED\" | split: \",\" %}\n\n{% unless allowed_base_sort_orders contains options.base_sort_order__required %}\n  {% error %}\n    {{ allowed_base_sort_orders | join: \", \" | prepend: \"Base sort order must be one of: \" | json }}\n  {% enderror %}\n{% endunless %}\n\n{% if event.topic contains \"mechanic/\" %}\n  {% if event.preview %}\n    {% capture shop_json %}\n      {\n        \"collections\": [\n          {\n            \"id\": {{ options.collection_titles_or_ids__array_required.first | json }},\n            \"admin_graphql_api_id\": \"gid://shopify/Collection/1234567890\"\n          }\n        ]\n      }\n    {% endcapture %}\n\n    {% assign shop = shop_json | parse_json %}\n  {% endif %}\n\n  {% assign collections = array %}\n\n  {% for some_collection in shop.collections %}\n    {% assign some_collection_id_string = \"\" | append: some_collection.id %}\n    {% if options.collection_titles_or_ids__array_required contains some_collection_id_string or options.collection_titles_or_ids__array_required contains some_collection.title %}\n      {% assign collections[collections.size] = some_collection %}\n    {% endif %}\n  {% endfor %}\n\n  {% for collection in collections %}\n    {% action \"shopify\" %}\n      mutation {\n        collectionUpdate(\n          input: {\n            id: {{ collection.admin_graphql_api_id | json }}\n            sortOrder: {{ options.base_sort_order__required }}\n          }\n        ) {\n          userErrors {\n            field\n            message\n          }\n        }\n      }\n    {% endaction %}\n\n    {% action \"event\" %}\n      {\n        \"topic\": \"user/reorder_collection/stage_2\",\n        \"data\": {\n          \"collection_id\": {{ collection.admin_graphql_api_id | json }}\n        }\n      }\n    {% endaction %}\n  {% endfor %}\n{% elsif event.topic == \"user/reorder_collection/stage_2\" %}\n  {% if event.preview %}\n    {% capture event_json %}\n      {\n        \"preview\": true,\n        \"data\": {\n          \"collection_id\": \"gid://shopify/Collection/1234567890\"\n        }\n      }\n    {% endcapture %}\n\n    {% assign event = event_json | parse_json %}\n  {% endif %}\n\n  {% assign in_stock_product_ids = array %}\n  {% assign out_of_stock_product_ids = array %}\n\n  {% assign cursor = nil %}\n  {% for n in (0..100) %}\n    {% capture query %}\n      query {\n        collection(id: {{ event.data.collection_id | json }}) {\n          products(\n            sortKey: COLLECTION_DEFAULT\n            first: 250\n            after: {{ cursor | json }}\n          ) {\n            pageInfo {\n              hasNextPage\n            }\n            edges {\n              cursor\n              node {\n                id\n                tracksInventory\n                totalInventory\n              }\n            }\n          }\n        }\n      }\n    {% endcapture %}\n\n    {% assign result = query | shopify %}\n\n    {% if event.preview %}\n      {% capture result_json %}\n        {\n          \"data\": {\n            \"collection\": {\n              \"products\": {\n                \"edges\": [\n                  {\n                    \"node\": {\n                      \"id\": \"gid://shopify/Product/1234567890\",\n                      \"tracksInventory\": true,\n                      \"totalInventory\": 1\n                    }\n                  },\n                  {\n                    \"node\": {\n                      \"id\": \"gid://shopify/Product/2345678901\",\n                      \"tracksInventory\": true,\n                      \"totalInventory\": 0\n                    }\n                  },\n                  {\n                    \"node\": {\n                      \"id\": \"gid://shopify/Product/3456789012\",\n                      \"tracksInventory\": false,\n                      \"totalInventory\": null\n                    }\n                  },\n                  {\n                    \"node\": {\n                      \"id\": \"gid://shopify/Product/4567890123\",\n                      \"tracksInventory\": true,\n                      \"totalInventory\": 2\n                    }\n                  }\n                ]\n              }\n            }\n          }\n        }\n      {% endcapture %}\n\n      {% assign result = result_json | parse_json %}\n    {% endif %}\n\n    {% for product_edge in result.data.collection.products.edges %}\n      {% if product_edge.node.tracksInventory and product_edge.node.totalInventory <= 0 %}\n        {% assign out_of_stock_product_ids[out_of_stock_product_ids.size] = product_edge.node.id %}\n      {% else %}\n        {% assign in_stock_product_ids[in_stock_product_ids.size] = product_edge.node.id %}\n      {% endif %}\n    {% endfor %}\n\n    {% if result.data.collection.products.pageInfo.hasNextPage %}\n      {% assign cursor = result.data.collection.products.edges.last.cursor %}\n    {% else %}\n      {% break %}\n    {% endif %}\n  {% endfor %}\n\n  {% assign all_product_ids = in_stock_product_ids | concat: out_of_stock_product_ids %}\n\n  {% assign moves = array %}\n\n  {% for product_id in all_product_ids %}\n    {% assign move = hash %}\n    {% assign move[\"id\"] = product_id %}\n    {% assign move[\"newPosition\"] = forloop.index0 | append: \"\" %}\n    {% assign moves[moves.size] = move %}\n  {% endfor %}\n\n  {% action \"shopify\" %}\n    mutation {\n      collectionUpdate(\n        input: {\n          id: {{ event.data.collection_id | json }}\n          sortOrder: MANUAL\n        }\n      ) {\n        userErrors {\n          field\n          message\n        }\n      }\n    }\n  {% endaction %}\n\n  {% assign move_groups = moves | in_groups_of: 250, fill_with: false %}\n\n  {% for move_group in move_groups %}\n    {% action \"shopify\" %}\n      mutation {\n        collectionReorderProducts(\n          id: {{ event.data.collection_id | json }}\n          moves: {{ move_group | graphql_arguments }}\n        ) {\n          userErrors {\n            field\n            message\n          }\n        }\n      }\n    {% endaction %}\n  {% endfor %}\n{% endif %}",
  "docs": "This task re-sorts your collections, beginning with the sort order of your choice (alphabetically, best selling first, etc), and then moving all out-of-stock products to the very end of the collection.\n\nRun this task manually to re-sort your collections on demand. Optionally, configure this task to run hourly or nightly as well.\n\nConfigure this task for certain collections using each collection's title, or its ID. [Learn how to find the collection IDs.](https://help.usemechanic.com/en/articles/2946120-how-do-i-find-an-id-for-a-product-collection-order-or-something-else)\n\nYou may use any of these options for the base sort order:\n\n* MANUAL\n* BEST_SELLING\n* ALPHA_ASC\n* ALPHA_DESC\n* PRICE_DESC\n* PRICE_ASC\n* CREATED_DESC\n* CREATED\n\n__Note__: To function correctly, the \"Perform action runs in sequence\" option should stay enabled in the task's advanced settings.",
  "halt_action_run_sequence_on_error": false,
  "online_store_javascript": null,
  "order_status_javascript": null,
  "perform_action_runs_in_sequence": true
}
