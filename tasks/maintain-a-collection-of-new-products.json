{
  "name": "Maintain a collection of new products",
  "options": {
    "number_of_days_to_keep_a_product_in_this_collection__number": null,
    "number_of_products_to_keep_in_this_collection__number": null,
    "collection_id__number_required": null
  },
  "subscriptions": [
    "mechanic/user/trigger",
    "mechanic/scheduler/daily"
  ],
  "subscriptions_template": "mechanic/user/trigger\nmechanic/scheduler/daily",
  "script": "{% assign collection = shop.collections[options.collection_id__number_required] %}\n{% assign days_to_keep_products = options.number_of_days_to_keep_a_product_in_this_collection__number %}\n{% assign product_count = options.number_of_products_to_keep_in_this_collection__number %}\n\n{% if event.preview %}\n  {% capture collection_json %}\n    {\n      \"admin_graphql_api_id\": \"gid://shopify/Collection/1234567890\",\n      \"products\": [\n        {\n          \"admin_graphql_api_id\": \"gid://shopify/Product/9876543210\"\n        }\n      ]\n    }\n  {% endcapture %}\n\n  {% assign collection = collection_json | parse_json %}\n{% endif %}\n\n{% if collection == blank %}\n  {% error \"Configured collection ID does not exist in this shop.\" %}\n{% endif %}\n\n{% if days_to_keep_products == blank and product_count == blank %}\n  {% error %}\n    \"Please fill in either \\\"Number of days to keep a product in this collection\\\" or \\\"Number of products to keep in this collection\\\" (but not both!).\"\n  {% enderror %}\n{% elsif days_to_keep_products != blank and product_count != blank %}\n  {% error \"Please choose one of the options, but not both! :)\" %}\n{% endif %}\n\n{% assign loop_count = 100 %}\n{% assign first_elements = 250 %}\n{% assign products_query = \"status:active\" %}\n\n{% if days_to_keep_products != blank %}\n  {% if days_to_keep_products < 1 %}\n    {% error %}\n      \"\\\"Number of days to keep a product in this collection\\\" should be > 0\"\n    {% enderror %}\n  {% endif %}\n\n  {% assign now_s = \"now\" | date: \"%s\" | times: 1 %}\n  {% assign days_to_keep_products_s = days_to_keep_products | times: 86400 %}\n  {% assign created_at_threshold_s = now_s | minus: days_to_keep_products_s %}\n  {% assign created_at_threshold = created_at_threshold_s | date: \"%Y-%m-%d\" %}\n  {% assign products_query = products_query\n    | append: \" created_at:>=\"\n    | append: created_at_threshold\n  %}\n{% elsif product_count != blank %}\n  {% if product_count < 1 %}\n    {% error %}\n      \"\\\"Number of products to keep in this collection\\\" should be > 0\"\n    {% enderror %}\n  {% endif %}\n\n  {% assign loop_count = product_count | divided_by: 250 %}\n  {% assign remaining = product_count | modulo: 250 %}\n{% endif %}\n\n{% assign cursor = nil %}\n{% assign qualifying_product_ids = array %}\n\n{% for n in (0..loop_count) %}\n  {% if product_count != blank %}\n    {% if forloop.last %}\n      {% if remaining == 0 %}\n        {% break %}\n      {% endif %}\n\n      {% assign first_elements = remaining %}\n    {% endif %}\n  {% endif %}\n\n  {% capture query %}\n    query {\n      products(\n        first: {{ first_elements }}\n        after: {{ cursor | json }}\n        query: {{ products_query | json }}\n        reverse: true\n        sortKey: CREATED_AT\n      ) {\n        pageInfo {\n          hasNextPage\n        }\n        edges {\n          cursor\n          node {\n            id\n          }\n        }\n      }\n    }\n  {% endcapture %}\n\n  {% assign result = query | shopify %}\n\n  {% if event.preview %}\n    {% capture result_json %}\n      {\n        \"data\": {\n          \"products\": {\n            \"edges\": [\n              {\n                \"node\": {\n                  \"id\": \"gid://shopify/Product/1234567890\"\n                }\n              }\n            ]\n          }\n        }\n      }\n    {% endcapture %}\n\n    {% assign result = result_json | parse_json %}\n  {% endif %}\n\n  {% assign result_product_ids = result.data.products.edges | map: \"node\" | map: \"id\" %}\n  {% assign qualifying_product_ids = qualifying_product_ids | concat: result_product_ids %}\n\n  {% if result.data.products.pageInfo.hasNextPage %}\n    {% assign cursor = result.data.products.edges.last.cursor %}\n  {% else %}\n    {% break %}\n  {% endif %}\n{% endfor %}\n\n{% assign current_product_ids =  collection.products | map: \"admin_graphql_api_id\" %}\n\n{% assign product_ids_to_add = array %}\n{% assign product_ids_to_remove = array %}\n\n{% for qualifying_product_id in qualifying_product_ids %}\n  {% unless current_product_ids contains qualifying_product_id %}\n    {% assign product_ids_to_add = product_ids_to_add | push: qualifying_product_id %}\n  {% endunless %}\n{% endfor %}\n\n{% for current_product_id in current_product_ids %}\n  {% unless qualifying_product_ids contains current_product_id %}\n    {% assign product_ids_to_remove = product_ids_to_remove | push: current_product_id %}\n  {% endunless %}\n{% endfor %}\n\n{% assign mutations = array %}\n\n{% if product_ids_to_add != blank  %}\n  {% assign groups_of_product_ids_to_add = product_ids_to_add | in_groups_of: 250, fill_with: false %}\n\n  {% for group_of_product_ids_to_add in groups_of_product_ids_to_add %}\n    {% capture mutation %}\n      collectionAddProducts{{ forloop.index0 }}: collectionAddProducts(\n        id: {{ collection.admin_graphql_api_id | json }}\n        productIds: {{ group_of_product_ids_to_add | json }}\n      ) {\n        userErrors {\n          field\n          message\n        }\n      }\n    {% endcapture %}\n\n    {% assign mutations = mutations | push: mutation %}\n  {% endfor %}\n{% endif %}\n\n{% if product_ids_to_remove != blank  %}\n  {% assign groups_of_product_ids_to_remove = product_ids_to_remove | in_groups_of: 250, fill_with: false %}\n\n  {% for group_of_product_ids_to_remove in groups_of_product_ids_to_remove %}\n    {% capture mutation %}\n      collectionRemoveProducts{{ forloop.index0 }}: collectionRemoveProducts(\n        id: {{ collection.admin_graphql_api_id | json }}\n        productIds: {{ group_of_product_ids_to_remove | json }}\n      ) {\n        userErrors {\n          field\n          message\n        }\n      }\n    {% endcapture %}\n\n    {% assign mutations = mutations | push: mutation %}\n  {% endfor %}\n{% endif %}\n\n{% if mutations != blank %}\n  {% action \"shopify\" %}\n    mutation {\n      {{ mutations | join: newline }}\n    }\n  {% endaction %}\n{% else %}\n  {% log \"This collection already has the correct products.\" %}\n{% endif %}",
  "docs": "Use this task to maintain a \"New Products\" collection, specifying either a number of products to include or the number of days to keep each product around. Easy! :)\n\nTo use this task, create a manual collection, and add the collection ID to the task options. (Find the ID by opening the collection in the Shopify admin, then looking at the URL in your browser's address bar. If the URL is https://example.myshopify.com/admin/collections/12345, the collection ID is 12345.)\r\n\r\nUse the \"Run task\" button to populate your collection for the first time. After that, this task will run daily, at midnight in your local timezone. During each run, the task will update the collection, adding new products and removing old ones as appropriate.",
  "halt_action_run_sequence_on_error": false,
  "online_store_javascript": null,
  "order_status_javascript": null,
  "perform_action_runs_in_sequence": false,
  "tags": [
    "Collections",
    "Products",
    "Watch"
  ]
}
