{
  "name": "Email customers when tagged",
  "options": {
    "tag_to_watch_for__required": "approved",
    "ignore_tag_case__boolean": true,
    "email_subject__required": "Your account has been approved!",
    "email_body__required_multiline": "Hi {{ customer.first_name | default: \"there\" }},\n\nYour account for {{ shop.name }} has been approved! Thanks for registering, and we'll see you soon.\n\nThanks,\nThe team at {{ shop.name }}",
    "autotag_customers_after_emailing__boolean": null
  },
  "subscriptions": [
    "shopify/customers/create",
    "shopify/customers/update",
    "mechanic/user/trigger"
  ],
  "subscriptions_template": "shopify/customers/create\nshopify/customers/update\nmechanic/user/trigger",
  "script": "{% assign approval_tag = options.tag_to_watch_for__required %}\n\n{% if options.ignore_tag_case__boolean %}\n  {% assign approval_tag = options.tag_to_watch_for__required | downcase %}\n{% endif %}\n\n{% capture email_sent_tag %}{{ approval_tag }}-email-sent{% endcapture %}\n{% assign tag_processed_metafield_key = task.created_at | date: \"%s\" | append: approval_tag | append: \"tag-processed\" | sha256 | slice: 0, 5 | prepend: \"-\" | prepend: approval_tag %}\n{% assign customers_scanned_metafield_key = task.created_at | date: \"%s\" | append: approval_tag | append: \"customers-scanned\" | sha256 | slice: 0, 5 | prepend: \"-\" | prepend: approval_tag %}\n\n{% if event.topic contains \"shopify/customers/\" %}\n  {% assign customer_tags = customer.tags | split: \", \" %}\n\n  {% if options.ignore_tag_case__boolean %}\n    {% assign customer_tags = customer.tags | downcase | split: \", \" %}\n  {% endif %}\n\n  {% assign customer_qualifies = true %}\n  {% unless customer_tags contains approval_tag %}\n    {% assign customer_qualifies = false %}\n    {% log \"The customer does not have the required tag.\" %}\n  {% endunless %}\n\n  {% if options.autotag_customers_after_emailing__boolean %}\n    {% if customer_tags contains email_sent_tag %}\n      {% assign customer_qualifies = false %}\n      {% log \"According to the customer's tags, this customer has already received this email.\" %}\n    {% endif %}\n  {% endif %}\n\n  {% if customer_qualifies %}\n    {% capture query %}\n      query {\n        customer(id: {{ customer.admin_graphql_api_id | json }}) {\n          metafield(namespace: \"mechanic\", key: {{ tag_processed_metafield_key | json }}) {\n            value\n          }\n        }\n      }\n    {% endcapture %}\n    {% assign result = query | shopify %}\n\n    {% if event.preview %}\n      {% capture result_json %}\n        {\n          \"data\": {\n            \"customer\": {\n              \"metafield\": {\n                \"value\": \"1\"\n              }\n            }\n          }\n        }\n      {% endcapture %}\n      {% assign result = result_json | parse_json %}\n    {% endif %}\n\n    {% if result.data.customer.metafield %}\n      {% assign customer_qualifies = false %}\n      {% log \"According to a stored metafield, this customer has already received this email, or was already tagged when this task was initially set up.\" %}\n    {% endif %}\n  {% endif %}\n\n  {% if customer_qualifies %}\n    {% capture query %}\n      query {\n        shop {\n          metafield(namespace: \"mechanic\", key: {{ customers_scanned_metafield_key | json }}) {\n            value\n          }\n        }\n      }\n    {% endcapture %}\n    {% assign result = query | shopify %}\n\n    {% if event.preview %}\n      {% capture result_json %}\n        {\n          \"data\": {\n            \"shop\": {\n              \"metafield\": {\n                \"value\": \"1\"\n              }\n            }\n          }\n        }\n      {% endcapture %}\n      {% assign result = result_json | parse_json %}\n    {% endif %}\n\n    {% if result.data.shop.metafield == nil %}\n      {% error \"Please use this task's 'Run task' button to manually scan your existing customers. Mechanic will take note of everyone who's already tagged, so as to *not* send them an email in the future.\" %}\n    {% endif %}\n  {% endif %}\n\n  {% if event.preview or customer_qualifies %}\n    {% action \"email\" %}\n      {\n        \"to\": {{ customer.email | json }},\n        \"subject\": {{ options.email_subject__required | json }},\n        \"body\": {{ options.email_body__required_multiline | strip | newline_to_br | json }},\n        \"reply_to\": {{ shop.customer_email | json }},\n        \"from_display_name\": {{ shop.name | json }}\n      }\n    {% endaction %}\n\n    {% action \"shopify\" %}\n      mutation {\n        {% if options.autotag_customers_after_emailing__boolean %}\n          tagsAdd(\n            id: {{ customer.admin_graphql_api_id | json }}\n            tags: {{ email_sent_tag | json }}\n          ) {\n            userErrors {\n              field\n              message\n            }\n          }\n        {% endif %}\n\n        customerUpdate(input: {\n          id: {{ customer.admin_graphql_api_id | json }}\n          metafields: [\n            {\n              namespace: \"mechanic\"\n              key: {{ tag_processed_metafield_key | json }}\n              value: \"1\"\n              valueType: INTEGER\n            }\n          ]\n        }) {\n          userErrors {\n            field\n            message\n          }\n        }\n      }\n    {% endaction %}\n  {% endif %}\n{% elsif event.topic == \"mechanic/user/trigger\" %}\n  {% assign customer_ids_to_mark = array %}\n  {% assign cursor = nil %}\n\n  {% for n in (0..100) %}\n    {% capture query %}\n      query {\n        customers(\n          first: 250\n          query: {{ approval_tag | json | prepend: \"tag:\" | json }}\n          after: {{ cursor | json }}\n        ) {\n          pageInfo {\n            hasNextPage\n          }\n          edges {\n            cursor\n            node {\n              id\n              metafield(\n                namespace: \"mechanic\"\n                key: {{ tag_processed_metafield_key | json }}\n              ) {\n                value\n              }\n            }\n          }\n        }\n      }\n    {% endcapture %}\n\n    {% assign result = query | shopify %}\n\n    {% if event.preview %}\n      {% capture result_json %}\n        {\n          \"data\": {\n            \"customers\": {\n              \"pageInfo\": {\n                \"hasNextPage\": false\n              },\n              \"edges\": [\n                {\n                  \"node\": {\n                    \"id\": \"gid://shopify/Customer/1234567890\",\n                    \"metafield\": null\n                  }\n                }\n              ]\n            }\n          }\n        }\n      {% endcapture %}\n\n      {% assign result = result_json | parse_json %}\n    {% endif %}\n\n    {% for edge in result.data.customers.edges %}\n      {% if edge.node.metafield %}\n        {% continue %}\n      {% endif %}\n\n      {% assign customer_ids_to_mark[customer_ids_to_mark.size] = edge.node.id %}\n    {% endfor %}\n\n    {% if result.data.customers.pageInfo.hasNextPage %}\n      {% assign cursor = result.data.customers.edges.last.cursor %}\n    {% else %}\n      {% break %}\n    {% endif %}\n  {% endfor %}\n\n  {% for customer_id in customer_ids_to_mark %}\n    {% action \"shopify\" %}\n      mutation {\n        customerUpdate(input: {\n          id: {{ customer_id | json }}\n          metafields: [\n            {\n              namespace: \"mechanic\"\n              key: {{ tag_processed_metafield_key | json }}\n              value: \"1\"\n              valueType: INTEGER\n            }\n          ]\n        }) {\n          userErrors {\n            field\n            message\n          }\n        }\n      }\n    {% endaction %}\n  {% endfor %}\n\n  {% action \"shopify\" %}\n    [\n      \"create\",\n      \"metafield\",\n      {\n        \"namespace\": \"mechanic\",\n        \"key\": {{ customers_scanned_metafield_key | json }},\n        \"value_type\": \"integer\",\n        \"value\": \"1\"\n      }\n    ]\n  {% endaction %}\n{% endif %}",
  "docs": "Automatically send out an email to your customers when a tag is added to their account. Useful for sending approval emails, welcome emails if the customer was created with a certain tag, or any other emails related to an update to the customer's status. The most common use of this task is to send out emails to customers when their accounts are approved, but you can use this task to email customers any kind of alert you like, triggered by a simple tag. For example, some themes include an email subscription form that creates a customer record, pre-tagged with \"email subscribe\", or something to that effect.\n\n**Important note:** After saving this task for the first time (and every time you change the tag to watch for), click the \"Run task\" button. Mechanic will then scan your customers to find those who _already_ have the desired tag, and will make a note of them, so as to not email them in the future. (We require this to avoid suddenly sending a flood of emails to customers that were tagged before the Mechanic task was created.)\r\n\r\nEnable the \"Autotag customers after emailing\" option to have Mechanic add \"YOURTAGHERE-email-sent\" to the customer's tags, when their email is sent out.",
  "halt_action_run_sequence_on_error": false,
  "online_store_javascript": null,
  "order_status_javascript": null,
  "perform_action_runs_in_sequence": false,
  "tags": [
    "Customers",
    "Email",
    "Tag",
    "Watch"
  ]
}
