{
  "docs": "Use this task to schedule adding and/or removing tags for specific products, with support for scheduling by date, or by date and hour.\n\nUse the \"Product IDs\" option to choose which products this task will tag. [Learn how to find product IDs here.](https://learn.mechanic.dev/techniques/finding-a-resource-id)\n\nFill in the \"Dates and tags to add\" and/or \"Dates and tags to remove\" options with dates (including year, month, and day) on the left, and product tags on the right.\n\nEnable \"Use hour specificity\" to have Mechanic schedule tags by date _and_ hour, instead of only by date. When this option is enabled, fill in tag dates using an hour at the end, e.g. \"2019-01-01 2PM\". A date without an hour will be interpreted as midnight at the beginning of that date - for example, \"2019-01-01\" will be interpreted as \"2019-01-01 12AM\".\n\nWhen \"Test mode\" is enabled, use the \"Run task\" button to see a summary of Mechanic's understanding of your configuration. Mechanic will not perform any tagging or untagging when this mode is enabled.\n\nThis task will run nightly, at midnight in your store's local timezone. If \"Use hour specificity\" is enabled, the task will run hourly instead. You can also run this task manually, using the \"Run task\" button, and the task will perform the operations appropriate for the current day (or hour, if \"Use hour specificity\" is enabled).",
  "halt_action_run_sequence_on_error": false,
  "name": "Schedule product tags by date",
  "online_store_javascript": null,
  "options": {
    "dates_and_tags_to_add__keyval": {
      "2019-08-24": "saturday",
      "2019-08-23": "friday"
    },
    "dates_and_tags_to_remove__keyval": {
      "2019-08-24": "friday",
      "2019-08-23": "thursday"
    },
    "product_ids__array_number_required": [
      "1234567890"
    ],
    "use_hour_specificity__boolean": false,
    "test_mode__boolean": false
  },
  "order_status_javascript": null,
  "perform_action_runs_in_sequence": false,
  "script": "{% assign dates_and_tags_to_add = options.dates_and_tags_to_add__keyval %}\n{% assign dates_and_tags_to_remove = options.dates_and_tags_to_remove__keyval %}\n{% assign product_ids = options.product_ids__array_number_required %}\n{% assign use_hour_specificity = options.use_hour_specificity__boolean %}\n{% assign test_mode = options.test_mode__boolean %}\n\n{% if dates_and_tags_to_add == blank and dates_and_tags_to_remove == blank %}\n  {% error \"Fill in at least one of 'Dates and tags to add' and 'Dates and tags to remove'. :)\" %}\n{% endif %}\n\n{% comment %}\n  -- determine which tags will be added and/or removed on this task run\n{% endcomment %}\n\n{% assign tags_to_add = array %}\n{% assign tags_to_remove = array %}\n\n{% if use_hour_specificity %}\n  {% assign time_format = \"%Y-%m-%d %I%p\" %}\n{% else %}\n  {% assign time_format = \"%Y-%m-%d\" %}\n{% endif %}\n\n{% assign now_time = \"now\" | date: time_format %}\n{% assign full_schedule = hash %}\n\n{% for keyval in dates_and_tags_to_add %}\n  {% assign some_time = keyval[0] | date: time_format %}\n\n  {% if some_time == now_time %}\n    {% assign tags_to_add[tags_to_add.size] = keyval[1] %}\n  {% endif %}\n\n  {% if full_schedule[some_time] == nil %}\n    {% assign full_schedule[some_time] = array %}\n  {% endif %}\n\n  {% assign n = full_schedule[some_time].size %}\n  {% assign full_schedule[some_time][n] = \"add: \" | append: keyval[1] %}\n{% endfor %}\n\n{% for keyval in dates_and_tags_to_remove %}\n  {% assign some_time = keyval[0] | date: time_format %}\n\n  {% if some_time == now_time %}\n    {% assign tags_to_remove[tags_to_remove.size] = keyval[1] %}\n  {% endif %}\n\n  {% if full_schedule[some_time] == nil %}\n    {% assign full_schedule[some_time] = array %}\n  {% endif %}\n\n  {% assign n = full_schedule[some_time].size %}\n  {% assign full_schedule[some_time][n] = \"remove: \" | append: keyval[1] %}\n{% endfor %}\n\n{% comment %}\n  -- get data for the configured product IDs (if more than 250 are configured, this can be changed to a paginated query)\n{% endcomment %}\n\n{% assign search_query_parts = array %}\n\n{% for product_id in product_ids %}\n  {% assign search_query_parts[search_query_parts.size] = product_id | prepend: \"id:\" %}\n{% endfor %}\n\n{% capture query %}\n  query {\n    products(\n      first: 250\n      query: {{ search_query_parts | join: \" OR \" | json }}\n    ) {\n      nodes {\n        id\n        handle\n        tags\n      }\n    }\n  }\n{% endcapture %}\n\n{% assign result = query | shopify %}\n\n{% if event.preview %}\n  {% capture result_json %}\n    {\n      \"data\": {\n        \"products\": {\n          \"nodes\": [\n            {\n              \"id\": \"gid://shopify/Product/1234567890\",\n              \"handle\": \"preview-product\"\n            }\n          ]\n        }\n      }\n    }\n  {% endcapture %}\n\n  {% assign result = result_json | parse_json %}\n\n  {% comment %}\n    -- add preview values for tags since configured dates are unlikely to align when task is previewed\n  {% endcomment %}\n\n  {% assign tags_to_add[0] = \"preview-add\" %}\n  {% assign tags_to_remove[0] = \"preview-remove\" %}\n{% endif %}\n\n{% assign products = result.data.products.nodes %}\n{% assign product_handles = products | map: \"handle\"  %}\n\n{% log\n  now: now_time,\n  schedule: full_schedule,\n  configured_product_ids: product_ids,\n  matched_product_handles: product_handles\n%}\n\n{% if test_mode %}\n  {% break %}\n{% endif %}\n\n{% if tags_to_add == blank and tags_to_remove == blank %}\n  {% log \"No tags to add or remove on this task run based on configured schedule.\" %}\n  {% break %}\n{% endif %}\n\n{% for product in products %}\n  {% action \"shopify\" %}\n    mutation {\n      {% if tags_to_add != blank %}\n        tagsAdd(\n          id: {{ product.id | json }}\n          tags: {{ tags_to_add | json }}\n        ) {\n          userErrors {\n            field\n            message\n          }\n        }\n      {% endif %}\n      {% if tags_to_remove != blank %}\n        tagsRemove(\n          id: {{ product.id | json }}\n          tags: {{ tags_to_remove | json }}\n        ) {\n          userErrors {\n            field\n            message\n          }\n        }\n      {% endif %}\n    }\n  {% endaction %}\n{% endfor %}\n",
  "subscriptions": [
    "mechanic/scheduler/daily",
    "mechanic/user/trigger"
  ],
  "subscriptions_template": "{% unless options.test_mode__boolean %}\n  {% if options.use_hour_specificity__boolean %}\n    mechanic/scheduler/hourly\n  {% else %}\n    mechanic/scheduler/daily\n  {% endif %}\n{% endunless %}\n\nmechanic/user/trigger",
  "tags": [
    "Auto-Tag",
    "Products",
    "Schedule"
  ]
}
