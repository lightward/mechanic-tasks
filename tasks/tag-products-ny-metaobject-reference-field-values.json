{
  "docs": "Use this task to copy metaobject field values to the referencing products' tags. Configure a product metafield that is a *metaobject_reference* type (or *list.metaobject_reference*), and add the metaobject field keys which contain the values to be added as tags, along with paired tag prefixes for each. Then run the task manually, or schedule it to run daily, and it will scan all active products in the shop on each run and tag them as needed.\n\nFirst consider using \"Test mode\" to have the task log out which tagging decisions it would have made, before having it make live changes to your products.\n\n*Tagging example*:\n\nA metaobject for \"Book Authors\" has a **name** field defined that you wish to apply as tags to the book products in your shop. The book products have a metafield definition for **custom.book_authors** that references the metaobject's entries, allowing you to attach one or more authors to a book. Using a configured tag prefix of \"author: \", this task might add product tags like: \"author: Jean Deaux\" and \"author: Anon Y. Mous\".\n\n**Note:** Mechanic cannot access metafields controlled by other apps.",
  "halt_action_run_sequence_on_error": false,
  "name": "Tag products by metaobject reference field values",
  "online_store_javascript": null,
  "options": {
    "product_metafield__required": "custom.book_authors",
    "metaobject_field_keys_and_tag_prefixes__keyval_required": {
      "name": "author: "
    },
    "remove_outdated_prefixed_tags__boolean": true,
    "run_daily__boolean": null,
    "test_mode__boolean": true
  },
  "perform_action_runs_in_sequence": false,
  "preview_event_definitions": [],
  "script": "{% assign product_metafield = options.product_metafield__required %}\n{% assign metaobject_field_keys_and_tag_prefixes = options.metaobject_field_keys_and_tag_prefixes__keyval_required %}\n{% assign remove_outdated_prefixed_tags = options.remove_outdated_prefixed_tags__boolean %}\n{% assign run_daily = options.run_daily__boolean %}\n{% assign test_mode = options.test_mode__boolean %}\n\n{% assign metaobject_field_keys = metaobject_field_keys_and_tag_prefixes | keys %}\n\n{% unless event.preview %}\n  {% log\n    task_config: \"for this task run...\",\n    product_metafield: product_metafield,\n    metaobject_field_keys_and_tag_prefixes: metaobject_field_keys_and_tag_prefixes,\n    remove_outdated_prefixed_tags: remove_outdated_prefixed_tags,\n    run_daily: run_daily,\n    test_mode: test_mode\n  %}\n{% endunless %}\n\n{% comment %}\n  -- create hash of configured tag prefixes for lookups\n{% endcomment %}\n\n{% assign tag_prefixes_hash = hash %}\n\n{% for keyval in metaobject_field_keys_and_tag_prefixes %}\n  {% assign metaobject_field_key = keyval[0] %}\n  {% assign tag_prefix = keyval[1] %}\n\n  {% if tag_prefix != blank %}\n    {% assign tag_prefixes_hash[metaobject_field_key] = tag_prefix | lstrip %}\n  {% endif %}\n{% endfor %}\n\n{% assign tag_prefixes = tag_prefixes_hash | values %}\n\n{% assign products = array %}\n\n{% if event.topic == \"mechanic/user/trigger\" or event.topic contains \"mechanic/scheduler/\" %}\n  {% comment %}\n    -- get all active products in the shop (up to 25K)\n  {% endcomment %}\n\n  {% assign cursor = nil %}\n\n  {% for n in (1..100) %}\n    {% capture query %}\n      query {\n        products(\n          first: 250\n          after: {{ cursor | json }}\n          query: \"status:active\"\n        ) {\n          pageInfo {\n            hasNextPage\n            endCursor\n          }\n          nodes {\n            id\n            tags\n            metafield(key: {{ product_metafield | json }}) {\n              type\n              jsonValue\n            }\n          }\n        }\n      }\n    {% endcapture %}\n\n    {% assign result = query | shopify %}\n\n    {% assign products\n      = result.data.products.nodes\n      | default: array\n      | concat: products\n    %}\n\n    {% if result.data.products.pageInfo.hasNextPage %}\n      {% assign cursor = result.data.products.pageInfo.endCursor %}\n    {% else %}\n      {% break %}\n    {% endif %}\n  {% endfor %}\n\n{% elsif event.topic contains \"shopify/products/\" %}\n  {% capture query %}\n    query {\n      product(id: {{ product.admin_graphql_api_id | json }}) {\n        id\n        tags\n        metafield(key: {{ product_metafield | json }}) {\n          type\n          jsonValue\n        }\n      }\n    }\n  {% endcapture %}\n\n  {% assign result = query | shopify %}\n\n  {% assign products[0] = result.data.product %}\n{% endif %}\n\n{% if event.preview %}\n  {% capture products_json %}\n    [\n      {\n        \"id\": \"gid://shopify/Product/1234567890\",\n        \"metafield\": {\n          \"type\": \"list.metaobject_reference\",\n          \"jsonValue\": [\n            \"gid://shopify/Metaobject/1234567890\"\n          ]\n        }\n      }\n    ]\n  {% endcapture %}\n\n  {% assign products = products_json | parse_json %}\n{% endif %}\n\n{% assign product_ids_and_tags = hash %}\n{% assign seen_metaobjects = hash %}\n\n{% for product in products %}\n  {% assign tags_should_have = array %}\n  {% assign tags_to_add = array %}\n  {% assign tags_to_remove = array %}\n\n  {% if product.metafield == blank %}\n    {% continue %}\n  {% endif %}\n\n  {% unless product.metafield.type contains \"metaobject_reference\" %}\n    {% error\n      message: \"The configured product metafield is neither a 'metaobject_reference' nor a 'list.metaobject_reference' type.\",\n      product: product\n    %}\n    {% break %}\n  {% endunless %}\n\n  {% comment %}\n    -- jsonValue will return a string or array depending on metafield type; iterating over the value will work for both cases\n  {% endcomment %}\n\n  {% assign product_metaobject_ids = product.metafield.jsonValue %}\n\n  {% for product_metaobject_id in product_metaobject_ids %}\n    {% comment %}\n      -- get metaobject data if it hasn't been seen yet on this task run\n    {% endcomment %}\n\n    {% if seen_metaobjects[product_metaobject_id] == blank %}\n      {% capture query %}\n        query {\n          metaobject(id: {{ product_metaobject_id | json }}) {\n            id\n            handle\n            displayName\n            fields {\n              key\n              type\n              jsonValue\n            }\n          }\n        }\n\n      {% endcapture %}\n\n      {% assign result = query | shopify %}\n\n      {% if event.preview %}\n        {% capture result_json %}\n          {\n            \"data\": {\n              \"metaobject\": {\n                \"id\": \"gid://shopify/Metaobject/1234567890\",\n                \"handle\": \"preview-sample\",\n                \"displayName\": \"Preview Sample\",\n                \"fields\": [\n                  {\n                    \"key\": {{ metaobject_field_keys.first | json }},\n                    \"type\": \"list.single_line_text_field\",\n                    \"jsonValue\": [\n                      \"Preview\",\n                      \"Sample\"\n                    ]\n                  }\n                ]\n              }\n            }\n          }\n        {% endcapture %}\n\n        {% assign result = result_json | parse_json %}\n      {% endif %}\n\n      {% assign seen_metaobjects[product_metaobject_id] = result.data.metaobject %}\n    {% endif %}\n\n    {% assign metaobject = seen_metaobjects[product_metaobject_id] %}\n\n    {% comment %}\n      -- get values from metaobject fields\n    {% endcomment %}\n\n    {% for metaobject_field_key in metaobject_field_keys %}\n      {% assign tag_prefix = tag_prefixes_hash[metaobject_field_key] %}\n      {% assign metaobject_field\n        = metaobject.fields\n        | where: \"key\", metaobject_field_key\n        | first\n      %}\n\n      {% if metaobject_field == blank %}\n        {% continue %}\n      {% endif %}\n\n      {% assign metaobject_field_type = metaobject_field.type | remove: \"list.\" %}\n      {% assign metaobject_field_values = metaobject_field.jsonValue %}\n\n      {% for metaobject_field_value in metaobject_field.jsonValue %}\n        {% case metaobject_field_type %}\n          {% when \"boolean\" %}\n            {% capture tag %}{{ tag_prefix }}{{ metaobject_field_value }}{% endcapture %}\n            {% assign tags_should_have[tags_should_have.size] = tag | strip %}\n\n          {% when \"color\" %}\n            {% capture tag %}{{ tag_prefix }}{{ metaobject_field_value }}{% endcapture %}\n            {% assign tags_should_have[tags_should_have.size] = tag | strip %}\n\n          {% when \"date\" %}\n            {% capture tag %}{{ tag_prefix }}{{ metaobject_field_value }}{% endcapture %}\n            {% assign tags_should_have[tags_should_have.size] = tag | strip %}\n\n          {% when \"date_time\" %}\n            {% capture tag %}{{ tag_prefix }}{{ metaobject_field_value }}{% endcapture %}\n            {% assign tags_should_have[tags_should_have.size] = tag | strip %}\n\n          {% when \"dimension\" %}\n            {% capture tag %}{{ tag_prefix }}{{ metaobject_field_value.value }} {{ metaobject_field_value.unit }}{% endcapture %}\n            {% assign tags_should_have[tags_should_have.size] = tag | strip %}\n\n          {% when \"number_decimal\" %}\n            {% capture tag %}{{ tag_prefix }}{{ metaobject_field_value }}{% endcapture %}\n            {% assign tags_should_have[tags_should_have.size] = tag | strip %}\n\n          {% when \"number_integer\" %}\n            {% capture tag %}{{ tag_prefix }}{{ metaobject_field_value }}{% endcapture %}\n            {% assign tags_should_have[tags_should_have.size] = tag | strip %}\n\n          {% when \"rating\" %}\n            {% capture tag %}{{ tag_prefix }}{{ metaobject_field_value.value }} / {{ metaobject_field_value.scale_max }}{% endcapture %}\n            {% assign tags_should_have[tags_should_have.size] = tag | strip %}\n\n          {% when \"single_line_text_field\" %}\n            {% capture tag %}{{ tag_prefix }}{{ metaobject_field_value }}{% endcapture %}\n            {% assign tags_should_have[tags_should_have.size] = tag | strip %}\n\n          {% when \"volume\" %}\n            {% capture tag %}{{ tag_prefix }}{{ metaobject_field_value.value }} {{ metaobject_field_value.unit }}{% endcapture %}\n            {% assign tags_should_have[tags_should_have.size] = tag | strip %}\n\n          {% when \"weight\" %}\n            {% capture tag %}{{ tag_prefix }}{{ metaobject_field_value.value }} {{ metaobject_field_value.unit }}{% endcapture %}\n            {% assign tags_should_have[tags_should_have.size] = tag | strip %}\n\n          {% else %}\n            {% log\n              message: \"Unsupported metaobject field type for this task\",\n              metaobject_field_type: metaobject_field.type,\n              product_id: product.id\n            %}\n        {% endcase %}\n      {% endfor %}\n    {% endfor %}\n  {% endfor %}\n\n  {% if remove_outdated_prefixed_tags %}\n    {% for tag_prefix in tag_prefixes %}\n      {% assign tag_prefix_size = tag_prefix.size %}\n\n      {% for product_tag in product.tags %}\n        {% assign product_tag_slice = product_tag | slice: 0, tag_prefix_size %}\n\n        {% if product_tag.size > tag_prefix_size and product_tag_slice == tag_prefix %}\n          {% unless tags_should_have contains product_tag %}\n            {% assign tags_to_remove = tags_to_remove | push: product_tag %}\n          {% endunless %}\n        {% endif %}\n      {% endfor %}\n    {% endfor %}\n  {% endif %}\n\n  {% for tag_should_have in tags_should_have %}\n    {% unless product.tags contains tag_should_have %}\n      {% assign tags_to_add = tags_to_add | push: tag_should_have %}\n    {% endunless %}\n  {% endfor %}\n\n  {% if tags_to_add != blank or tags_to_remove != blank %}\n    {% assign product_ids_and_tags[product.id] = hash %}\n    {% assign product_ids_and_tags[product.id][\"tags_to_add\"] = tags_to_add %}\n    {% assign product_ids_and_tags[product.id][\"tags_to_remove\"] = tags_to_remove %}\n\n  {% else %}\n    {% log\n      message: \"No tagging operations needed for this product with a metafield reference; skipping.\",\n      product: product\n    %}\n  {% endif %}\n{% endfor %}\n\n{% unless event.preview %}\n  {% log metaobjects_seen_on_this_task_run: seen_metaobjects %}\n{% endunless %}\n\n{% if test_mode %}\n  {% log %}\n    {\n      \"message\": \"Found {{ product_ids_and_tags.size }} tagging operations\",\n      \"product_ids_and_tags\": {{ product_ids_and_tags | json }}\n    }\n  {% endlog %}\n\n  {% break %}\n{% endif %}\n\n{% for keyval in product_ids_and_tags %}\n  {% assign product_id = keyval[0] %}\n  {% assign tags_to_add = keyval[1].tags_to_add %}\n  {% assign tags_to_remove = keyval[1].tags_to_remove %}\n\n  {% if tags_to_add != blank or tags_to_remove != blank %}\n    {% action \"shopify\" %}\n      mutation {\n        {% if tags_to_add != blank %}\n          tagsAdd(\n            id: {{ product_id | json }}\n            tags: {{ tags_to_add | json }}\n          ) {\n            userErrors {\n              field\n              message\n            }\n          }\n        {% endif %}\n        {% if tags_to_remove != blank %}\n          tagsRemove(\n            id: {{ product_id | json }}\n            tags: {{ tags_to_remove | json }}\n          ) {\n            userErrors {\n              field\n              message\n            }\n          }\n        {% endif %}\n      }\n    {% endaction %}\n  {% endif %}\n{% endfor %}\n",
  "subscriptions": [
    "mechanic/user/trigger"
  ],
  "subscriptions_template": "{% if options.run_daily__boolean %}\n  mechanic/scheduler/daily\n{% endif %}\nmechanic/user/trigger",
  "tags": [
    "Metaobjects",
    "Products",
    "Tag"
  ]
}
