{
  "docs": "This task watches for product and inventory item updates, and sends an email to the configured recipients for each variant that's found to have a unit cost that's greater than the variant's for-sale price.\n\nThis task stores the known price and cost for each variant in a metafield, so subsequent updates to a product or inventory item will only fire this notification if those values change.\n\nNote: the invetory item update subscription is purposely delayed by 15 seconds to prevent sending a duplicate email when both a variant's price and cost are updated at the same time.\n\n[YouTube: Watch the development vide for the original task](https://youtu.be/LrFu6bV1f1o)",
  "halt_action_run_sequence_on_error": false,
  "name": "Send an email when a product's price goes below its cost",
  "online_store_javascript": null,
  "options": {
    "recipient_emails__array_required": null
  },
  "order_status_javascript": null,
  "perform_action_runs_in_sequence": false,
  "script": "{% assign recipient_emails = options.recipient_emails__array_required %}\n\n{% if event.topic == \"shopify/products/update\" %}\n  {% capture query %}\n    query {\n      product(id: {{ product.admin_graphql_api_id | json }}) {\n        legacyResourceId\n        title\n        variants(first: 100) {\n          nodes {\n            id\n            legacyResourceId\n            sku\n            title\n            price\n            inventoryItem {\n              unitCost {\n                amount\n              }\n            }\n            known_cost_and_price: metafield(\n              namespace: \"mechanic\"\n              key: \"known_cost_and_price\"\n            ) {\n              id\n              value\n            }\n          }\n        }\n      }\n    }\n  {% endcapture %}\n\n  {% assign result = query | shopify %}\n\n  {% if event.preview %}\n    {% capture result_json %}\n      {\n        \"data\": {\n          \"product\": {\n            \"legacyResourceId\": \"1234567890\",\n            \"title\": \"ACME Widget\",\n            \"variants\": {\n              \"nodes\": [\n                {\n                  \"id\": \"gid://shopify/ProductVariant/1234567890\",\n                  \"legacyResourceId\": \"1234567890\",\n                  \"sku\": \"ABC123\",\n                  \"title\": \"Default Title\",\n                  \"price\": \"5.00\",\n                  \"inventoryItem\": {\n                    \"unitCost\": {\n                      \"amount\": \"10.0\"\n                    }\n                  }\n                }\n              ]\n            }\n          }\n        }\n      }\n    {% endcapture %}\n\n    {% assign result = result_json | parse_json %}\n  {% endif %}\n\n  {% assign product = result.data.product %}\n  {% assign variants = product.variants.nodes %}\n\n{% elsif event.topic == \"shopify/inventory_items/update\" %}\n  {% comment %}\n    -- product update webhooks will not fire when costs are updated, so listen for inventory items updates as well\n  {% endcomment %}\n\n  {% capture query %}\n    query {\n      inventoryItem(id: {{ inventory_item.admin_graphql_api_id | json }}) {\n        variant {\n          id\n          legacyResourceId\n          sku\n          title\n          price\n          inventoryItem {\n            unitCost {\n              amount\n            }\n          }\n          known_cost_and_price: metafield(\n            namespace: \"mechanic\"\n            key: \"known_cost_and_price\"\n          ) {\n            id\n            value\n          }\n          product {\n            legacyResourceId\n            title\n          }\n        }\n      }\n    }\n  {% endcapture %}\n\n  {% assign result = query | shopify %}\n\n  {% if event.preview %}\n    {% capture result_json %}\n      {\n        \"data\": {\n          \"inventoryItem\": {\n            \"variant\": {\n              \"id\": \"gid://shopify/ProductVariant/1234567890\",\n              \"legacyResourceId\": \"1234567890\",\n              \"title\": \"Red\",\n              \"price\": \"5.00\",\n              \"inventoryItem\": {\n                \"unitCost\": {\n                  \"amount\": \"10.0\"\n                }\n              },\n              \"known_cost_and_price\": null,\n              \"product\": {\n                \"legacyResourceId\": \"1234567890\",\n                \"title\": \"ACME Widget\"\n              }\n            }\n          }\n        }\n      }\n    {% endcapture %}\n\n    {% assign result = result_json | parse_json %}\n  {% endif %}\n\n  {% comment %}\n    -- assign the variant paired to the updated inventory item to a variants array for shared processing with product updates\n  {% endcomment %}\n\n  {% assign product = result.data.inventoryItem.variant.product %}\n  {% assign variants = array | push: result.data.inventoryItem.variant %}\n{% endif %}\n\n{% assign metafields_to_set = array %}\n{% assign metafields_to_delete = array %}\n\n{% for variant in variants %}\n  {% assign unit_cost = variant.inventoryItem.unitCost.amount | times: 1 %}\n  {% assign price = variant.price | times: 1 %}\n  {% assign known_cost_and_price = variant.known_cost_and_price.value | default: \"{}\" | parse_json %}\n\n  {% assign current_cost_and_price = hash %}\n  {% assign current_cost_and_price[\"cost\"] = unit_cost %}\n  {% assign current_cost_and_price[\"price\"] = price %}\n\n  {% log\n    variant_id: variant.id,\n    known_cost_and_price: known_cost_and_price,\n    current_cost_and_price: current_cost_and_price\n  %}\n\n  {% if price >= unit_cost and variant.known_cost_and_price != blank %}\n    {% assign metafield_to_delete = hash %}\n    {% assign metafield_to_delete[\"ownerId\"] = variant.id %}\n    {% assign metafield_to_delete[\"namespace\"] = \"mechanic\" %}\n    {% assign metafield_to_delete[\"key\"] = \"known_cost_and_price\" %}\n    {% assign metafields_to_delete = metafields_to_delete | push: metafield_to_delete %}\n\n  {% elsif price < unit_cost and known_cost_and_price != current_cost_and_price %}\n    {% assign variant_name\n      = variant.sku\n      | default: variant.title\n      | remove: \" - Default Title\"\n    %}\n\n    {% capture email_subject %}\n      {{ variant_name }} was priced lower than its cost\n    {% endcapture %}\n\n    {% capture email_body %}\n      Hello,\n\n      {{ variant_name }} was found to have a unit cost of {{ unit_cost | currency }}, while its price is set to {{ price | currency }}.\n\n      <a href=\"{{ shop.admin_url }}products/{{ product.legacyResourceId }}/variants/{{ variant.legacyResourceId }}\">Manage this in Shopify</a>\n\n      Thanks,\n      Mechanic, for {{ shop.name }}\n    {% endcapture %}\n\n    {% action \"email\" %}\n      {\n        \"to\": {{ recipient_emails | json }},\n        \"subject\": {{ email_subject | strip | json }},\n        \"body\": {{ email_body | unindent | strip | newline_to_br | json }},\n        \"reply_to\": {{ shop.customer_email | json }},\n        \"from_display_name\": {{ shop.name | json }}\n      }\n    {% endaction %}\n\n    {% assign metafield_to_set = hash %}\n    {% assign metafield_to_set[\"ownerId\"] = variant.id %}\n    {% assign metafield_to_set[\"namespace\"] = \"mechanic\" %}\n    {% assign metafield_to_set[\"key\"] = \"known_cost_and_price\" %}\n    {% assign metafield_to_set[\"type\"] = \"json\" %}\n    {% assign metafield_to_set[\"value\"] = current_cost_and_price | json %}\n    {% assign metafields_to_set = metafields_to_set | push: metafield_to_set %}\n  {% endif %}\n{% endfor %}\n\n{% if metafields_to_set != blank %}\n  {% assign groups_of_metafields_to_set = metafields_to_set | in_groups_of: 25, fill_with: false %}\n\n  {% for group_of_metafields_to_set in groups_of_metafields_to_set %}\n    {% action \"shopify\" %}\n      mutation {\n        metafieldsSet(\n          metafields: {{ group_of_metafields_to_set | graphql_arguments }}\n        ) {\n          metafields {\n            id\n            namespace\n            key\n            type\n            value\n            owner {\n              ... on ProductVariant {\n                id\n                displayName\n              }\n            }\n          }\n          userErrors {\n            code\n            field\n            message\n          }\n        }\n      }\n    {% endaction %}\n  {% endfor %}\n{% endif %}\n\n{% if metafields_to_delete != blank %}\n  {% assign groups_of_metafields_to_delete = metafields_to_delete | in_groups_of: 250, fill_with: false %}\n\n  {% for group_of_metafields_to_delete in groups_of_metafields_to_delete %}\n    {% action \"shopify\" %}\n      mutation {\n        metafieldsDelete(\n          metafields: {{ group_of_metafields_to_delete | graphql_arguments }}\n        ) {\n          deletedMetafields {\n            ownerId\n            namespace\n            key\n          }\n          userErrors {\n            field\n            message\n          }\n        }\n      }\n    {% endaction %}\n  {% endfor %}\n{% endif %}\n",
  "subscriptions": [
    "shopify/products/update",
    "shopify/inventory_items/update+15.seconds"
  ],
  "subscriptions_template": "shopify/products/update\nshopify/inventory_items/update+15.seconds",
  "tags": [
    "Costs",
    "Email",
    "Metafields",
    "Price",
    "Products",
    "Variants"
  ]
}
