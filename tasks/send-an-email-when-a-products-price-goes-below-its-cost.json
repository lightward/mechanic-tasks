{
  "name": "Send an email when a product's price goes below its cost",
  "options": {
    "recipient_email__email_required": null
  },
  "subscriptions": [
    "shopify/products/update"
  ],
  "subscriptions_template": "shopify/products/update",
  "script": "{% capture query %}\n  query {\n    product(id: {{ product.admin_graphql_api_id | json }}) {\n      metafield(\n        namespace: \"mechanic\"\n        key: \"variant_costs\"\n      ) {\n        id\n        value\n      }\n      variants(first: 250) {\n        edges {\n          node {\n            id\n            legacyResourceId\n            sku\n            title\n            price\n            inventoryItem {\n              unitCost {\n                amount\n              }\n            }\n          }\n        }\n      }\n    }\n  }\n{% endcapture %}\n\n{% assign result = query | shopify %}\n\n{% if event.preview %}\n  {% capture result_json %}\n    {\n      \"data\": {\n        \"product\": {\n          \"metafield\": null,\n          \"variants\": {\n            \"edges\": [\n              {\n                \"node\": {\n                  \"id\": \"gid://shopify/ProductVariant/1234567890\",\n                  \"legacyResourceId\": \"1234567890\",\n                  \"price\": \"5.00\",\n                  \"sku\": \"ABC123\",\n                  \"title\": \"Default Title\",\n                  \"inventoryItem\": {\n                    \"unitCost\": {\n                      \"amount\": \"10.0\"\n                    }\n                  }\n                }\n              }\n            ]\n          }\n        }\n      }\n    }\n  {% endcapture %}\n\n  {% assign result = result_json | parse_json %}\n{% endif %}\n\n{% assign known_costs = result.data.product.metafield.value | default: \"{}\" | parse_json %}\n{% assign current_costs = hash %}\n\n{% for variant_edge in result.data.product.variants.edges %}\n  {% assign unit_cost = variant_edge.node.inventoryItem.unitCost.amount | times: 1 %}\n  {% assign price = variant_edge.node.price | times: 1 %}\n\n  {% assign current_costs[variant_edge.node.id] = unit_cost %}\n\n  {% if price < unit_cost and known_costs[variant_edge.node.id] != unit_cost %}\n    {% assign variant_name = variant_edge.node.sku | default: variant_edge.node.title %}\n    {% if variant_name == \"Default Title\" %}\n      {% assign variant_name = product.title %}\n    {% endif %}\n\n    {% capture email_subject %}\n      {{ variant_name }} was priced lower than its cost\n    {% endcapture %}\n\n    {% capture email_body %}\n      Hello,\n\n      {{ variant_name }} was found to have a unit cost of {{ unit_cost | times: 100 | money_with_currency }}, while its price is set to {{ price | times: 100 | money_with_currency }}.\n\n      <a href=\"https://{{ shop.myshopify_domain }}/admin/products/{{ product.id }}/variants/{{ variant_edge.node.legacyResourceId }}\">Manage this in Shopify</a>\n\n      Thanks,\n      Mechanic, for {{ shop.name }}\n    {% endcapture %}\n\n    {% action \"email\" %}\n      {\n        \"to\": {{ options.recipient_email__email_required | json }},\n        \"subject\": {{ email_subject | strip | json }},\n        \"body\": {{ email_body | unindent | strip | newline_to_br | json }},\n        \"reply_to\": {{ shop.customer_email | json }},\n        \"from_display_name\": {{ shop.name | json }}\n      }\n    {% endaction %}\n  {% endif %}\n{% endfor %}\n\n{% if known_costs != current_costs %}\n  {% action \"shopify\" %}\n    mutation {\n      productUpdate(\n        input: {\n          id: {{ product.admin_graphql_api_id | json }}\n          metafields: [\n            {\n              id: {{ result.data.product.metafield.id | json }}\n              namespace: \"mechanic\"\n              key: \"variant_costs\"\n              valueType: JSON_STRING\n              value: {{ current_costs | json | json }}\n            }\n          ]\n        }\n      ) {\n        userErrors {\n          field\n          message\n        }\n      }\n    }\n  {% endaction %}\n{% endif %}",
  "docs": "This task watches for product updates, and sends an email for each variant that's found to have a unit cost that's greater than the variant's for-sale price.\n\nThis task watches for product updates, and sends an email (to the recipient of your choice) for each variant that's found to have a unit cost that's greater than the variant's for-sale price. It will only send one email per variant, per observed change to variant cost. If a product is updated that the task hasn't had a chance to previously observe, emails will be sent immediately for any variants that have a unit cost greater than their price.\r\n\r\n[YouTube: Watch the development video!](https://youtu.be/LrFu6bV1f1o)",
  "halt_action_run_sequence_on_error": false,
  "online_store_javascript": null,
  "order_status_javascript": null,
  "perform_action_runs_in_sequence": false
}
