{
  "docs": "Use this task to tag orders as they come in, based on which sales channel created them. Run this task manually to backfill tags for all orders.\n\nPlease note: this task works by *sales channel*, and as such does not apply to orders that are created by an *app*. It's sometimes difficult to distinguish whether a third-party is using a sales channel or an app; if you're having trouble with this task, try its companion, [Auto-tag orders by app](https://usemechanic.com/task/auto-tag-orders-by-app).",
  "halt_action_run_sequence_on_error": false,
  "name": "Auto-tag orders by sales channel",
  "online_store_javascript": null,
  "options": {
    "sales_channel_names_and_tags__keyval_required": {
      "Online Store": "online-store",
      "Buy Button": "buy-button"
    }
  },
  "order_status_javascript": null,
  "perform_action_runs_in_sequence": false,
  "script": "{% assign sales_channel_names_and_tags = options.sales_channel_names_and_tags__keyval_required %}\n\n{% assign sales_channel_names = sales_channel_names_and_tags | keys %}\n\n{% comment %}\n  -- get all of the sales channel names (i.e. publications aka app catalogs) in the shop\n{% endcomment %}\n\n{% capture query %}\n  query {\n    publications(\n      first: 250\n      catalogType:APP\n    ) {\n      nodes {\n        id\n        catalog {\n          ... on AppCatalog {\n            apps(first: 1) {\n              nodes {\n                title\n              }\n            }\n          }\n        }\n      }\n    }\n  }\n{% endcapture %}\n\n{% assign result = query | shopify %}\n\n{% if event.preview %}\n  {% capture result_json %}\n    {\n      \"data\": {\n        \"publications\": {\n          \"nodes\": [\n            {\n              \"id\": \"gid://shopify/Publication/1234567890\",\n              \"catalog\": {\n                \"apps\": {\n                  \"nodes\": [\n                    {\n                      \"title\": {{ sales_channel_names.first | json }}\n                    }\n                  ]\n                }\n              }\n            }\n          ]\n        }\n      }\n    }\n  {% endcapture %}\n\n  {% assign result = result_json | parse_json %}\n{% endif %}\n\n{% comment %}\n  -- add the configured publication names into a hash for use in lookups\n{% endcomment %}\n\n{% assign publication_ids = array %}\n{% assign publication_names_by_id = hash %}\n\n{% for publication in result.data.publications.nodes %}\n  {% assign publication_name = publication.catalog.apps.nodes.first.title %}\n\n  {% if sales_channel_names contains publication_name %}\n    {% assign publication_ids = publication_ids | push: publication.id %}\n    {% assign publication_names_by_id[publication.id] = publication_name %}\n  {% endif %}\n{% endfor %}\n\n{% if event.topic contains \"shopify/orders/\" %}\n  {% capture query %}\n    query {\n      order(id: {{ order.admin_graphql_api_id | json }}) {\n        id\n        name\n        tags\n        publication {\n          id\n        }\n      }\n    }\n  {% endcapture %}\n\n  {% assign result = query | shopify %}\n\n  {% assign orders = array | push: result.data.order %}\n\n{% elsif event.topic == \"mechanic/user/trigger\" %}\n  {% capture bulk_operation_query %}\n    query {\n      orders {\n        edges {\n          node {\n            __typename\n            id\n            name\n            tags\n            publication {\n              id\n            }\n          }\n        }\n      }\n    }\n  {% endcapture %}\n\n  {% action \"shopify\" %}\n    mutation {\n      bulkOperationRunQuery(\n        query: {{ bulk_operation_query | json }}\n      ) {\n        bulkOperation {\n          id\n          status\n        }\n        userErrors {\n          field\n          message\n        }\n      }\n    }\n  {% endaction %}\n\n  {% break %}\n\n{% elsif event.topic == \"mechanic/shopify/bulk_operation\" %}\n  {% assign orders = bulkOperation.objects | where: \"__typename\", \"Order\" %}\n{% endif %}\n\n{% if event.preview %}\n  {% capture orders_json %}\n    [\n      {\n        \"id\": \"gid://shopify/Order/1234567890\",\n        \"name\": \"#PREVIEW\",\n        \"publication\": {\n          \"id\": {{ publication_ids.first | json }}\n        }\n      }\n    ]\n  {% endcapture %}\n\n  {% assign orders = orders_json | parse_json %}\n{% endif %}\n\n{% comment %}\n  -- process orders to see which should be tagged\n{% endcomment %}\n\n{% for order in orders %}\n  {% assign order_publication_id = order.publication.id %}\n  {% assign publication_name = publication_names_by_id[order_publication_id] %}\n\n  {% if publication_name == blank %}\n    {% log\n      order_id: order.id,\n      order_name: order.name,\n      message: \"No sales channel present for this order; it was probably created by an app (see https://usemechanic.com/task/auto-tag-orders-by-app).\"\n    %}\n    {% continue %}\n  {% endif %}\n\n  {% assign tag_to_add = sales_channel_names_and_tags[publication_name] %}\n\n  {% if tag_to_add == blank %}\n    {% log\n      order_id: order.id,\n      order_name: order.name,\n      message: \"No tag configured for this channel. Skipping.\",\n      publication_name: publication_name,\n      available_channels: available_channels\n    %}\n\n  {% elsif order.tags contains tag_to_add %}\n    {% log\n      order_id: order.id,\n      order_name: order.name,\n      message: \"The order already has the tag for this channel. Skipping.\",\n      publication_name: publication_name,\n      tag_to_add: tag_to_add\n    %}\n\n  {% else %}\n    {% action \"shopify\" %}\n      mutation {\n        tagsAdd(\n          id: {{ order.id | json }}\n          tags: {{ tag_to_add | json }}\n        ) {\n          userErrors {\n            field\n            message\n          }\n        }\n      }\n    {% endaction %}\n  {% endif %}\n{% endfor %}\n",
  "subscriptions": [
    "shopify/orders/create",
    "mechanic/user/trigger",
    "mechanic/shopify/bulk_operation"
  ],
  "subscriptions_template": "shopify/orders/create\nmechanic/user/trigger\nmechanic/shopify/bulk_operation",
  "tags": [
    "Auto-Tag",
    "Orders",
    "Sales Channel"
  ]
}
