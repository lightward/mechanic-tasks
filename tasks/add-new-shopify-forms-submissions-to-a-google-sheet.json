{
  "docs": "This task will monitor when customers submit a new Shopify Form to your shop, and then create a row in a linked Google Sheet with the specific data from the form that you specify.\n\n---\n\n**Configuration and usage:**\n\nFirst, make sure you have [connected a Google account](https://learn.mechanic.dev/platform/integrations/google-drive-and-google-sheets#authentication) to Mechanic.\n\nThen, configure all fields (detailed below) in this task except for the *Spreadsheet ID*, save the task, and run it manually to generate the Spreadsheet ID. Copy that generated value into the task configuration and save again. The task is now ready to automatically add new form submissions.\n\n- *Google account* - Must match one of the Google accounts you have configured in Mechanic.\n- *Spreadsheet title* - Set the sheet title when it is first created by this task. Has no other effect otherwise (i.e. it will not change an existing sheet title).\n- *Spreadsheet ID* - Enter the Sheet ID generated by this task when run manually.\n- *Form ID* - The task will use the Form ID (e.g. \"123456\") to monitor the related customer tag which Shopify sets on the customer when they have submitted this specific form (e.g. \"shopify-forms-123456\").\n- *Column headers and customer metafields* - Use this field to enter in sheet column headers paired with the customer metafields that the form automatically adds to the customer. You may also enter other customer metafields that aren't created by the configured form.\n> **Example:**  Birthday > custom.birthday\n\n\n---\n\n**Notes:**\n- This task will enter the customer name and email into the first two columns of the sheet. These fields do not need to be configured in the *Column headers and customer metafields* field.\n- If you want to include any other customer data in the row beyond the configured metafields, then you will need to edit the task code to update the customer query and row output fields.\n- This task supports the following Shopify metafield types: boolean, color, date, date_time, dimension, money, number_decimal, number_integer, rating, single_line_text_field, volume, and weight. Additionally, list types are supported for all of the above fields except for boolean.",
  "halt_action_run_sequence_on_error": false,
  "name": "Add new Shopify Forms submissions to a Google Sheet",
  "online_store_javascript": null,
  "options": {
    "google_account__required": null,
    "spreadsheet_title__required": null,
    "spreadsheet_id": null,
    "form_id__number_required": null,
    "column_headers_and_customer_metafields__keyval_required": {
      "Birthday": "custom.birthday"
    }
  },
  "perform_action_runs_in_sequence": false,
  "preview_event_definitions": [],
  "script": "{% assign google_account = options.google_account__required %}\n{% assign spreadsheet_title = options.spreadsheet_title__required %}\n{% assign spreadsheet_id = options.spreadsheet_id %}\n{% assign form_id = options.form_id__number_required %}\n{% assign column_headers_and_customer_metafields = options.column_headers_and_customer_metafields__keyval_required %}\n\n{% assign tag_to_monitor = \"shopify-forms-\" | append: form_id %}\n\n{% comment %}\n  -- column headers start with customer name and email, followed by configured customer metafields\n{% endcomment %}\n\n{% assign column_headers\n  = column_headers_and_customer_metafields\n  | keys\n  | unshift: \"Name\", \"Email\"\n%}\n\n{% if event.topic == \"shopify/customer/tags_added\" %}\n  {% if spreadsheet_id == blank %}\n    {% error \"Please run this task manually first to create a spreadsheet, then add the spreadsheet_id to the task options.\" %}\n  {% endif %}\n\n  {% comment %}\n    -- check tags before querying the customer with GraphQL, so we know if the monitored tag was just added\n    -- note: this webhook uses a tags array, unlike most other webhooks with tags\n  {% endcomment %}\n\n  {% if event.preview %}\n    {% capture customer_json %}\n      {\n        \"customerId\": \"gid://shopify/Customer/1234567890\",\n        \"tags\": {{ array | push: tag_to_monitor | json }},\n        \"occurredAt\": \"2005-05-05T05:00:00.000Z\"\n      }\n    {% endcapture %}\n\n    {% assign customer = customer_json | parse_json %}\n  {% endif %}\n\n  {% unless customer.tags contains tag_to_monitor %}\n    {% log %}\n      \"The form tag being monitored, '{{ tag_to_monitor }}', was not added to this customer in this event.\"\n    {% endlog %}\n\n    {% break %}\n  {% endunless %}\n\n  {% comment %}\n    -- get customer data and metafields\n  {% endcomment %}\n\n  {% capture query %}\n    query {\n      customer(id: {{ customer.customerId | json }}) {\n        id\n        displayName\n        defaultEmailAddress {\n          emailAddress\n        }\n        metafields(first: 250) {\n          nodes {\n            namespace\n            key\n            type\n            jsonValue\n          }\n        }\n      }\n    }\n  {% endcapture %}\n\n  {% assign result = query | shopify %}\n\n  {% if event.preview %}\n    {% capture result_json %}\n      {\n        \"data\": {\n          \"customer\": {\n            \"id\": \"gid://shopify/Customer/1234567890\",\n            \"displayName\": \"Jean Deaux\",\n            \"defaultEmailAddress\": {\n              \"emailAddress\": \"jean.deaux@example.com\"\n            },\n            \"metafields\": {\n              \"nodes\": [\n                {\n                  \"namespace\": {{ customer_metafields.first | split: \".\" | first | json }},\n                  \"key\": {{ customer_metafields.first | split: \".\" | last | json }},\n                  \"jsonValue\": \"Lorem ipsum\"\n                }\n              ]\n            }\n          }\n        }\n      }\n    {% endcapture %}\n\n    {% assign result = result_json | parse_json %}\n  {% endif %}\n\n  {% assign customer = result.data.customer %}\n\n  {% assign row = array | push: customer.displayName, customer.defaultEmailAddress.emailAddress %}\n\n  {% assign metafields = column_headers_and_customer_metafields | values %}\n\n  {% for metafield in metafields %}\n    {% assign metafield_namespace = metafield | split: \".\" | first %}\n    {% assign metafield_key = metafield | split: \".\" | last %}\n    {% assign matched_metafield = customer.metafields.nodes\n      | where: \"namespace\", metafield_namespace\n      | where: \"key\", metafield_key\n      | first\n    %}\n\n    {% assign row_value = nil %}\n\n    {% if matched_metafield != blank %}\n      {% comment %}\n        -- to support lists, convert all metafield values to arrays for processing, and then back to comma-separated strings for the row value\n      {% endcomment %}\n\n      {% if matched_metafield.type contains \"list.\" %}\n        {% assign matched_metafield_values = matched_metafield.jsonValue %}\n        {% assign matched_metafield_type = matched_metafield.type | remove: \"list.\" %}\n\n      {% else %}\n        {% assign matched_metafield_values = array | push: matched_metafield.jsonValue %}\n        {% assign matched_metafield_type = matched_metafield.type %}\n      {% endif %}\n\n      {% case matched_metafield_type %}\n        {% when \"boolean\"\n          or \"color\"\n          or \"date\"\n          or \"date_time\"\n          or \"number_decimal\"\n          or \"number_integer\"\n          or \"single_line_text_field\"\n        %}\n          {% assign row_value = matched_metafield_values | join: \", \" %}\n\n        {% when \"dimension\"\n          or \"volume\"\n          or \"weight\"\n        %}\n          {% assign row_value = array %}\n\n          {% for matched_metafield_value in matched_metafield_values %}\n            {% assign row_value[row_value.size]\n              = matched_metafield_value.value\n              | append: \" \"\n              | append: matched_metafield_value.unit\n            %}\n          {% endfor %}\n\n          {% assign row_value = row_value | join: \", \" %}\n\n        {% when \"money\" %}\n          {% assign row_value = array %}\n\n          {% for matched_metafield_value in matched_metafield_values %}\n            {% assign row_value[row_value.size]\n              = matched_metafield_value.amount\n              | append: \" \"\n              | append: matched_metafield_value.currency_code\n            %}\n          {% endfor %}\n\n          {% assign row_value = row_value | join: \", \" %}\n\n        {% when \"rating\" %}\n          {% assign row_value = array %}\n\n          {% for matched_metafield_value in matched_metafield_values %}\n            {% assign row_value[row_value.size]\n              = matched_metafield_value.value\n              | append: \" / \"\n              | append: matched_metafield_value.scale_max\n            %}\n          {% endfor %}\n\n          {% assign row_value = row_value | join: \", \" %}\n\n        {% else %}\n          {% log\n            message: \"Unsupported metafield type for this task\",\n            matched_metafield: matched_metafield\n          %}\n      {% endcase %}\n    {% endif %}\n\n    {% comment %}\n      -- push nil when a metafield isn't matched or has an unsupported type, so an empty spot is properly added to the row to keep it aligned\n    {% endcomment %}\n\n    {% assign row = row | push: row_value %}\n  {% endfor %}\n\n  {% log\n    message: \"Adding row to the Google Sheet, and expecting these column headers in order.\",\n    column_headers: column_headers,\n    row: row\n  %}\n\n  {% action \"google_sheets\" %}\n    {\n      \"account\": {{ google_account | json }},\n      \"operation\": \"append_rows\",\n      \"spreadsheet_id\": {{ spreadsheet_id | json }},\n      \"rows\": {{ array | push: row | json }}\n    }\n  {% endaction %}\n\n{% elsif event.topic == \"mechanic/user/trigger\" %}\n  {% if spreadsheet_id != blank %}\n    {% log \"Manual running of this task is used only to create a new Google sheet. If a spreadsheet ID is configured then a sheet has already been created for this task to add rows to.\" %}\n    {% break %}\n  {% endif %}\n\n  {% action \"google_sheets\" %}\n    {\n      \"account\": {{ google_account | json }},\n      \"operation\": \"create_spreadsheet\",\n      \"title\": {{ spreadsheet_title | json }},\n      \"rows\": {{ array | push: column_headers | json }}\n    }\n  {% endaction %}\n{% endif %}\n",
  "subscriptions": [
    "shopify/customer/tags_added",
    "mechanic/user/trigger"
  ],
  "subscriptions_template": "shopify/customer/tags_added\nmechanic/user/trigger",
  "tags": [
    "Customers",
    "Google Sheets",
    "Shopify Forms",
    "Watch"
  ]
}
