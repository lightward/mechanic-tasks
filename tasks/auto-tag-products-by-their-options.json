{
  "name": "Auto-tag products by their options",
  "options": {
    "product_options_to_consider__array_required": [
      "Color",
      "Size"
    ],
    "option_name_and_value_separator__required": "-",
    "use_lowercase_tags__boolean": false,
    "ignore_variants_that_are_out_of_stock__boolean": false,
    "run_for_all_products_daily__boolean": false,
    "run_for_individual_products_when_they_are_created_or_updated__boolean": true,
    "run_for_individual_products_when_their_inventory_changes__boolean": false
  },
  "subscriptions": [
    "mechanic/user/trigger",
    "mechanic/shopify/bulk_operation",
    "shopify/products/create",
    "shopify/products/update"
  ],
  "subscriptions_template": "mechanic/user/trigger\n\n{% if options.run_for_all_products_daily__boolean %}\n  mechanic/scheduler/daily\n{% endif %}\n\nmechanic/shopify/bulk_operation\n\n{% if options.run_for_individual_products_when_they_are_created_or_updated__boolean %}\n  shopify/products/create\n  shopify/products/update\n{% endif %}\n\n{% if options.run_for_individual_products_when_their_inventory_changes__boolean %}\n  shopify/inventory_levels/update\n{% endif %}",
  "script": "{% comment %}\n  Preferred option order:\n\n  {{ options.product_options_to_consider__array_required }}\n  {{ options.option_name_and_value_separator__required }}\n  {{ options.use_lowercase_tags__boolean }}\n  {{ options.ignore_variants_that_are_out_of_stock__boolean }}\n  {{ options.run_for_all_products_daily__boolean }}\n  {{ options.run_for_individual_products_when_they_are_created_or_updated__boolean }}\n  {{ options.run_for_individual_products_when_their_inventory_changes__boolean }}\n{% endcomment %}\n\n{% assign jobs = array %}\n\n{% assign separator = options.option_name_and_value_separator__required %}\n\n{% assign lowercase_product_options_to_consider = array %}\n{% for option in options.product_options_to_consider__array_required %}\n  {% assign lowercase_product_options_to_consider[lowercase_product_options_to_consider.size] = option | downcase %}\n{% endfor %}\n\n{% if options.use_lowercase_tags__boolean %}\n  {% assign product_options_to_consider = lowercase_product_options_to_consider %}\n{% else %}\n  {% assign product_options_to_consider = options.product_options_to_consider__array_required %}\n{% endif %}\n\n{% if event.topic contains \"shopify/products/\" or event.topic contains \"shopify/inventory_levels/\" %}\n  {% if event.topic contains \"shopify/inventory_levels/\" %}\n    {% capture query %}\n      query {\n        inventoryLevel(id: {{ inventory_level.admin_graphql_api_id | json }}) {\n          item {\n            variant {\n              product {\n                legacyResourceId\n              }\n            }\n          }\n        }\n      }\n    {% endcapture %}\n\n    {% assign result = query | shopify %}\n\n    {% assign product = shop.products[result.data.inventoryLevel.item.variant.product.legacyResourceId] %}\n  {% endif %}\n\n  {% if event.preview %}\n    {% assign product = hash %}\n    {% assign product[\"admin_graphql_api_id\"] = \"gid://shopify/Product/1234567890\" %}\n    {% assign product[\"tags\"] = \"foo, bar, baz, \" | append: options.product_options_to_consider__array_required.first | append: separator | append: \"Red, \" | append: options.product_options_to_consider__array_required.first | append: separator | append: \"Green\" %}\n  {% endif %}\n\n  {% assign jobs[0] = hash %}\n  {% assign jobs[0][\"product_id\"] = product.admin_graphql_api_id %}\n  {% assign jobs[0][\"existing_tags\"] = product.tags | split: \", \" %}\n  {% assign jobs[0][\"selected_options_found\"] = array %}\n\n  {% assign cursor = nil %}\n\n  {% for n in (0..100) %}\n    {% capture query %}\n      query {\n        product(id: {{ product.admin_graphql_api_id | json }}) {\n          variants(\n            first: 250\n            after: {{ cursor | json }}\n          ) {\n            pageInfo {\n              hasNextPage\n            }\n            edges {\n              cursor\n              node {\n                inventoryQuantity\n                selectedOptions {\n                  name\n                  value\n                }\n              }\n            }\n          }\n        }\n      }\n    {% endcapture %}\n\n    {% assign result = query | shopify %}\n\n    {% if event.preview %}\n      {% capture result_json %}\n        {\n          \"data\": {\n            \"product\": {\n              \"variants\": {\n                \"edges\": [\n                  {\n                    \"node\": {\n                      \"inventoryQuantity\": 0,\n                      \"selectedOptions\": [\n                        {\n                          \"name\": {{ options.product_options_to_consider__array_required.first | json }},\n                          \"value\": \"Green\"\n                        }\n                      ]\n                    }\n                  },\n                  {\n                    \"node\": {\n                      \"inventoryQuantity\": 10,\n                      \"selectedOptions\": [\n                        {\n                          \"name\": \"Title\",\n                          \"value\": \"Default Title\"\n                        },\n                        {\n                          \"name\": {{ options.product_options_to_consider__array_required.first | json }},\n                          \"value\": \"Blue\"\n                        }\n                      ]\n                    }\n                  }\n                ]\n              }\n            }\n          }\n        }\n      {% endcapture %}\n\n      {% assign result = result_json | parse_json %}\n    {% endif %}\n\n    {% for variant_edge in result.data.product.variants.edges %}\n      {% assign variant = variant_edge.node %}\n\n      {% if options.ignore_variants_that_are_out_of_stock__boolean and variant.inventoryQuantity <= 0 %}\n        {% continue %}\n      {% endif %}\n\n      {% assign jobs[0][\"selected_options_found\"] = jobs[0][\"selected_options_found\"] | concat: variant.selectedOptions %}\n    {% endfor %}\n\n    {% if result.data.product.variants.pageInfo.hasNextPage %}\n      {% assign cursor = result.data.product.variants.edges.last.cursor %}\n    {% else %}\n      {% break %}\n    {% endif %}\n  {% endfor %}\n{% elsif event.topic == \"mechanic/user/trigger\" or event.topic contains \"mechanic/scheduler/\" %}\n  {% capture bulk_operation_query %}\n    query {\n      products {\n        edges {\n          node {\n            __typename\n            id\n            tags\n            variants {\n              edges {\n                node {\n                  __typename\n                  inventoryQuantity\n                  selectedOptions {\n                    name\n                    value\n                  }\n                }\n              }\n            }\n          }\n        }\n      }\n    }\n  {% endcapture %}\n\n  {% action \"shopify\" %}\n    mutation {\n      bulkOperationRunQuery(\n        query: {{ bulk_operation_query | json }}\n      ) {\n        bulkOperation {\n          id\n          status\n        }\n        userErrors {\n          field\n          message\n        }\n      }\n    }\n  {% endaction %}\n{% elsif event.topic == \"mechanic/shopify/bulk_operation\" %}\n  {% if event.preview %}\n    {% capture bulkOperation_json %}\n      {\n        \"objects\": [\n          {\n            \"__typename\": \"Product\",\n            \"id\": \"gid://shopify/Product/1234567890\",\n            \"tags\": [\n              \"foo\",\n              \"bar\",\n              \"baz\",\n              {{ options.product_options_to_consider__array_required.first | append: separator | append: \"Red\" | json }},\n              {{ options.product_options_to_consider__array_required.first | append: separator | append: \"Green\" | json }}\n            ]\n          },\n          {\n            \"__typename\": \"ProductVariant\",\n            \"inventoryQuantity\": 0,\n            \"selectedOptions\": [\n              {\n                \"name\": {{ options.product_options_to_consider__array_required.first | json }},\n                \"value\": \"Green\"\n              }\n            ],\n            \"__parentId\": \"gid://shopify/Product/1234567890\"\n          },\n          {\n            \"__typename\": \"ProductVariant\",\n            \"inventoryQuantity\": 10,\n            \"selectedOptions\": [\n              {\n                \"name\": \"Title\",\n                \"value\": \"Default Title\"\n              },\n              {\n                \"name\": {{ options.product_options_to_consider__array_required.first | json }},\n                \"value\": \"Blue\"\n              }\n            ],\n            \"__parentId\": \"gid://shopify/Product/1234567890\"\n          }\n        ]\n      }\n    {% endcapture %}\n\n    {% assign bulkOperation = bulkOperation_json | parse_json %}\n  {% endif %}\n\n  {% assign products = bulkOperation.objects | where: \"__typename\", \"Product\" %}\n  {% assign variants = bulkOperation.objects | where: \"__typename\", \"ProductVariant\" %}\n\n  {% for product in products %}\n    {% assign job = hash %}\n    {% assign job[\"product_id\"] = product.id %}\n    {% assign job[\"existing_tags\"] = product.tags %}\n    {% assign job[\"selected_options_found\"] = array %}\n\n    {% assign product_variants = variants | where: \"__parentId\", product.id %}\n    {% for product_variant in product_variants %}\n      {% if options.ignore_variants_that_are_out_of_stock__boolean and product_variant.inventoryQuantity <= 0 %}\n        {% continue %}\n      {% endif %}\n\n      {% assign job[\"selected_options_found\"] = job[\"selected_options_found\"] | concat: product_variant.selectedOptions %}\n    {% endfor %}\n\n    {% assign jobs[jobs.size] = job %}\n  {% endfor %}\n{% endif %}\n\n{% log jobs: jobs %}\n\n{% for job in jobs %}\n  {% assign tags_to_add = array %}\n  {% assign tags_to_remove = array %}\n\n  {% assign applicable_tags = array %}\n  {% for selected_option in job.selected_options_found %}\n    {% assign lowercase_selected_option_name = selected_option.name | downcase %}\n    {% unless lowercase_product_options_to_consider contains lowercase_selected_option_name %}\n      {% continue %}\n    {% endunless %}\n\n    {% assign tag = selected_option.name | append: separator | append: selected_option.value %}\n\n    {% if options.use_lowercase_tags__boolean %}\n      {% assign tag = tag | downcase %}\n    {% endif %}\n\n    {% assign applicable_tags[applicable_tags.size] = tag %}\n  {% endfor %}\n\n  {% for tag in job.existing_tags %}\n    {% assign lowercase_tag_prefix = tag | split: separator | first | downcase %}\n\n    {% if lowercase_product_options_to_consider contains lowercase_tag_prefix %}\n      {% unless applicable_tags contains tag %}\n        {% assign tags_to_remove[tags_to_remove.size] = tag %}\n      {% endunless %}\n    {% endif %}\n  {% endfor %}\n\n  {% for tag in applicable_tags %}\n    {% unless job.existing_tags contains tag %}\n      {% assign tags_to_add[tags_to_add.size] = tag %}\n    {% endunless %}\n  {% endfor %}\n\n  {% if tags_to_add != blank or tags_to_remove != blank %}\n    {% action \"shopify\" %}\n      mutation {\n        {% if tags_to_remove != blank %}\n          tagsRemove(\n            id: {{ job.product_id | json }}\n            tags: {{ tags_to_remove | json }}\n          ) {\n            userErrors {\n              field\n              message\n            }\n            node {\n              ... on Product {\n                onlineStoreUrl\n                tags\n              }\n            }\n          }\n        {% endif %}\n        {% if tags_to_add != blank %}\n          tagsAdd(\n            id: {{ job.product_id | json }}\n            tags: {{ tags_to_add | json }}\n          ) {\n            userErrors {\n              field\n              message\n            }\n            node {\n              ... on Product {\n                onlineStoreUrl\n                tags\n              }\n            }\n          }\n        {% endif %}\n      }\n    {% endaction %}\n  {% endif %}\n{% endfor %}",
  "docs": "Use this task to add tags to your products, based on their options, for easy filtering. A shirt might be tagged with \"Color-Blue\" and \"Size-XL\", for example. Optionally, choose to ignore options that only appear on out-of-stock variants, or choose to apply all tags in lowercase.\n\nUse this task to add tags to your products, based on their options, for easy filtering. A shirt might be tagged with \"Color-Blue\" and \"Size-XL\", for example.\r\n\r\nOptionally, choose to ignore options that only appear on out-of-stock variants, or choose to apply all tags in lowercase.\r\n\r\nChange the separator to change the way tags are built. Using a dash results in \"Color-Blue\", an underscore results in \"Color_Blue\", and a colon with a space yields \"Color: Blue\".",
  "halt_action_run_sequence_on_error": false,
  "online_store_javascript": null,
  "order_status_javascript": null,
  "perform_action_runs_in_sequence": false
}
