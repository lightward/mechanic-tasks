{
  "name": "Accept a maximum number of orders per hour",
  "options": {
    "maximum_hourly_orders__number_required": 10,
    "only_clear_inventory_for_products_with_this_tag": null,
    "restore_inventory_levels_the_next_hour__boolean": true,
    "restore_inventory_levels_on_demand__boolean": null
  },
  "subscriptions": [
    "shopify/orders/create",
    "mechanic/scheduler/hourly"
  ],
  "subscriptions_template": "shopify/orders/create\n\n{% if options.restore_inventory_levels_the_next_hour__boolean %}\n  mechanic/scheduler/hourly\n{% endif %}\n\n{% if options.restore_inventory_levels_on_demand__boolean %}\n  mechanic/user/trigger\n{% endif %}",
  "script": "{% comment %}\n  Options order:\n\n  {{ options.maximum_hourly_orders__number_required }}\n  {{ options.only_clear_inventory_for_products_with_this_tag }}\n  {{ options.restore_inventory_levels_the_next_hour__boolean }}\n  {{ options.restore_inventory_levels_on_demand__boolean }}\n{% endcomment %}\n\n{% if options.maximum_hourly_orders__number_required <= 0 %}\n  {% error \"'Maximum hourly orders' must be at least 1. :)\" %}\n{% endif %}\n\n{% if event.topic contains \"shopify/orders\" %}\n  {% assign cursor = nil %}\n  {% assign orders_this_hour = 0 %}\n  {% assign previous_hour = \"now\" | date: \"%Y-%m-%dT%H:00:00%z\" %}\n  {% assign previous_hour_s = previous_hour | date: \"%s\" %}\n  {% assign cache_key = \"inventory_to_restore:\" | append: previous_hour_s %}\n  {% assign inventory_levels_to_zero = cache[cache_key] | default: hash %}\n\n  {% for n in (0..100) %}\n    {% capture query %}\n      query {\n        orders(\n          first: 250\n          after: {{ cursor | json }}\n          query: \"created_at:>=\\\"{{ previous_hour }}\\\" -status:cancelled\"\n        ) {\n          pageInfo {\n            hasNextPage\n          }\n          edges {\n            cursor\n          }\n        }\n      }\n    {% endcapture %}\n\n    {% assign result = query | shopify %}\n\n    {% if event.preview %}\n      {% capture result_json %}\n        {\n          \"data\": {\n            \"orders\": {\n              \"pageInfo\": {\n                \"hasNextPage\": false\n              },\n              \"edges\": [\n                {% for n in (1..options.maximum_hourly_orders__number_required) %}\n                  {\n                    \"cursor\": \"eyJsYXN0X2lkIjoyMTQ4MTQ2MjQ5NzczLCJsYXN0X3ZhbHVlIjoiMjAyMC0wNC0wMyAxNzowMjoxMyJ9\"\n                  }{% unless forloop.last %},{% endunless %}\n                {% endfor %}\n              ]\n            }\n          }\n        }\n      {% endcapture %}\n\n      {% assign result = result_json | parse_json %}\n    {% endif %}\n\n    {% assign orders_this_hour = orders_this_hour | plus: result.data.orders.edges.size %}\n\n    {% if result.data.orders.pageInfo.hasNextPage %}\n      {% assign cursor = result.data.orders.edges.last.cursor %}\n    {% else %}\n      {% break %}\n    {% endif %}\n  {% endfor %}\n\n  {% log orders_this_hour_thus_far: orders_this_hour %}\n\n  {% if orders_this_hour == options.maximum_hourly_orders__number_required %}\n    {% assign cursor = nil %}\n\n    {% for n in (0..100) %}\n      {% capture query %}\n        query {\n          inventoryItems(\n            first: 65\n            after: {{ cursor | json }}\n          ) {\n            pageInfo {\n              hasNextPage\n            }\n            edges {\n              cursor\n              node {\n                variant {\n                  product {\n                    tags\n                  }\n                }\n                inventoryLevels(\n                  first: 10\n                ) {\n                  edges {\n                    node {\n                      id\n                      available\n                    }\n                  }\n                }\n              }\n            }\n          }\n        }\n      {% endcapture %}\n\n      {% assign result = query | shopify %}\n\n      {% if event.preview %}\n        {% capture result_json %}\n          {\n            \"data\": {\n              \"inventoryItems\": {\n                \"pageInfo\": {\n                  \"hasNextPage\": false\n                },\n                \"edges\": [\n                  {\n                    \"cursor\": \"eyJsYXN0X2lkIjozNTIxODc4MTAxMjAxMywibGFzdF92YWx1ZSI6IjM1MjE4NzgxMDEyMDEzIn0=\",\n                    \"node\": {\n                      \"variant\": {\n                        \"product\": {\n                          \"tags\": [\n                            {% if options.only_clear_inventory_for_products_with_this_tag != blank %}\n                              {{ options.only_clear_inventory_for_products_with_this_tag | json }}\n                            {% endif %}\n                          ]\n                        }\n                      },\n                      \"inventoryLevels\": {\n                        \"edges\": [\n                          {\n                            \"node\": {\n                              \"id\": \"gid://shopify/InventoryLevel/1234567890?inventory_item_id=1234567890\",\n                              \"available\": 20\n                            }\n                          }\n                        ]\n                      }\n                    }\n                  }\n                ]\n              }\n            }\n          }\n        {% endcapture %}\n\n        {% assign result = result_json | parse_json %}\n      {% endif %}\n\n      {% for inventoryItem_edge in result.data.inventoryItems.edges %}\n        {% if options.only_clear_inventory_for_products_with_this_tag != blank %}\n          {% unless inventoryItem_edge.node.variant.product.tags contains options.only_clear_inventory_for_products_with_this_tag %}\n            {% continue %}\n          {% endunless %}\n        {% endif %}\n\n        {% for inventoryLevel_edge in inventoryItem_edge.node.inventoryLevels.edges %}\n          {% if inventoryLevel_edge.node.available <= 0 %}\n            {% continue %}\n          {% endif %}\n\n          {% assign inventory_levels_to_zero[inventoryLevel_edge.node.id] = inventoryLevel_edge.node.available %}\n        {% endfor %}\n      {% endfor %}\n\n      {% if result.data.inventoryItems.pageInfo.hasNextPage %}\n        {% assign cursor = result.data.inventoryItems.edges.last.cursor %}\n      {% else %}\n        {% break %}\n      {% endif %}\n    {% endfor %}\n\n    {% if inventory_levels_to_zero.size > 0 %}\n      {% for keyval in inventory_levels_to_zero %}\n        {% assign inventory_level_id = keyval[0] %}\n        {% assign inventory_level_available = keyval[1] %}\n\n        {% action \"shopify\" %}\n          mutation {\n            inventoryAdjustQuantity(\n              input: {\n                inventoryLevelId: {{ inventory_level_id | json }}\n                availableDelta: {{ inventory_level_available | times: -1 | json }}\n              }\n            ) {\n              inventoryLevel {\n                available\n              }\n              userErrors {\n                field\n                message\n              }\n            }\n          }\n        {% endaction %}\n      {% endfor %}\n\n      {% if options.restore_inventory_levels_the_next_hour__boolean or options.restore_inventory_levels_on_demand__boolean %}\n        {% action \"cache\", \"set\", cache_key, inventory_levels_to_zero %}\n      {% endif %}\n    {% endif %}\n  {% endif %}\n{% elsif event.topic contains \"mechanic/\" %}\n  {% assign proceed = false %}\n\n  {% if event.topic == \"mechanic/scheduler/hourly\" and options.restore_inventory_levels_the_next_hour__boolean %}\n    {% assign proceed = true %}\n  {% elsif event.topic == \"mechanic/user/trigger\" and options.restore_inventory_levels_on_demand__boolean %}\n    {% assign proceed = true %}\n  {% endif %}\n\n  {% if proceed %}\n    {% assign hour_in_s = 60 | times: 60 %}\n    {% assign previous_hour = \"now\" | date: \"%s\" | minus: hour_in_s | date: \"%Y-%m-%dT%H:00:00%z\" %}\n    {% assign previous_hour_s = previous_hour | date: \"%s\" %}\n    {% assign cache_key = \"inventory_to_restore:\" | append: previous_hour_s %}\n\n    {% assign inventory_levels_to_restore = cache[cache_key] | default: hash %}\n\n    {% if inventory_levels_to_restore == blank %}\n      {% assign previous_hour = \"now\" | date: \"%Y-%m-%dT%H:00:00%z\" %}\n      {% assign previous_hour_s = previous_hour | date: \"%s\" %}\n      {% assign cache_key = \"inventory_to_restore:\" | append: previous_hour_s %}\n      {% assign inventory_levels_to_restore = cache[cache_key] | default: hash %}\n    {% endif %}\n\n    {% if event.preview %}\n      {% assign inventory_levels_to_restore = hash %}\n      {% assign id = \"gid://shopify/InventoryLevel/1234567890?inventory_item_id=1234567890\" %}\n      {% assign inventory_levels_to_restore[id] = 20 %}\n    {% endif %}\n\n    {% log inventory_levels_to_restore_count: inventory_levels_to_restore.size, inventory_levels_to_restore: inventory_levels_to_restore, since: previous_hour %}\n     \n    {% for keyval in inventory_levels_to_restore %}\n      {% assign inventory_level_id = keyval[0] %}\n      {% assign inventory_level_available = keyval[1] %}\n\n      {% action \"shopify\" %}\n        mutation {\n          inventoryAdjustQuantity(\n            input: {\n              inventoryLevelId: {{ inventory_level_id | json }}\n              availableDelta: {{ inventory_level_available | json }}\n            }\n          ) {\n            inventoryLevel {\n              available\n            }\n            userErrors {\n              field\n              message\n            }\n          }\n        }\n      {% endaction %}\n    {% endfor %}\n\n    {% if inventory_levels_to_restore != blank %}\n      {% action \"cache\", \"del\", cache_key %}\n    {% endif %}\n  {% endif %}\n{% endif %}",
  "docs": "This task works by monitoring the number of orders created per hour, and clearing the inventory for all in-stock items when the hourly order limit is reached. Optionally, this task can restore inventory to its original levels at minute zero of the next hour, or on demand.\n\nThis task works by setting your inventory to zero when the hourly order limit is reached. (Specifically, this means setting inventory levels to 0 for all items that have a greater-than-zero inventory level.) There are no popups, or any specific messaging - your inventory will simply be dropped to zero, and if your shop is configured to stop selling out-of-stock products, your customers will be prevented from making additional purchases.\r\n\r\nOptionally, this task can restore inventory to its original levels at midnight the next hour, or on demand. (Restore levels on demand by enabling this option, then using the \"Run task\" button.)\r\n​\r\n**This task _does not_ work well when you have multiple orders per minute, and we do not recommend using it for high-volume stores.** It works by counting the current hour's orders, at the time of each purchase - if the current count exactly equals your maximum, it performs the inventory reset. Because that counting process can take a few seconds, receiving multiple orders per minute can result in missing that very specific window when the current count exactly equals your maximum.",
  "halt_action_run_sequence_on_error": false,
  "online_store_javascript": null,
  "order_status_javascript": null,
  "perform_action_runs_in_sequence": false
}
