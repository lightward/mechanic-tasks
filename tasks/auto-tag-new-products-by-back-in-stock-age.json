{
  "docs": "This task monitors changes to inventory level, records the time at which a product's total inventory passes your configured threshold, and then maintains a set of tags indicating how recently the product returned to \"back in stock\" status.\n\nThis task operates in two phases.\n\nPhase one runs in response to inventory level changes. When a change brings a product's total inventory to at or above your configured threshold, the task will record the \"back in stock\" time for that product.\n\nPhase two occurs when you run this task manually, or when it is run daily or hourly. In this phase, the task scans every product in your shop and updates tags in bulk according to the task's configuration and according to the recorded \"back in stock\" time for each product.\n\nConfigure \"Product tags and maximum age in days\" with product tags on the left, and the maximum product age to consider on the right. For example, a product tag of \"new-5\" with a maximum age in days of \"5\" will be maintained on all products that have a \"back in stock: time within the last 5 days. Once a product ages beyond that threshold, this task will remove that tag during the next \"phase two\" run.\n\n**Note:** when this task first encounters a product on either an inventory level change or a bulk scan, the task will record the current time as the \"first seen time\". No tags will be added to a product until a \"back in stock\" time is recorded that is *newer* than the \"first seen time\". For newly created products, the \"first seen time\" will instead be set to the product creation date, which will ensure that the product's initial \"back in stock\" time will always be newer.",
  "halt_action_run_sequence_on_error": false,
  "name": "Auto-tag new products by \"back in stock\" age",
  "online_store_javascript": null,
  "options": {
    "back_in_stock_inventory_level__number_required": "1",
    "product_tags_and_maximum_age_in_days__keyval_number_required": {
      "new-1": "1",
      "new-5": "5"
    },
    "run_daily__boolean": true,
    "run_hourly__boolean": false
  },
  "order_status_javascript": null,
  "perform_action_runs_in_sequence": false,
  "script": "{% assign back_in_stock_inventory_level = options.back_in_stock_inventory_level__number_required %}\n{% assign product_tags_and_maximum_age_in_days = options.product_tags_and_maximum_age_in_days__keyval_number_required %}\n\n{% assign now_s = \"now\" | date: \"%s\"%}\n\n{% if event.topic == \"mechanic/user/trigger\" or event.topic contains \"mechanic/scheduler\" %}\n  {% comment %}\n    -- run bulk op query for all products in the shop, to get inventory, tags, and metafield values\n  {% endcomment %}\n\n  {% capture bulk_operation_query %}\n    query {\n      products {\n        edges {\n          node {\n            __typename\n            id\n            title\n            tags\n            totalInventory\n            back_in_stock_metafield: metafield(\n              namespace: \"mechanic\"\n              key: \"back_in_stock_s\"\n            ) {\n              value\n            }\n            back_in_stock_first_seen_metafield: metafield(\n              namespace: \"mechanic\"\n              key: \"back_in_stock_first_seen_s\"\n            ) {\n              value\n            }\n          }\n        }\n      }\n    }\n  {% endcapture %}\n\n  {% action \"shopify\" %}\n    mutation {\n      bulkOperationRunQuery(\n        query: {{ bulk_operation_query | json }}\n      ) {\n        bulkOperation {\n          id\n          status\n        }\n        userErrors {\n          field\n          message\n        }\n      }\n    }\n  {% endaction %}\n\n{% elsif event.topic == \"mechanic/shopify/bulk_operation\" %}\n  {% if event.preview %}\n    {% capture bulkOperation_objects_jsonl %}\n      {\"id\":\"gid:\\/\\/shopify\\/Product\\/1234567890\",\"back_in_stock_metafield\":{\"value\": {{ now_s | json }}},\"back_in_stock_first_seen_metafield\":{\"value\": \"1\"}}\n      {\"id\":\"gid:\\/\\/shopify\\/Product\\/2345678901\",\"tags\":[{{ product_tags_and_maximum_age_in_days.first.first | json }}],\"back_in_stock_first_seen_metafield\":{\"value\": \"1\"}}\n      {\"id\":\"gid:\\/\\/shopify\\/Product\\/3456789012\",\"tags\":[{{ product_tags_and_maximum_age_in_days.first.first | json }}]}\n    {% endcapture %}\n\n    {% assign bulkOperation = hash %}\n    {% assign bulkOperation[\"objects\"] = bulkOperation_objects_jsonl | parse_jsonl %}\n  {% endif %}\n\n  {% comment %}\n    -- loop through products and decide which tags should be added/removed based only on metafield values; inventory is not checked here\n  {% endcomment %}\n\n  {% assign first_seen_product_ids = array %}\n\n  {% for product in bulkOperation.objects %}\n    {% comment %}\n      -- check if this product has been seen by this task before; if not, save the ID and move to next product\n    {% endcomment %}\n\n    {% if product.back_in_stock_first_seen_metafield == blank %}\n      {% assign first_seen_product_ids = first_seen_product_ids | push: product.id %}\n      {% continue %}\n    {% endif %}\n\n    {% assign back_in_stock_s = product.back_in_stock_metafield.value | times: 1 %}\n    {% assign back_in_stock_first_seen_s = product.back_in_stock_first_seen_metafield.value | times: 1 %}\n\n    {% assign do_not_add_tags = nil %}\n\n    {% comment %}\n      -- don't add tags unless the back in stock timestamp value is newer than the first seen timestamp\n    {% endcomment %}\n\n    {% unless back_in_stock_s > back_in_stock_first_seen_s %}\n      {% assign do_not_add_tags = true %}\n    {% endunless %}\n\n    {% comment %}\n      -- check the threshold times for each tag\n    {% endcomment %}\n\n    {% assign tags_to_add = array %}\n    {% assign tags_to_remove = array %}\n\n    {% for keyval in product_tags_and_maximum_age_in_days %}\n      {% assign tag = keyval[0] %}\n      {% assign maximum_age_s = keyval[1] | times: 86400 %}\n      {% assign threshold_timestamp_s = now_s | minus: maximum_age_s %}\n\n      {% if back_in_stock_s >= threshold_timestamp_s %}\n        {% unless product.tags contains tag or do_not_add_tags %}\n          {% assign tags_to_add[tags_to_add.size] = tag %}\n        {% endunless %}\n\n      {% else %}\n        {% comment %}\n          -- back in stock metafield doesn't exist or the value doesn't exceed the threshold; remove tag if it is present\n        {% endcomment %}\n\n        {% if product.tags contains tag %}\n          {% assign tags_to_remove[tags_to_remove.size] = tag %}\n        {% endif %}\n      {% endif %}\n    {% endfor %}\n\n    {% if tags_to_add != blank or tags_to_remove != blank %}\n      {% action \"shopify\" %}\n        mutation {\n          {% if tags_to_add != blank %}\n            tagsAdd(\n              id: {{ product.id | json }}\n              tags: {{ tags_to_add | json }}\n            ) {\n              userErrors {\n                field\n                message\n              }\n            }\n          {% endif %}\n\n          {% if tags_to_remove != blank %}\n            tagsRemove(\n              id: {{ product.id | json }}\n              tags: {{ tags_to_remove | json }}\n            ) {\n              userErrors {\n                field\n                message\n              }\n            }\n          {% endif %}\n        }\n      {% endaction %}\n    {% endif %}\n  {% endfor %}\n\n  {% comment %}\n    -- set a metafield timestamp value of \"now\" on any products that were first seen on this run\n  {% endcomment %}\n\n  {% if first_seen_product_ids != blank %}\n    {% log\n      message: \"Products first seen on this task run, which will have a first seen metafield set, but will not have new tags added.\",\n      first_seen_product_ids: first_seen_product_ids\n    %}\n\n    {% assign groups_of_product_ids = first_seen_product_ids | in_groups_of: 25, fill_with: false %}\n\n    {% for group_of_product_ids in groups_of_product_ids %}\n      {% action \"shopify\" %}\n        mutation {\n          metafieldsSet(\n            metafields: [\n              {% for product_id in group_of_product_ids %}\n                {\n                  ownerId: {{ product_id | json }}\n                  namespace: \"mechanic\"\n                  key: \"back_in_stock_first_seen_s\"\n                  type: \"number_integer\"\n                  value: {{ now_s | json }}\n                }\n              {% endfor %}\n            ]\n          ) {\n            userErrors {\n              code\n              field\n              message\n            }\n          }\n        }\n      {% endaction %}\n    {% endfor %}\n  {% endif %}\n\n{% elsif event.topic contains \"shopify/inventory_levels/\" %}\n  {% comment %}\n    -- on inventory level changes, check the total inventory and set metafields as needed; no tagging decisions occur here\n  {% endcomment %}\n\n  {% capture query %}\n    query {\n      inventoryLevel(id: {{ inventory_level.admin_graphql_api_id | json }}) {\n        item {\n          variant {\n            product {\n              id\n              totalInventory\n              back_in_stock_metafield: metafield(\n                namespace: \"mechanic\"\n                key: \"back_in_stock_s\"\n              ) {\n                id\n                value\n              }\n              back_in_stock_first_seen_metafield: metafield(\n                namespace: \"mechanic\"\n                key: \"back_in_stock_first_seen_s\"\n              ) {\n                id\n                value\n              }\n            }\n          }\n        }\n      }\n    }\n  {% endcapture %}\n\n  {% assign result = query | shopify %}\n\n  {% if event.preview %}\n    {% capture result_json %}\n      {\n        \"data\": {\n          \"inventoryLevel\": {\n            \"item\": {\n              \"variant\": {\n                \"product\": {\n                  \"id\": \"gid://shopify/Product/1234567890\",\n                  \"totalInventory\": {{ back_in_stock_inventory_level }}\n                }\n              }\n            }\n          }\n        }\n      }\n    {% endcapture %}\n\n    {% assign result = result_json | parse_json %}\n  {% endif %}\n\n  {% assign product = result.data.inventoryLevel.item.variant.product %}\n\n  {% log product: product, back_in_stock_inventory_level: back_in_stock_inventory_level %}\n\n  {% assign metafield_inputs = array %}\n\n  {% comment %}\n    -- save the first seen time in a metafield if it doesn't already exist\n  {% endcomment %}\n\n  {% if product.back_in_stock_first_seen_metafield == blank %}\n    {% assign metafield_input = hash %}\n    {% assign metafield_input[\"namespace\"] = \"mechanic\" %}\n    {% assign metafield_input[\"key\"] = \"back_in_stock_first_seen_s\" %}\n    {% assign metafield_input[\"type\"] = \"number_integer\" %}\n    {% assign metafield_input[\"value\"] = now_s %}\n    {% assign metafield_inputs = metafield_inputs | push: metafield_input %}\n  {% endif %}\n\n  {% if product.totalInventory >= back_in_stock_inventory_level %}\n    {% comment %}\n      -- product inventory meets the back in stock threshold; save the time in the metafield IF a value does not already exist\n    {% endcomment %}\n\n    {% if product.back_in_stock_metafield == blank %}\n      {% assign metafield_input = hash %}\n      {% assign metafield_input[\"namespace\"] = \"mechanic\" %}\n      {% assign metafield_input[\"key\"] = \"back_in_stock_s\" %}\n      {% assign metafield_input[\"type\"] = \"number_integer\" %}\n      {% assign metafield_input[\"value\"] = now_s %}\n      {% assign metafield_inputs = metafield_inputs | push: metafield_input %}\n    {% endif %}\n\n  {% elsif product.back_in_stock_metafield != blank  %}\n    {% comment %}\n      -- product inventory is less than the back in stock threshold and the back in stock metafield exists; delete it\n    {% endcomment %}\n\n    {% action \"shopify\" %}\n      mutation {\n        metafieldDelete(\n          input: {\n            id: {{ product.back_in_stock_metafield.id | json }}\n          }\n        ) {\n          userErrors {\n            field\n            message\n          }\n        }\n      }\n    {% endaction %}\n  {% endif %}\n\n  {% if metafield_inputs != blank %}\n    {% action \"shopify\" %}\n      mutation {\n        productUpdate(\n          input: {\n            id: {{ product.id | json }}\n            metafields: {{ metafield_inputs | graphql_arguments }}\n          }\n        ) {\n          userErrors {\n            field\n            message\n          }\n        }\n      }\n    {% endaction %}\n  {% endif %}\n\n{% elsif event.topic contains \"shopify/products/create\" %}\n  {% comment %}\n    -- for new products, set the first seen metafield value using the product created date\n  {% endcomment %}\n\n  {% action \"shopify\" %}\n    mutation {\n      metafieldsSet(\n        metafields: [\n          {\n            ownerId: {{ product.admin_graphql_api_id | json }}\n            namespace: \"mechanic\"\n            key: \"back_in_stock_first_seen_s\"\n            type: \"number_integer\"\n            value: {{ product.created_at | date: \"%s\" | json }}\n          }\n        ]\n      ) {\n        userErrors {\n          code\n          field\n          message\n        }\n      }\n    }\n  {% endaction %}\n{% endif %}\n",
  "subscriptions": [
    "shopify/products/create",
    "shopify/inventory_levels/update",
    "mechanic/scheduler/hourly",
    "mechanic/user/trigger",
    "mechanic/shopify/bulk_operation"
  ],
  "subscriptions_template": "shopify/products/create\nshopify/inventory_levels/update\n{% if options.run_hourly__boolean %}\n  mechanic/scheduler/hourly\n{% elsif options.run_daily__boolean %}\n  mechanic/scheduler/daily\n{% endif %}\nmechanic/user/trigger\nmechanic/shopify/bulk_operation",
  "tags": [
    "Auto-Tag",
    "In stock",
    "Products",
    "Watch"
  ]
}
