{
  "name": "Auto-tag new products by \"back in stock\" age",
  "options": {
    "back_in_stock_inventory_level__number_required": "50",
    "product_tags_and_maximum_age_in_days__keyval_number_required": {
      "new-1": "1",
      "new-5": "5",
      "new-9999": "9999"
    },
    "run_daily__boolean": true,
    "run_hourly__boolean": false
  },
  "subscriptions": [
    "shopify/inventory_levels/update",
    "mechanic/user/trigger",
    "mechanic/shopify/bulk_operation",
    "mechanic/scheduler/daily"
  ],
  "subscriptions_template": "shopify/inventory_levels/update\n\nmechanic/user/trigger\nmechanic/shopify/bulk_operation\n\n{% if options.run_daily__boolean %}mechanic/scheduler/daily{% endif %}\n{% if options.run_hourly__boolean %}mechanic/scheduler/hourly{% endif %}",
  "script": "{% if event.topic == \"mechanic/user/trigger\" or event.topic contains \"mechanic/scheduler\" %}\n  {% capture bulk_operation_query %}\n    query {\n      products {\n        edges {\n          node {\n            __typename\n            id\n            tags\n            totalInventory\n            metafield(\n              namespace: \"mechanic\"\n              key: \"back_in_stock_s\"\n            ) {\n              value\n            }\n          }\n        }\n      }\n    }\n  {% endcapture %}\n\n  {% action \"shopify\" %}\n    mutation {\n      bulkOperationRunQuery(\n        query: {{ bulk_operation_query | json }}\n      ) {\n        bulkOperation {\n          id\n          status\n        }\n        userErrors {\n          field\n          message\n        }\n      }\n    }\n  {% endaction %}\n{% elsif event.topic == \"mechanic/shopify/bulk_operation\" %}\n  {% if event.preview %}\n    {% assign bulkOperation = hash %}\n    {% assign bulkOperation[\"objects\"] = array %}\n\n    {% assign bulkOperation[\"objects\"][0] = hash %}\n    {% assign bulkOperation[\"objects\"][0][\"id\"] = \"gid://shopify/Product/1234567890\" %}\n    {% assign bulkOperation[\"objects\"][0][\"totalInventory\"] = options.back_in_stock_inventory_level__number_required | plus: 10 %}\n    {% assign bulkOperation[\"objects\"][0][\"tags\"] = array %}\n    {% assign bulkOperation[\"objects\"][0][\"metafield\"] = hash %}\n    {% assign bulkOperation[\"objects\"][0][\"metafield\"][\"value\"] = \"now\" | date: \"%s\" | minus: 1000 %}\n\n    {% assign bulkOperation[\"objects\"][1] = hash %}\n    {% assign bulkOperation[\"objects\"][1][\"id\"] = \"gid://shopify/Product/2345678901\" %}\n    {% assign bulkOperation[\"objects\"][1][\"totalInventory\"] = options.back_in_stock_inventory_level__number_required | minus: 10 %}\n    {% assign bulkOperation[\"objects\"][1][\"tags\"] = array %}\n    {% assign bulkOperation[\"objects\"][1][\"tags\"][0] = options.product_tags_and_maximum_age_in_days__keyval_number_required.first.first %}\n    {% assign bulkOperation[\"objects\"][1][\"metafield\"] = nil %}\n  {% endif %}\n\n  {% assign now_s = \"now\" | date: \"%s\" | times: 1 %}\n\n  {% for object in bulkOperation.objects %}\n    {% assign product_timestamp_s = object.metafield.value | times: 1 %}\n\n    {% assign tags_to_add = array %}\n    {% assign tags_to_remove = array %}\n\n    {% for keyval in options.product_tags_and_maximum_age_in_days__keyval_number_required %}\n      {% assign tag = keyval[0] %}\n      {% assign maximum_age_d = keyval[1] %}\n      {% assign maximum_age_s = maximum_age_d | times: 24 | times: 60 | times: 60 %}\n\n      {% assign threshold_timestamp_s = now_s | minus: maximum_age_s %}\n\n      {% comment %}\n        0 happens when we didn't have a valid datetime string to begin with. Happens\n        when there's no published_at value.\n      {% endcomment %}\n      {% if product_timestamp_s != 0 and product_timestamp_s > threshold_timestamp_s %}\n        {% unless object.tags contains tag %}\n          {% assign tags_to_add[tags_to_add.size] = tag %}\n        {% endunless %}\n      {% else %}\n        {% if object.tags contains tag %}\n          {% assign tags_to_remove[tags_to_remove.size] = tag %}\n        {% endif %}\n      {% endif %}\n    {% endfor %}\n\n    {% if tags_to_add != empty or tags_to_remove != empty %}\n      {% action \"shopify\" %}\n        mutation {\n          {% if tags_to_add != empty %}\n            tagsAdd(\n              id: {{ object.id | json }}\n              tags: {{ tags_to_add | json }}\n            ) {\n              userErrors {\n                field\n                message\n              }\n            }\n          {% endif %}\n\n          {% if tags_to_remove != empty %}\n            tagsRemove(\n              id: {{ object.id | json }}\n              tags: {{ tags_to_remove | json }}\n            ) {\n              userErrors {\n                field\n                message\n              }\n            }\n          {% endif %}\n        }\n      {% endaction %}\n    {% endif %}\n  {% endfor %}\n{% elsif event.topic contains \"shopify/inventory_levels/\" %}\n  {% capture query %}\n    query {\n      inventoryLevel(id: {{ inventory_level.admin_graphql_api_id | json }}) {\n        item {\n          variant {\n            product {\n              id\n              totalInventory\n              metafield(\n                namespace: \"mechanic\"\n                key: \"back_in_stock_s\"\n              ) {\n                id\n                value\n              }\n            }\n          }\n        }\n      }\n    }\n  {% endcapture %}\n\n  {% assign result = query | shopify %}\n\n  {% if event.preview %}\n    {% capture result_json %}\n      {\n        \"data\": {\n          \"inventoryLevel\": {\n            \"item\": {\n              \"variant\": {\n                \"product\": {\n                  \"id\": \"gid://shopify/Product/1234567890\",\n                  \"totalInventory\": {{ options.back_in_stock_inventory_level__number_required | plus: 1 }},\n                  \"metafield\": null\n                }\n              }\n            }\n          }\n        }\n      }\n    {% endcapture %}\n\n    {% assign result = result_json | parse_json %}\n  {% endif %}\n\n  {% assign productNode = result.data.inventoryLevel.item.variant.product %}\n\n  {% log product: productNode, back_in_stock_inventory_level: options.back_in_stock_inventory_level__number_required %}\n\n  {% if productNode.metafield == nil and productNode.totalInventory >= options.back_in_stock_inventory_level__number_required %}\n    {% action \"shopify\" %}\n      mutation {\n        productUpdate(\n          input: {\n            id: {{ productNode.id | json }}\n            metafields: [\n              {\n                namespace: \"mechanic\"\n                key: \"back_in_stock_s\"\n                valueType: INTEGER\n                value: {{ \"now\" | date: \"%s\" | json }}\n              }\n            ]\n          }\n        ) {\n          userErrors {\n            field\n            message\n          }\n        }\n      }\n    {% endaction %}\n  {% elsif productNode.metafield != nil and productNode.totalInventory < options.back_in_stock_inventory_level__number_required %}\n    {% action \"shopify\" %}\n      mutation {\n        metafieldDelete(\n          input: {\n            id: {{ productNode.metafield.id | json }}\n          }\n        ) {\n          userErrors {\n            field\n            message\n          }\n        }\n      }\n    {% endaction %}\n  {% endif %}\n{% endif %}",
  "docs": "This task monitors changes to inventory level, records the time at which a product's total inventory passes your configured threshold, and then maintains a set of tags indicating how recently the product returned to \"back in stock\" status.\n\nThis task operates in two phases.\r\n\r\nPhase one runs in response to inventory level changes. When a change brings a product's total inventory to at or above your configured threshold, a [metafield](https://help.shopify.com/en/manual/products/metafields) will be added to your product, indicating when it returned to \"back in stock\" status. (Note: when this task encounters a product for the first time, and the product is _already_ considered \"back in stock\", the task will record the current time.)\r\n\r\nPhase two occurs when you run this task manually, or when it is run daily or hourly. In this phase, the task scans every product in your Shopify account, and updates tags in bulk, according to the task's configuration and according to the recorded \"back in stock\" time for each product.\r\n\r\nConfigure \"Product tags and maximum age in days\" with product tags on the left, and the maximum product age to consider on the right. For example, a product tag of \"new-5\" with a maximum age in days of \"5\" will be added to all products that were created/published within the last 5 days. Once a product ages beyond that threshold, this task will remove that tag during the next \"phase two\" run.",
  "halt_action_run_sequence_on_error": false,
  "online_store_javascript": null,
  "order_status_javascript": null,
  "perform_action_runs_in_sequence": false,
  "tags": [
    "Auto-Tag",
    "Metafields",
    "Products",
    "Watch"
  ]
}
