{
  "docs": "This task watches for certain product tags, and removes the product from the selected sales channel(s) when those tags are found.",
  "halt_action_run_sequence_on_error": false,
  "name": "Unpublish products when tagged",
  "online_store_javascript": null,
  "options": {
    "product_tags_to_watch_for__required_array": null,
    "require_product_to_have_all_given_tags_before_unpublishing__boolean": null,
    "sales_channel_names__required_array": [
      "Online Store"
    ]
  },
  "order_status_javascript": null,
  "perform_action_runs_in_sequence": false,
  "script": "{% assign product_tags_to_watch_for = options.product_tags_to_watch_for__required_array %}\n{% assign require_all_tags = options.require_product_to_have_all_given_tags_before_unpublishing__boolean %}\n{% assign sales_channel_names = options.sales_channel_names__required_array %}\n\n{% comment %}\n  -- get all of the sales channel names (i.e. publications aka app catalogs) in the shop\n{% endcomment %}\n\n{% capture query %}\n  query {\n    publications(\n      first: 250\n      catalogType:APP\n    ) {\n      nodes {\n        id\n        catalog {\n          ... on AppCatalog {\n            apps(first: 1) {\n              nodes {\n                title\n              }\n            }\n          }\n        }\n      }\n    }\n  }\n{% endcapture %}\n\n{% assign result = query | shopify %}\n\n{% if event.preview %}\n  {% capture result_json %}\n    {\n      \"data\": {\n        \"publications\": {\n          \"nodes\": [\n            {\n              \"id\": \"gid://shopify/Publication/1234567890\",\n              \"catalog\": {\n                \"apps\": {\n                  \"nodes\": [\n                    {\n                      \"title\": {{ sales_channel_names.first | json }}\n                    }\n                  ]\n                }\n              }\n            }\n          ]\n        }\n      }\n    }\n  {% endcapture %}\n\n  {% assign result = result_json | parse_json %}\n{% endif %}\n\n{% comment %}\n  -- save the publication IDs for all of the configured sales channel names\n{% endcomment %}\n\n{% assign publication_ids = array %}\n{% assign available_sales_channel_names = array %}\n\n{% for publication in result.data.publications.nodes %}\n  {% assign publication_name = publication.catalog.apps.nodes.first.title %}\n\n  {% assign available_sales_channel_names = available_sales_channel_names | push: publication_name %}\n\n  {% if sales_channel_names contains publication_name %}\n    {% assign publication_ids = publication_ids | push: publication.id %}\n  {% endif %}\n{% endfor %}\n\n{% if publication_ids == blank  %}\n  {% error\n    message: \"None of the sales channels configured in this task exist in the shop. Check the list of available channels and verify each configured channel exists.\",\n    configured_sales_channel_names: sales_channel_names,\n    available_sales_channel_names: available_sales_channel_names\n  %}\n\n  {% break %}\n\n{% elsif publication_ids.size != sales_channel_names.size %}\n  {% unless event.preview %}\n    {% comment %}\n      -- using action error here so the task will continue with any other configured and matched sales channels\n    {% endcomment %}\n\n    {% action \"echo\"\n      __error: \"One or more configured sales channel names do not match any of the publication names available in this shop.\",\n      configured_sales_channel_names: sales_channel_names,\n      available_sales_channel_names: available_sales_channel_names\n    %}\n  {% endunless %}\n{% endif %}\n\n{% comment %}\n  -- get product data and current publication status(es)\n{% endcomment %}\n\n{% capture query %}\n  query {\n    product(id: {{ product.admin_graphql_api_id | json }}) {\n      id\n      tags\n      {% for publication_id in publication_ids %}\n        publishedOnPublication{{ forloop.index }}: publishedOnPublication(\n          publicationId: {{ publication_id | json }}\n        )\n      {% endfor %}\n    }\n  }\n{% endcapture %}\n\n{% assign result = query | shopify %}\n\n{% if event.preview %}\n  {% capture result_json %}\n    {\n      \"data\": {\n        \"product\": {\n          \"id\": \"gid://shopify/Product/1234567890\",\n          \"tags\": {{ product_tags_to_watch_for | json }},\n          \"publishedOnPublication1\": true\n        }\n      }\n    }\n  {% endcapture %}\n\n  {% assign result = result_json | parse_json %}\n{% endif %}\n\n{% assign product = result.data.product %}\n\n{% comment %}\n  -- check if product has at least one or all of the configured tags as warranted\n{% endcomment %}\n\n{% assign product_qualifies = false %}\n\n{% if require_all_tags %}\n  {% for tag in product_tags_to_watch_for %}\n    {% if product.tags contains tag %}\n      {% if forloop.last %}\n        {% assign product_qualifies = true %}\n      {% endif %}\n\n    {% else %}\n      {% break %}\n    {% endif %}\n  {% endfor %}\n\n{% else %}\n  {% for tag in product_tags_to_watch_for %}\n    {% if product.tags contains tag %}\n      {% assign product_qualifies = true %}\n      {% break %}\n    {% endif %}\n  {% endfor %}\n{% endif %}\n\n{% unless product_qualifies %}\n  {% break %}\n{% endunless %}\n\n{% assign publication_ids_for_unpublishing = array %}\n\n{% for publication_id in publication_ids %}\n  {% assign key = \"publishedOnPublication\" | append: forloop.index %}\n  {% assign published = product[key] %}\n\n  {% if product[key] %}\n    {% assign publication_ids_for_unpublishing = publication_ids_for_unpublishing | push: publication_id %}\n  {% endif %}\n{% endfor %}\n\n{% if publication_ids_for_unpublishing == blank %}\n  {% log \"Product was already unpublished on all configured sales channel(s). :)\" %}\n  {% break %}\n{% endif %}\n\n{% action \"shopify\" %}\n  mutation {\n    {% for publication_id in publication_ids_for_unpublishing %}\n      publishableUnpublish{{ forloop.index }}: publishableUnpublish(\n        id: {{ product.id | json }}\n        input: {\n          publicationId: {{ publication_id | json }}\n        }\n      ) {\n        userErrors {\n          field\n          message\n        }\n      }\n    {% endfor %}\n  }\n{% endaction %}\n",
  "subscriptions": [
    "shopify/products/update"
  ],
  "subscriptions_template": "shopify/products/update",
  "tags": [
    "Products",
    "Tag",
    "Unpublish"
  ]
}
