{
  "name": "Unpublish products when tagged",
  "options": {
    "product_tags_to_watch_for__required_array": null,
    "require_product_to_have_all_given_tags_before_unpublishing__boolean": null,
    "sales_channel_names__required_array": [
      "Online Store"
    ]
  },
  "subscriptions": [
    "shopify/products/update"
  ],
  "subscriptions_template": "shopify/products/update",
  "script": "{% if event.preview %}\n  {% assign product = hash %}\n  {% assign product[\"admin_graphql_api_id\"] = \"gid://shopify/Product/1234567890\" %}\n  {% assign product[\"tags\"] = options.product_tags_to_watch_for__required_array | join: \", \" %}\n{% endif %}\n\n{% assign product_qualifies = false %}\n{% assign product_tags = product.tags | split: \", \" %}\n\n{% if options.require_product_to_have_all_given_tags_before_unpublishing__boolean %}\n  {% for tag in options.product_tags_to_watch_for__required_array %}\n    {% if product_tags contains tag %}\n      {% if forloop.last %}\n        {% assign product_qualifies = true %}\n      {% endif %}\n    {% else %}\n      {% break %}\n    {% endif %}\n  {% endfor %}\n{% else %}\n  {% for tag in options.product_tags_to_watch_for__required_array %}\n    {% if product_tags contains tag %}\n      {% assign product_qualifies = true %}\n      {% break %}\n    {% endif %}\n  {% endfor %}\n{% endif %}\n\n{% if product_qualifies %}\n  {% capture query %}\n    query {\n      publications(first: 250) {\n        edges {\n          node {\n            id\n            name\n          }\n        }\n      }\n    }\n  {% endcapture %}\n\n  {% assign result = query | shopify %}\n\n  {% if event.preview %}\n    {% capture result_json %}\n      {\n        \"data\": {\n          \"publications\": {\n            \"edges\": [\n              {\n                \"node\": {\n                  \"id\": \"gid://shopify/Publication/1234567890\",\n                  \"name\": {{ options.sales_channel_names__required_array.first | json }}\n                }\n              }\n            ]\n          }\n        }\n      }\n    {% endcapture %}\n\n    {% assign result = result_json | parse_json %}\n  {% endif %}\n\n  {% assign publications = array %}\n\n  {% for publication_edge in result.data.publications.edges %}\n    {% if options.sales_channel_names__required_array contains publication_edge.node.name %}\n      {% assign publications[publications.size] = publication_edge.node %}\n    {% endif %}\n  {% endfor%}\n\n  {% if event.preview != true and publications.size != options.sales_channel_names__required_array.size %}\n    {% log publications_named: options.sales_channel_names__required_array, publications_available: result.data.publications.edges,  publications_matched: publications %}\n    {% error \"Unable to find all named publications. Double-check your task configuration.\" %}\n  {% endif %}\n\n  {% capture query %}\n    query {\n      product(id: {{ product.admin_graphql_api_id | json }}) {\n        tags\n        {% for publication in publications %}\n          publishedOnPublication{{ forloop.index0 }}: publishedOnPublication(publicationId: {{ publication.id | json }})\n        {% endfor %}\n      }\n    }\n  {% endcapture %}\n\n  {% assign result = query | shopify %}\n\n  {% if event.preview %}\n    {% capture result_json %}\n      {\n        \"data\": {\n          \"product\": {\n            \"id\": \"gid://shopify/Product/1234567809\",\n            \"publishedOnPublication0\": true\n          }\n        }\n      }\n    {% endcapture %}\n\n    {% assign result = result_json | parse_json %}\n\n  {% endif %}\n\n  {% assign publication_ids_to_unpublish_from = array %}\n\n  {% for publication in publications %}\n    {% assign key = \"publishedOnPublication\" | append: forloop.index0 %}\n\n    {% if result.data.product[key] == false %}\n      {% continue %}\n    {% endif %}\n\n    {% assign publication_ids_to_unpublish_from[publication_ids_to_unpublish_from.size] = publication.id %}\n  {% endfor %}\n\n  {% if publication_ids_to_unpublish_from != empty %}\n    {% action \"shopify\" %}\n      mutation {\n        {% for publication_id in publication_ids_to_unpublish_from %}\n          publishableUnpublish{{ forloop.index0 }}: publishableUnpublish(\n            id: {{ product.admin_graphql_api_id | json }}\n            input: {\n              publicationId: {{ publication_id | json }}\n            }\n          ) {\n            userErrors {\n              field\n              message\n            }\n          }\n        {% endfor %}\n      }\n    {% endaction %}\n  {% endif %}\n{% endif %}",
  "docs": null,
  "halt_action_run_sequence_on_error": false,
  "online_store_javascript": null,
  "order_status_javascript": null,
  "perform_action_runs_in_sequence": false
}
