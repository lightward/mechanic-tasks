{
  "docs": "This task keeps track of how many lifetime refunded orders a customer has in your shop, and if that count hits a certain threshold, then it will apply a tag to the customer. This is useful for keeping tabs on serial returners.\n\nIt runs when new refunds are created and may also be run manually to apply the metafield and tagging logic to all customers who have returned at least one order in your shop.\n\nConfigure the task with your numeric threshold, the customer tag to apply, and the customer metafield namespace and key for tracking the refunded orders count (e.g. \"custom.refunded_orders_count\"). Run it once manually to have it scan historical orders, and again as needed if you change the threshold number.\n\n**IMPORTANT:** The [Read all orders](https://learn.mechanic.dev/platform/shopify/read-all-orders#configuration) option must be enabled in Mechanic so that this task can query orders beyond the past 60 days.\n\n",
  "halt_action_run_sequence_on_error": false,
  "name": "Tag customers who reach a certain threshold of refunded orders",
  "online_store_javascript": null,
  "options": {
    "refunded_orders_count_threshold_for_tagging__number_required": null,
    "customer_tag_to_apply__required": null,
    "refunded_orders_count_metafield_namespace_dot_key__required": null
  },
  "order_status_javascript": null,
  "perform_action_runs_in_sequence": false,
  "preview_event_definitions": [],
  "script": "{% assign refunded_orders_count_threshold_for_tagging = options.refunded_orders_count_threshold_for_tagging__number_required %}\n{% assign customer_tag_to_apply = options.customer_tag_to_apply__required %}\n{% assign refunded_orders_count_metafield_namespace_dot_key = options.refunded_orders_count_metafield_namespace_dot_key__required %}\n\n{% if event.preview %}\n  {% comment %}\n    -- use minimal threshold for preview data\n  {% endcomment %}\n\n  {% assign refunded_orders_count_threshold_for_tagging = 1 %}\n{% endif %}\n\n{% assign customers = array %}\n\n{% if event.topic == \"shopify/refunds/create\" %}\n  {% comment %}\n    -- get historical refunded orders for this customer\n  {% endcomment %}\n\n  {% capture query %}\n    query {\n      customer(id: {{ refund.order.customer.admin_graphql_api_id | json }}) {\n        id\n        tags\n        metafield(key: {{ refunded_orders_count_metafield_namespace_dot_key | json }}) {\n          value\n        }\n        orders(\n          first: 250\n          query: \"financial_status:refunded,partially_refunded\"\n        ) {\n          nodes {\n            id\n          }\n        }\n      }\n    }\n  {% endcapture %}\n\n  {% assign result = query | shopify %}\n\n  {% if event.preview %}\n    {% capture result_json %}\n      {\n        \"data\": {\n          \"customer\": {\n            \"id\": \"gid://shopify/Customer/1234567890\",\n            \"orders\": {\n              \"nodes\": [\n                {\n                  \"id\": \"gid://shopify/Order/1234567890\"\n                }\n              ]\n            }\n          }\n        }\n      }\n    {% endcapture %}\n\n    {% assign result = result_json | parse_json %}\n  {% endif %}\n\n  {% comment %}\n    -- add the count of refunded orders to a cloned customer object\n  {% endcomment %}\n\n  {% assign customers[0] = result.data.customer | except: \"orders\" | json | parse_json %}\n  {% assign customers[0][\"refunded_orders_count\"] = result.data.customer.orders.nodes.size %}\n\n\n{% elsif event.topic == \"mechanic/user/trigger\" %}\n  {% comment %}\n    -- get all customers who have placed an order and the ID's of their orders that have been refunded or partially refunded (if any)\n  {% endcomment %}\n\n  {% capture bulk_operation_query %}\n    query {\n      customers(\n        query: \"orders_count:>0\"\n      ) {\n        edges {\n          node {\n            __typename\n            id\n            tags\n            metafield(key: {{ refunded_orders_count_metafield_namespace_dot_key | json }}) {\n              value\n            }\n            orders(\n              query: \"financial_status:refunded,partially_refunded\"\n            ) {\n              edges {\n                node {\n                  __typename\n                  id\n                }\n              }\n            }\n          }\n        }\n      }\n    }\n  {% endcapture %}\n\n  {% action \"shopify\" %}\n    mutation {\n      bulkOperationRunQuery(\n        query: {{ bulk_operation_query | json }}\n      ) {\n        bulkOperation {\n          id\n          status\n        }\n        userErrors {\n          field\n          message\n        }\n      }\n    }\n  {% endaction %}\n\n{% elsif event.topic == \"mechanic/shopify/bulk_operation\" %}\n  {% if event.preview %}\n    {% capture bulkOperation_objects_jsonl %}\n      {\"__typename\":\"Customer\",\"id\":\"gid:\\/\\/shopify\\/Customer\\/1234567890\"}\n      {\"__typename\":\"Order\",\"id\":\"gid:\\/\\/shopify\\/Order\\/1234567890\",\"__parentId\":\"gid:\\/\\/shopify\\/Customer\\/1234567890\"}\n    {% endcapture %}\n\n    {% assign bulkOperation = hash %}\n    {% assign bulkOperation[\"objects\"] = bulkOperation_objects_jsonl | parse_jsonl %}\n  {% endif %}\n\n  {% assign bulk_customers = bulkOperation.objects | where: \"__typename\", \"Customer\" %}\n  {% assign bulk_orders = bulkOperation.objects | where: \"__typename\", \"Order\" %}\n\n  {% for bulk_customer in bulk_customers %}\n    {% assign refunded_orders = bulk_orders | where: \"__parentId\", bulk_customer.id %}\n\n    {% if refunded_orders == blank %}\n      {% continue %}\n    {% endif %}\n\n    {% comment %}\n      -- clone the customer object and add the count of refunded orders to it\n    {% endcomment %}\n\n    {% assign customer = bulk_customer | json | parse_json  %}\n    {% assign customer[\"refunded_orders_count\"] = refunded_orders.size %}\n    {% assign customers = customers | push: customer %}\n  {% endfor %}\n{% endif %}\n\n{% comment %}\n  -- loop through all customers with refunds to check threshold and set metafields\n{% endcomment %}\n\n{% assign metafield_inputs = array %}\n\n{% for customer in customers %}\n  {% comment %}\n    -- set metafield as needed (irrespective of configured threshold for tagging)\n  {% endcomment %}\n\n  {% assign metafield_value = customer.metafield.value | times: 1 %}\n\n  {% if metafield_value != customer.refunded_orders_count %}\n    {% assign metafield_input = hash %}\n    {% assign metafield_input[\"ownerId\"] = customer.id %}\n    {% assign metafield_input[\"namespace\"] = refunded_orders_count_metafield_namespace_dot_key | split: \".\" | first %}\n    {% assign metafield_input[\"key\"] = refunded_orders_count_metafield_namespace_dot_key | split: \".\" | last %}\n    {% assign metafield_input[\"type\"] = \"number_integer\" %}\n    {% assign metafield_input[\"value\"] = customer.refunded_orders_count | append: \"\" %}\n\n    {% assign metafield_inputs = metafield_inputs | push: metafield_input %}\n  {% endif %}\n\n  {% comment %}\n    -- add/remove customer tag based on refunded orders threshold\n  {% endcomment %}\n\n  {% if customer.refunded_orders_count >= refunded_orders_count_threshold_for_tagging %}\n    {% unless customer.tags contains customer_tag_to_apply %}\n      {% action \"shopify\" %}\n        mutation {\n          tagsAdd(\n            id: {{ customer.id | json }}\n            tags: {{ customer_tag_to_apply | json }}\n          ) {\n            userErrors {\n              field\n              message\n            }\n          }\n        }\n      {% endaction %}\n    {% endunless %}\n\n  {% else %}\n    {% if customer.tags contains customer_tag_to_apply %}\n      {% action \"shopify\" %}\n        mutation {\n          tagsRemove(\n            id: {{ customer.id | json }}\n            tags: {{ customer_tag_to_apply | json }}\n          ) {\n            userErrors {\n              field\n              message\n            }\n          }\n        }\n      {% endaction %}\n    {% endif %}\n  {% endif %}\n{% endfor %}\n\n{% comment %}\n  -- set metafields for all customers with count of refunded orders\n{% endcomment %}\n\n{% assign groups_of_metafield_inputs = metafield_inputs | in_groups_of: 25, fill_with: false %}\n\n{% for group_of_metafield_inputs in groups_of_metafield_inputs %}\n  {% action \"shopify\" %}\n    mutation {\n      metafieldsSet(\n        metafields: {{ group_of_metafield_inputs | graphql_arguments }}\n      ) {\n        userErrors {\n          code\n          field\n          message\n        }\n      }\n    }\n  {% endaction %}\n{% endfor %}\n",
  "subscriptions": [
    "shopify/refunds/create",
    "mechanic/user/trigger",
    "mechanic/shopify/bulk_operation"
  ],
  "subscriptions_template": "shopify/refunds/create\nmechanic/user/trigger\nmechanic/shopify/bulk_operation",
  "tags": [
    "Customers",
    "Metafields",
    "Refunds",
    "Tag"
  ]
}
