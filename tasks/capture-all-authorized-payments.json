{
  "name": "Capture all authorized payments",
  "options": {
    "include_partially_paid_orders__boolean": false,
    "run_daily__boolean": false,
    "hours_to_wait_after_midnight_when_running_daily__number": null
  },
  "subscriptions": [
    "mechanic/user/trigger"
  ],
  "subscriptions_template": "{% if options.run_daily__boolean %}mechanic/scheduler/daily{% if options.hours_to_wait_after_midnight_when_running_daily__number %}+{{ options.hours_to_wait_after_midnight_when_running_daily__number | times: 60 | round }}.minutes{% endif %}{% endif %}\nmechanic/user/trigger",
  "script": "{% if event.preview %}\n  {% action \"shopify\" %}\n    mutation {\n      orderCapture(\n        input: {\n          id: \"gid://shopify/Order/1234567890\"\n          parentTransactionId: \"gid://shopify/OrderTransaction/1234567890\"\n          amount: \"10.00\"\n          currency: {{ shop.currency }}\n        }\n      ) {\n        userErrors {\n          field\n          message\n        }\n      }\n    }\n  {% endaction %}\n{% else %}\n  {% assign cursor = nil %}\n  {% assign conditions = array %}\n  {% assign conditions[0] = \"financial_status:authorized\" %}\n\n  {% if options.include_partially_paid_orders__boolean %}\n    {% assign conditions[1] = \"financial_status:partially_paid\" %}\n  {% endif %}\n\n  {% for n in (0..100) %}\n    {% capture query %}\n      query {\n        orders(\n          first: 200\n          after: {{ cursor | json }}\n          query: {{ conditions | join: \" OR \" | json }}\n        ) {\n          pageInfo {\n            hasNextPage\n          }\n          edges {\n            cursor\n            node {\n              id\n              transactions(\n                capturable: true\n              ) {\n                id\n                kind\n              }\n              totalCapturableSet {\n                presentmentMoney {\n                  amount\n                  currencyCode\n                }\n              }\n            }\n          }\n        }\n      }\n    {% endcapture %}\n\n    {% assign result = query | shopify %}\n\n    {% for edge in result.data.orders.edges %}\n      {% assign transaction = edge.node.transactions | where: \"kind\", \"AUTHORIZATION\" | first %}\n\n      {% action \"shopify\" %}\n        mutation {\n          orderCapture(\n            input: {\n              id: {{ edge.node.id | json }}\n              parentTransactionId: {{ transaction.id | json }}\n              amount: {{ edge.node.totalCapturableSet.presentmentMoney.amount | json }}\n              currency: {{ edge.node.totalCapturableSet.presentmentMoney.currencyCode }}\n            }\n          ) {\n            userErrors {\n              field\n              message\n            }\n          }\n        }\n      {% endaction %}\n    {% endfor %}\n\n    {% if result.data.pageInfo.hasNextPage %}\n      {% assign cursor = result.data.orders.edges.last.cursor %}\n    {% else %}\n      {% break %}\n    {% endif %}\n  {% endfor %}\n{% endif %}",
  "docs": "This task will scan for all orders that have a financial status of \"authorized\", and will capture payment for them. This task can be scheduled to run daily, and can be run on demand.\n\nThis task will scan for all orders that have a financial status of \"authorized\", and will capture payment for them. Enable \"Run daily\" to perform this every day at midnight, or use the \"Run task\" button to perform this scan on demand.",
  "halt_action_run_sequence_on_error": false,
  "online_store_javascript": null,
  "order_status_javascript": null,
  "perform_action_runs_in_sequence": false,
  "tags": [
    "Payment"
  ]
}
