{
  "name": "Auto-sort collections by product properties",
  "options": {
    "product_property_lookups__array_required": [
      "published_at"
    ],
    "reverse_sort__boolean": false,
    "only_sort_these_collections__array": null,
    "run_hourly__boolean": false,
    "run_daily__boolean": false
  },
  "subscriptions": [
    "mechanic/user/trigger"
  ],
  "subscriptions_template": "mechanic/user/trigger\n{% if options.run_hourly__boolean %}mechanic/scheduler/hourly{% endif %}\n{% if options.run_daily__boolean %}mechanic/scheduler/daily{% endif %}",
  "script": "{% if event.preview %}\n  {% comment %}\n    Populate some preview/test data. Handling our preview this way allows\n    us to use the preview state *as a test stage* - which is perfect! The\n    entire task is exercised, every time a preview occurs.\n  {% endcomment %}\n\n  {% assign product_ids = array %}\n  {% assign product_ids[0] = 1234567890 %}\n  {% assign product_ids[1] = 3456789012 %}\n  {% assign product_ids[2] = 2345678901 %}\n  {% assign products = array %}\n\n  {% for product_id in product_ids %}\n    {% assign product = hash %}\n\n    {% for lookup in options.product_property_lookups__array_required reversed %}\n      {% if forloop.first %}\n        {% assign product[lookup] = product_id %}\n      {% else %}\n        {% assign temp = product %}\n        {% assign product = hash %}\n        {% assign product[lookup] = temp %}\n      {% endif %}\n    {% endfor %}\n\n    {% assign product[\"id\"] = product_id %}\n    {% assign product[\"admin_graphql_api_id\"] = \"gid://shopify/Product/\" | append: product_id %}\n    {% assign products[products.size] = product %}\n  {% endfor %}\n\n  {% capture shop_json %}\n    {\n      \"collections\": [\n        {\n          \"title\": {{ options.only_sort_these_collections__array[0] | default: \"Some collection\" | json }},\n          \"admin_graphql_api_id\": \"gid://shopify/Collection/1234567890\",\n          \"sort_order\": \"manual\",\n          \"products\": {{ products | json }}\n        }\n      ]\n    }\n  {% endcapture %}\n\n  {% assign shop = shop_json | parse_json %}\n{% endif %}\n\n{% if options.only_sort_these_collections__array != blank %}\n  {% assign collections = array %}\n\n  {% for some_collection in shop.collections %}\n    {% assign some_collection_id_string = \"\" | append: some_collection.id %}\n    {% if options.only_sort_these_collections__array contains some_collection_id_string or options.only_sort_these_collections__array contains some_collection.title %}\n      {% assign collections[collections.size] = some_collection %}\n    {% endif %}\n  {% endfor %}\n{% else %}\n  {% assign collections = shop.collections %}\n{% endif %}\n\n{% for collection in collections %}\n  {% if collection.sort_order != \"manual\" %}\n    {% log %}\n      {{ collection.title | json | append: \" is not configured for manual sorting. Set this collection to be manually sorted, and try again.\" | json }}\n    {% endlog %}\n    {% continue %}\n  {% endif %}\n\n  {% assign moves = array %}\n  {% assign product_ids_and_positions = hash %}\n  {% assign product_ids_and_values = array %}\n\n  {% for product in collection.products %}\n    {% assign product_ids_and_positions[product.admin_graphql_api_id] = forloop.index0 %}\n\n    {% assign product_id_and_value = hash %}\n    {% assign product_id_and_value[\"id\"] = product.admin_graphql_api_id %}\n\n    {% assign value = product %}\n    {% for lookup in options.product_property_lookups__array_required %}\n      {% assign value = value[lookup] %}\n    {% endfor %}\n\n    {% comment %}\n      Make sure this is always a serializable/sortable object\n    {% endcomment %}\n    {% assign product_id_and_value[\"value\"] = value | json | parse_json %}\n\n    {% assign product_ids_and_values[product_ids_and_values.size] = product_id_and_value %}\n  {% endfor %}\n\n  {% assign sorted_product_values = product_ids_and_values | sort: \"value\" %}\n  {% assign sorted_product_ids = product_ids_and_values | sort: \"value\" | map: \"id\" %}\n  {% if options.reverse_sort__boolean %}\n    {% assign sorted_product_ids = sorted_product_ids | reverse %}\n  {% endif %}\n\n  {% for sorted_product_id in sorted_product_ids %}\n    {% if forloop.index0 != product_ids_and_positions[sorted_product_id] %}\n      {% assign move = hash %}\n      {% assign move[\"id\"] = sorted_product_id %}\n      {% assign move[\"newPosition\"] = \"\" | append: forloop.index0 %}\n      {% assign moves[moves.size] = move %}\n    {% endif %}\n  {% endfor %}\n\n  {% if moves == empty %}\n    {% log %}\n      {{ \"No moves necessary for \" | append: collection.title | append: \" - everything is already in its appropriate sort order.\" | json }}\n    {% endlog %}\n  {% else %}\n    {% assign moves_in_groups = moves | in_groups_of: 250, fill_with: false %}\n    {% for move_group in moves_in_groups %}\n      {% action \"shopify\" %}\n        mutation {\n          collectionReorderProducts(\n            id: {{ collection.admin_graphql_api_id | json }}\n            moves: {{ move_group | graphql_arguments }}\n          ) {\n            userErrors {\n              field\n              message\n            }\n          }\n        }\n      {% endaction %}\n    {% endfor %}\n  {% endif %}\n{% endfor %}",
  "docs": "This task re-sorts your collections by any product property that you choose. A property lookup can be something simple, like \"published_at\", or more complicated: use multiple property lookups, like \"metafields\", \"store\", and \"priority\", to sort collections by product metafield values.\n\nThis task re-sorts your collections by any product property that you choose. Use the \"Product property lookups\" option to control what attribute the task \"looks up\". For example, using \"published_at\" will result in sorting by the date and time the product was published. Add more than one lookup to dive more deeply into product data: using the lookups \"metafields\", \"store\", and \"priority\" will result in a collection sorted by the `store.priority` metafield on each product.\r\n\r\nRefer to [Shopify's API documentation](https://help.shopify.com/en/api/reference/products/product) to find the product property you're looking for\r\n\r\nRun this task manually to re-sort your collections on demand. Optionally, configure this task to run hourly or nightly as well.\r\n\r\nConfigure this task to only look at certain collections using each collection's title, or its ID. [Learn how to find the collection IDs.](https://help.usemechanic.com/en/articles/2946120-how-do-i-find-an-id-for-a-product-collection-order-or-something-else)\r\n\r\nThe collections used with this task must be configured for manual sorting. [Learn how to change the sort order of your collections.](https://help.shopify.com/en/manual/products/collections/collection-layout#change-the-sort-order-for-the-products-in-a-collection)",
  "halt_action_run_sequence_on_error": false,
  "online_store_javascript": null,
  "order_status_javascript": null,
  "perform_action_runs_in_sequence": false,
  "tags": [
    "Collections",
    "Products",
    "Sort"
  ]
}
