{
  "docs": "Use this task to automatically tag orders based on what collection(s) the customer has ordered from. Useful for broadly classifying orders according to their contents.\n\nFill in the \"Collections and tags\" option with the collection on the left, and tags on the right. When specifying the collection, you can use the collection title (e.g. \"Summer Swimware\"), handle (\"e.g. summer-swimware\"), or ID (e.g. 27359487103). These are all case-sensitive, so double-check your work!\n\nRun this task manually to scan and tag every order in your store. (To process orders older than 60 days, [enable \"read all orders\"](https://learn.mechanic.dev/platform/shopify/read-all-orders).)",
  "halt_action_run_sequence_on_error": false,
  "name": "Auto-tag orders by product collections",
  "online_store_javascript": null,
  "options": {
    "collections_and_tags__keyval_required": {
      "Summer Swimware": "summer, swimware",
      "Cold Weather Gear": "winter"
    }
  },
  "order_status_javascript": null,
  "perform_action_runs_in_sequence": false,
  "script": "{% assign collections_and_tags = options.collections_and_tags__keyval_required %}\n\n{% if event.topic == \"shopify/orders/create\" %}\n  {% assign existing_tags = order.tags | split: \", \" %}\n\n  {% comment %}\n    -- get product IDs from order line items to build the collections search query\n  {% endcomment %}\n\n  {% assign order_product_ids = order.line_items | map: \"product_id\" | compact | uniq %}\n\n  {% if order_product_ids == blank %}\n    {% unless event.preview %}\n      {% log \"This order does not contain any products from the shop catalog.\" %}\n      {% break %}\n    {% endunless %}\n  {% endif %}\n\n  {% assign search_query_parts = array %}\n\n  {% for order_product_id in order_product_ids %}\n    {% assign search_query_parts[search_query_parts.size] = order_product_id | prepend: \"product_id:\" %}\n  {% endfor %}\n\n  {% assign search_query = search_query_parts | join: \" OR \" %}\n\n  {% unless event.preview %}\n    {% log search_query: search_query %}\n  {% endunless %}\n\n  {% comment %}\n    -- get collections that contain any of this order's products\n  {% endcomment %}\n\n  {% assign cursor = nil %}\n  {% assign order_collections = array %}\n\n  {% for n in (1..10) %}\n    {% capture query %}\n      query {\n        collections(\n          first: 250\n          after: {{ cursor | json }}\n          query: {{ search_query | json }}\n        ) {\n          pageInfo {\n            hasNextPage\n            endCursor\n          }\n          nodes {\n            id\n            legacyResourceId\n            title\n            handle\n          }\n        }\n      }\n    {% endcapture %}\n\n    {% assign result = query | shopify %}\n\n    {% if event.preview %}\n      {% capture result_json %}\n        {\n          \"data\": {\n            \"collections\": {\n              \"nodes\": [\n                {\n                  \"id\": \"gid://shopify/Collection/1234567890\",\n                  \"legacyResourceId\": \"1234567890\",\n                  \"title\": \"Best Widgets\",\n                  \"handle\": \"best-widgets\"\n                }\n              ]\n            }\n          }\n        }\n      {% endcapture %}\n\n      {% assign result = result_json | parse_json %}\n    {% endif %}\n\n    {% assign order_collections = order_collections | concat: result.data.collections.nodes %}\n\n    {% if result.data.collections.pageInfo.hasNextPage %}\n      {% assign cursor = result.data.collections.pageInfo.endCursor %}\n    {% else %}\n      {% break %}\n    {% endif %}\n  {% endfor %}\n\n  {% if order_collections == blank %}\n    {% unless event.preview %}\n      {% log \"This order does not contain any products that belong to any collections.\" %}\n      {% break %}\n    {% endunless %}\n  {% endif %}\n\n  {% comment %}\n    -- save the collection IDs, titles, and handles for comparison against the configured collections\n  {% endcomment %}\n\n  {% assign order_collection_ids = order_collections | map: \"legacyResourceId\" %}\n  {% assign order_collection_titles = order_collections | map: \"title\" %}\n  {% assign order_collection_handles = order_collections | map: \"handle\" %}\n\n  {% log\n    order_collection_ids: order_collection_ids,\n    order_collection_titles: order_collection_titles,\n    order_collection_handles: order_collection_handles\n  %}\n\n  {% comment %}\n    -- add order tags for any matched collections\n  {% endcomment %}\n\n  {% assign tags_to_add = array %}\n\n  {% for pair in collections_and_tags %}\n    {% assign required_collection = pair[0] %}\n    {% assign tags = pair[1] | split: \",\" %}\n\n    {% if order_collection_ids contains required_collection\n      or order_collection_titles contains required_collection\n      or order_collection_handles contains required_collection\n    %}\n      {% for tag in tags %}\n        {% assign stripped_tag = tag | strip %}\n\n        {% unless existing_tags contains stripped_tag %}\n          {% assign tags_to_add = tags_to_add | push: stripped_tag %}\n        {% endunless %}\n      {% endfor %}\n    {% endif %}\n  {% endfor %}\n\n  {% if event.preview %}\n    {% assign tags_to_add[0] = collections_and_tags.first.last %}\n  {% endif %}\n\n  {% if tags_to_add != blank %}\n    {% action \"shopify\" %}\n      mutation {\n        tagsAdd(\n          id: {{ order.admin_graphql_api_id | json }}\n          tags: {{ tags_to_add | uniq | json }}\n        ) {\n          userErrors {\n            field\n            message\n          }\n        }\n      }\n    {% endaction %}\n  {% endif %}\n\n{% elsif event.topic == \"mechanic/user/trigger\" %}\n  {% capture bulk_operation_query %}\n    query {\n      orders {\n        edges {\n          node {\n            __typename\n            id\n            tags\n            lineItems {\n              edges {\n                node {\n                  __typename\n                  id\n                  product {\n                    id\n                    collections {\n                      edges {\n                        node {\n                          __typename\n                          id\n                          legacyResourceId\n                          title\n                          handle\n                        }\n                      }\n                    }\n                  }\n                }\n              }\n            }\n          }\n        }\n      }\n    }\n  {% endcapture %}\n\n  {% action \"shopify\" %}\n    mutation {\n      bulkOperationRunQuery(\n        query: {{ bulk_operation_query | json }}\n      ) {\n        bulkOperation {\n          id\n          status\n        }\n        userErrors {\n          field\n          message\n        }\n      }\n    }\n  {% endaction %}\n\n{% elsif event.topic == \"mechanic/shopify/bulk_operation\" %}\n  {% if event.preview %}\n    {% capture bulkOperation_objects_jsonl %}\n      {\"__typename\":\"Order\",\"id\":\"gid:\\/\\/shopify\\/Order\\/1234567890\",\"tags\":[]}\n    {% endcapture %}\n\n    {% assign bulkOperation = hash %}\n    {% assign bulkOperation[\"objects\"] = bulkOperation_objects_jsonl | parse_jsonl %}\n  {% endif %}\n\n  {% assign orders = bulkOperation.objects | where: \"__typename\", \"Order\" %}\n  {% assign line_items = bulkOperation.objects | where: \"__typename\", \"LineItem\" %}\n  {% assign collections = bulkOperation.objects | where: \"__typename\", \"Collection\" %}\n\n  {% for order in orders %}\n    {% assign tags_to_add = array %}\n    {% assign order_collections = nil %}\n\n    {% assign order_line_items = line_items | where: \"__parentId\", order.id %}\n\n    {% for line_item in order_line_items %}\n      {% assign line_item_collections = collections | where: \"__parentId\", line_item.id %}\n      {% assign order_collections = order_collections | concat: line_item_collections %}\n    {% endfor %}\n\n    {% assign order_collections = order_collections | compact %}\n    {% assign order_collection_ids = order_collections | map: \"legacyResourceId\" %}\n    {% assign order_collection_titles = order_collections | map: \"title\" %}\n    {% assign order_collection_handles = order_collections | map: \"handle\" %}\n\n    {% for pair in collections_and_tags %}\n      {% assign required_collection = pair[0] %}\n      {% assign tags = pair[1] | split: \",\" %}\n\n      {% if order_collection_ids contains required_collection\n        or order_collection_titles contains required_collection\n        or order_collection_handles contains required_collection\n      %}\n        {% for tag in tags %}\n          {% assign stripped_tag = tag | strip %}\n\n          {% unless order.tags contains stripped_tag %}\n            {% assign tags_to_add[tags_to_add.size] = stripped_tag %}\n          {% endunless %}\n        {% endfor %}\n      {% endif %}\n    {% endfor %}\n\n    {% if event.preview %}\n      {% assign tags_to_add[0] = collections_and_tags.first.last %}\n    {% endif %}\n\n    {% if tags_to_add != blank %}\n      {% action \"shopify\" %}\n        mutation {\n          tagsAdd(\n            id: {{ order.id | json }}\n            tags: {{ tags_to_add | uniq | json }}\n          ) {\n            userErrors {\n              field\n              message\n            }\n          }\n        }\n      {% endaction %}\n    {% endif %}\n  {% endfor %}\n{% endif %}\n",
  "subscriptions": [
    "shopify/orders/create",
    "mechanic/user/trigger",
    "mechanic/shopify/bulk_operation"
  ],
  "subscriptions_template": "shopify/orders/create\nmechanic/user/trigger\nmechanic/shopify/bulk_operation",
  "tags": [
    "Auto-Tag",
    "Collections",
    "Orders",
    "Products"
  ]
}
