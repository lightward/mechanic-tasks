{
  "docs": "Use this task to get an email alert with a list of the returned items whenever a return is marked as closed.\n\nOptionally, enable \"Include POS returns\" if you would like return notifications for the Shopify Point of Sale channel as well.",
  "halt_action_run_sequence_on_error": false,
  "name": "Send email notification when items are returned",
  "online_store_javascript": null,
  "options": {
    "email_recipients__array_required": null,
    "include_pos_returns__boolean": false
  },
  "order_status_javascript": null,
  "perform_action_runs_in_sequence": false,
  "preview_event_definitions": [],
  "script": "{% assign email_recipients = options.email_recipients__array_required %}\n{% assign include_pos_returns = options.include_pos_returns__boolean %}\n\n{% if event.topic == \"shopify/returns/close\" %}\n  {% if event.preview %}\n    {% capture return_json %}\n      {\n        \"id\": 1234567890,\n        \"admin_graphql_api_id\": \"gid://shopify/Return/1234567890\",\n        \"order_id\": 1234567890,\n        \"status\": \"closed\"\n      }\n    {% endcapture %}\n\n    {% assign return = return_json | parse_json %}\n  {% endif %}\n\n  {% comment %}\n    -- get return data from the order resource in case notifications for POS returns are enabled\n  {% endcomment %}\n\n  {% capture query %}\n    query {\n      order(id: {{ return.order_id | prepend: \"gid://shopify/Order/\" | json }}) {\n        id\n        name\n        displayFinancialStatus\n        displayFulfillmentStatus\n        returnStatus\n        sourceName\n        returns(\n          first: 1\n          query: {{ return.id | prepend: \"id:\" | json }}\n        ) {\n          nodes {\n            id\n            name\n            returnLineItems(first: 100) {\n              nodes {\n                ... on ReturnLineItem {\n                  quantity\n                  returnReason\n                  fulfillmentLineItem {\n                    lineItem {\n                      name\n                      sku\n                    }\n                  }\n                }\n              }\n            }\n          }\n        }\n      }\n    }\n  {% endcapture %}\n\n  {% assign result = query | shopify %}\n\n  {% if event.preview %}\n    {% capture result_json %}\n      {\n        \"data\": {\n          \"order\": {\n            \"id\": \"gid://shopify/Order/1234567890\",\n            \"name\": \"#PREVIEW\",\n            \"sourceName\": \"pos\",\n            \"returns\": {\n              \"nodes\": [\n                {\n                  \"id\": \"gid://shopify/Return/10560471288\",\n                  \"name\": \"#PREVIEW-R1\",\n                  \"returnLineItems\": {\n                    \"nodes\": [\n                      {\n                        \"quantity\": 1,\n                        \"returnReason\": \"STYLE\",\n                        \"fulfillmentLineItem\": {\n                          \"lineItem\": {\n                            \"name\": \"Widget - Chartreuse\",\n                            \"sku\": \"WDGT-CHRTRS\"\n                          }\n                        }\n                      }\n                    ]\n                  }\n                }\n              ]\n            }\n          }\n        }\n      }\n    {% endcapture %}\n\n    {% assign result = result_json | parse_json %}\n  {% endif %}\n\n  {% assign order = result.data.order %}\n\n  {% if order.sourceName == \"pos\" %}\n    {% unless include_pos_returns or event.preview %}\n      {% log \"This return was made via POS, and the option to include them for notifications is disabled.\" %}\n      {% break %}\n    {% endunless %}\n  {% endif %}\n\n  {% assign return = order.returns.nodes.first %}\n\n  {% assign return_line_items = return.returnLineItems.nodes %}\n\n  {% if return_line_items == blank %}\n    {% log\n      message: \"No verified return line items were found on this return.\",\n      return: return\n    %}\n    {% break %}\n  {% endif %}\n\n  {% capture email_subject %}ALERT: New return {{ return.name }}{% endcapture %}\n\n  {% if include_pos_returns and order.sourceName == \"pos\" %}\n    {% assign email_subject = email_subject | append: \" (via POS)\" %}\n  {% endif %}\n\n  {% capture email_body -%}\n    Returned items\n    ==============\n    {% for return_line_item in return_line_items %}\n      Title: <strong>{{ return_line_item.fulfillmentLineItem.lineItem.name }}</strong>\n      SKU: <strong>{{ return_line_item.fulfillmentLineItem.lineItem.sku }}</strong>\n      Quantity: <strong>{{ return_line_item.quantity }}</strong>\n      Reason: <strong>{{ return_line_item.returnReason }}</strong>\n    {% endfor %}\n  {% endcapture %}\n\n  {% action \"email\" %}\n    {\n      \"to\": {{ email_recipients | json }},\n      \"subject\": {{ email_subject | json }},\n      \"body\": {{ email_body | newline_to_br | json }},\n      \"reply_to\": {{ shop.customer_email | json }},\n      \"from_display_name\": {{ shop.name | json }}\n    }\n  {% endaction %}\n{% endif %}\n",
  "subscriptions": [
    "shopify/returns/close"
  ],
  "subscriptions_template": "shopify/returns/close",
  "tags": [
    "Alert",
    "Email",
    "Returns"
  ]
}
