{
  "docs": "This demonstration task responds to product updates, and for each variant of a product it will check to see if the configured attribute matches the stored value. If any of the variant values have changed, then the task will fire the configured custom event, passing along the entire product resource in the same manner as a standard product webhook. This is very useful for creating custom tasks that focus on the busines logic for the problem being solved (e.g. \"Send a notification when a product price changes\"), without having to continually build the scaffolding of a specific attribute monitor in each.\n\nA variant attribute lookup can be something simple, like \"price\", or more complicated: use multiple attribute lookups, like \"metafields\", \"custom\", and \"unit_price\", and \"value\" to get a specific variant metafield value. Refer to [Shopify's API documentation](https://shopify.dev/api/admin-rest/2023-01/resources/webhook#event-topics-products-update) to find the standard product variant property you want to monitor.\n\nThis demonstration task has been preconfigured with price as the variant attribute to monitor, and a custom event topic of \"user/product/price_update\". Read more about [custom user event topics](https://learn.mechanic.dev/platform/events/topics#user).\n\n**Important**: After configuring this task, run the task manually once to have it store information about each product's existing variant attributes. The custom event will not be fired when a product is first seen by this task.",
  "halt_action_run_sequence_on_error": false,
  "name": "Demonstration: Trigger a custom event on specific variant changes",
  "online_store_javascript": null,
  "options": {
    "custom_event_topic__required": "user/product/price_update",
    "attribute_lookups__array_required": [
      "price"
    ]
  },
  "order_status_javascript": null,
  "perform_action_runs_in_sequence": false,
  "preview_event_definitions": [],
  "script": "{% assign custom_event_topic = options.custom_event_topic__required %}\n{% assign attribute_lookups = options.attribute_lookups__array_required %}\n\n{% if event.preview %}\n  {% assign custom_event_topic = \"user/product/price_update\" %}\n  {% assign attribute_lookups = \"price\" %}\n{% endif %}\n\n{% assign metafield_key = attribute_lookups | join: \"_\" | prepend: \"snapshot_\" %}\n{% assign custom_event_topic_parts = custom_event_topic | split: \"/\" %}\n\n{% if custom_event_topic_parts[0] != \"user\" %}\n  {% error \"The custom event topic must start with 'user/'\" %}\n{% endif %}\n\n{% if custom_event_topic_parts.size != 3 %}\n  {% error \"The custom event topic should be in the form of 'user/[subject]/[verb]'\" %}\n{% endif %}\n\n{% log custom_event_topic: custom_event_topic, attribute_lookups: attribute_lookups %}\n\n{% if event.topic == \"mechanic/user/trigger\" %}\n  {% assign products = shop.products %}\n\n{% elsif event.topic == \"shopify/products/update\" %}\n  {% assign products = array | push: product %}\n{% endif %}\n\n{% if event.preview %}\n  {% capture products_json %}\n    [\n      {\n        \"admin_graphql_api_id\": \"gid://shopify/Product/1234567890\",\n        \"variants\": [\n          {\n            \"id\": 1234567890,\n            \"price\": \"1.23\"\n          }\n        ]\n      }\n    ]\n  {% endcapture %}\n\n  {% assign products = products_json | parse_json %}\n{% endif %}\n\n{% assign products_that_need_a_metafield_update = hash %}\n{% assign products_that_cause_a_custom_event = array %}\n\n{% for product in products %}\n  {% assign variant_ids_and_values = hash %}\n\n  {% for variant in product.variants %}\n    {% assign variant_id = variant.id | append: \"\" %}\n    {% assign attribute_value = variant %}\n\n    {% for lookup in attribute_lookups %}\n      {% assign attribute_value = attribute_value[lookup] %}\n    {% endfor %}\n\n    {% comment %}\n      Make sure attribute_value is always a serializable object, defaulting to nil in the case of an empty string\n    {% endcomment %}\n\n    {% assign variant_ids_and_values[variant_id] = attribute_value | json | parse_json | default: nil %}\n  {% endfor %}\n\n  {% assign expected_metafield_value = variant_ids_and_values %}\n  {% assign existing_metafield = product.metafields.mechanic[metafield_key] %}\n\n  {% if existing_metafield == blank %}\n    {% unless expected_metafield_value == blank %}\n      {% assign products_that_need_a_metafield_update[product.admin_graphql_api_id] = expected_metafield_value %}\n    {% endunless %}\n\n  {% elsif existing_metafield.value == expected_metafield_value %}\n    {% log\n      message: \"Product metafield is already up to date\",\n      product_id: product.id,\n      metafield_value: expected_metafield_value\n    %}\n\n  {% else %}\n    {% assign products_that_need_a_metafield_update[product.admin_graphql_api_id] = expected_metafield_value %}\n    {% assign products_that_cause_a_custom_event = products_that_cause_a_custom_event | push: product %}\n  {% endif %}\n{% endfor %}\n\n{% assign metafield_inputs = array %}\n\n{% for keyval in products_that_need_a_metafield_update %}\n  {% capture metafield_input %}\n    {\n      ownerId: {{ keyval[0] | json }}\n      namespace: \"mechanic\"\n      key: {{ metafield_key | json }}\n      value: {{ keyval[1] | json | json }}\n      type: \"json\"\n    }\n  {% endcapture %}\n\n  {% assign metafield_inputs = metafield_inputs | push: metafield_input %}\n{% endfor %}\n\n{% assign groups_of_metafield_inputs = metafield_inputs | in_groups_of: 25, fill_with: false %}\n\n{% for group_of_metafield_inputs in groups_of_metafield_inputs %}\n  {% action \"shopify\" %}\n    mutation {\n      metafieldsSet(\n        metafields: [\n          {{ group_of_metafield_inputs | join: newline }}\n        ]\n      ) {\n        metafields {\n          id\n          namespace\n          key\n          type\n          value\n          owner {\n            ... on Product {\n              id\n            }\n          }\n        }\n        userErrors {\n          code\n          field\n          message\n        }\n      }\n    }\n  {% endaction %}\n{% endfor %}\n\n{% for product in products_that_cause_a_custom_event %}\n  {% action \"event\" %}\n    {\n      \"topic\": {{ custom_event_topic | json }},\n      \"data\": {{ product | json }}\n    }\n  {% endaction %}\n{% endfor %}",
  "subscriptions": [
    "shopify/products/update",
    "mechanic/user/trigger"
  ],
  "subscriptions_template": "shopify/products/update\nmechanic/user/trigger",
  "tags": [
    "Demonstration",
    "Demonstration",
    "Products",
    "Variants",
    "Watch"
  ]
}
