{
  "docs": "This task immediately cancels orders as soon as Shopify (or another risk-analysis app) determines it to be high risk. Optionally, this task can also auto-tag the order, email the customer, and attempt to void or refund payment.\n\nValid cancellation reasons:\n\n* customer: The customer canceled the order.\n* fraud: The order was fraudulent.\n* inventory: Items in the order were not in inventory.\n* declined: The payment was declined.\n* other: A reason not in this list.\n\n__NOTE:__ This task will not cancel orders that have been partially or fully fulfilled",
  "halt_action_run_sequence_on_error": true,
  "name": "Automatically cancel high-risk orders",
  "online_store_javascript": null,
  "options": {
    "cancellation_reason": "customer",
    "ignore_unpaid_orders__boolean": false,
    "attempt_to_void_or_refund_payment_for_cancelled_orders__boolean": false,
    "email_customer_when_cancelling__boolean": false,
    "add_this_order_tag_when_cancelling": ""
  },
  "order_status_javascript": null,
  "perform_action_runs_in_sequence": true,
  "preview_event_definitions": [],
  "script": "{% assign cancellation_reason = options.cancellation_reason | default: \"other\" %}\n{% assign valid_cancellation_reasons = \"customer,inventory,fraud,declined,other\" | split: \",\" %}\n\n{% unless valid_cancellation_reasons contains cancellation_reason %}\n  {% error %}\n    {{ \"Cancellation reason \" | append: cancellation_reason | append: \" - must be one of 'customer', 'inventory', 'fraud', 'declined', or 'other'.\" | json }}\n  {% enderror %}\n{% endunless %}\n\n\n{% unless event.preview %}\n  {% assign cancel_risk = order.risks | where: \"recommendation\", \"cancel\" | first %}\n\n  {% unless cancel_risk %}\n    {% break %}\n  {% endunless %}\n\n  {% if order.fulfillment_status %}\n    {% log \"This order has already been partially or fully fulfilled; no cancellation (nor refund if that option is checked) will be made.\" %}\n    {% break %}  \n  {% endif %}\n\n  {% if order.cancelled_at  %}\n    {% log \"This order has already been cancelled.\" %}\n    {% break %}  \n  {% endif %}\n\n  {% if options.ignore_unpaid_orders__boolean and order.financial_status == \"pending\" %}\n    {% log \"This order has not been paid, and the ignore unpaid orders option is checked; no cancellation will be made.\" %}\n    {% break %}  \n  {% endif %}  \n{% endunless %}\n\n{% comment %}\n  -- NOTE: refunds via API must occur before cancellation, otherwise the refund will fail\n{% endcomment %}\n\n{% if options.attempt_to_void_or_refund_payment_for_cancelled_orders__boolean %}\n  {% capture order_refund_query %}\n    query {\n      order(id: {{ order.admin_graphql_api_id | json }}) {\n        suggestedRefund(suggestFullRefund: true, refundShipping: true) {\n          amountSet {\n            shopMoney {\n              amount\n            }\n          }\n        }\n        transactions {\n          id\n          gateway\n          kind\n          status\n        }\n      }\n    }\n  {% endcapture %}\n\n  {% assign order_refund_result = order_refund_query | shopify %}\n\n  {% if event.preview %}\n    {% capture order_refund_result_json %}\n      {\n        \"data\": {\n          \"order\": {\n            \"suggestedRefund\": {\n              \"amountSet\": {\n                \"shopMoney\": {\n                  \"amount\": \"123.0\"\n                }\n              }\n            },\n            \"transactions\": [\n              {\n                \"id\": \"gid://shopify/OrderTransaction/1234567890\",\n                \"gateway\": \"bogus\",\n                \"kind\": \"CAPTURE\",\n                \"status\": \"SUCCESS\"\n              }\n            ]\n          }\n        }\n      }\n    {% endcapture %}\n\n    {% assign order_refund_result = order_refund_result_json | parse_json %}\n  {% endif %}\n\n  {% assign suggested_refund = order_refund_result.data.order.suggestedRefund.amountSet.shopMoney.amount %}\n\n  {% assign successful_transactions = order_refund_result.data.order.transactions | where: \"status\", \"SUCCESS\" %}\n\n  {% for transaction in successful_transactions %}\n    {% if transaction.kind == \"CAPTURE\" or transaction.kind == \"SALE\" %}\n      {% assign sale_or_capture_transaction = transaction %}\n      {% break %}\n    {% endif %}\n  {% endfor %}\n\n  {% comment %}\n    -- NOTE: this task only refunds the first successful capture or sale transaction, the theory being that risk analyses would run before any order edits or upsells would likely occur\n  {% endcomment %}\n\n  {% if sale_or_capture_transaction != blank %}\n    {% action \"shopify\" %}\n      mutation {\n        refundCreate(input: {\n          orderId: {{ order.admin_graphql_api_id | json }}\n            transactions: [\n              {\n                amount: {{ suggested_refund | json }}\n                gateway: {{ sale_or_capture_transaction.gateway | json }}\n                kind: VOID\n                orderId: {{ order.admin_graphql_api_id | json }}\n                parentId: {{ sale_or_capture_transaction.id | json }}\n              }\n            ]\n          notify: false\n          note: {{ task.name | json }}\n        }) {\n          userErrors {\n            field\n            message\n          }\n        }\n      }\n    {% endaction %}\n  {% endif %}\n{% endif %}\n\n{% action \"shopify\" %}\n  [\n    \"post\",\n    \"/admin/orders/{{ order.id | json }}/cancel.json\",\n    {\n      \"reason\": {{ cancellation_reason | json }},\n      \"email\": {{ options.email_customer_when_cancelling__boolean | json }}\n    }\n  ]\n{% endaction %}\n\n{% if options.add_this_order_tag_when_cancelling != blank %}\n  {% action \"shopify\" %}\n    mutation {\n      tagsAdd(\n        id: {{ order.admin_graphql_api_id | json }}\n        tags: {{ options.add_this_order_tag_when_cancelling | json }}\n      ) {\n        userErrors {\n          field\n          message\n        }\n      }\n    }\n  {% endaction %}\n{% endif %}\n",
  "subscriptions": [
    "shopify/orders/updated"
  ],
  "subscriptions_template": "shopify/orders/updated",
  "tags": [
    "Cancel",
    "Orders",
    "Risk"
  ]
}
