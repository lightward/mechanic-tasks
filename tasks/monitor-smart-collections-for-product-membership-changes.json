{
  "docs": "The collection update webhook does not fire when product memberships change based on the smart collection's rules. This task bridges that gap by monitoring smart collections at regular intervals to see if the list of their product IDs has changed, and if so it will trigger the custom event topic you configure.\n\nChoose to have the task run in intervals of 10min, 15min, 20min, 30min, hourly, or daily. Optionally, pick specific collections to monitor. If no collections are configured, then this task will monitor all smart collections in the shop.\n\n*Example use case:*\n\nA 3rd party app/integration/service has a feature to sync a collection's products to their platform. However, it depends on the collection update webhook to know when products should be re-synced. Since this will not happen for a smart collection solely when product memberships change, a task could be developed to listen for the configured custom event, and then either interface with that service's API directly to trigger a sync, or perhaps simply add a new tag to the collection to trigger the update webhook.\n\n**Notes:**\n- The custom event topic must follow the Mechanic naming convention for [user-defined topics](https://learn.mechanic.dev/core/events/topics#user-defined-topics)\n- The task will only send along the collection's [global ID](https://shopify.dev/docs/api/usage/gids) in a `collection_id` variable to the custom event\n- A custom event will be triggered for each qualifying collection\n- This task will not send a custom event for newly seen smart collections, since it has to first save a hashed list of product IDs in a collection metafield\n- The \"Extra logging\" option is there if you would like to see log messages for empty collections and collections that have not changed. Leave it unchecked unless debugging to keep the frequent task run logs nice and tidy.",
  "halt_action_run_sequence_on_error": false,
  "name": "Monitor smart collections for product membership changes",
  "online_store_javascript": null,
  "options": {
    "run_frequency__select_o1_10min_o2_15min_o3_20min_o4_30min_o5_hourly_o6_daily_required": "hourly",
    "custom_event_topic__required": "user/smart_collection/product_membership_changed",
    "collections_to_monitor__picker_collection_array": null,
    "extra_logging__boolean": null
  },
  "perform_action_runs_in_sequence": false,
  "preview_event_definitions": [],
  "script": "{% assign run_frequency = options.run_frequency__select_o1_10min_o2_15min_o3_20min_o4_30min_o5_hourly_o6_daily_required %}\n{% assign custom_event_topic = options.custom_event_topic__required %}\n{% assign collections_to_monitor = options.collections_to_monitor__picker_collection_array %}\n{% assign extra_logging = options.extra_logging__boolean %}\n\n{% if collections_to_monitor == blank or event.preview %}\n  {% comment %}\n    -- get IDs for all smart collections in shop\n    -- note: Shopify has a limit of 5000 smart collections per shop\n  {% endcomment %}\n\n  {% assign cursor = nil %}\n  {% assign collection_ids = array %}\n\n  {% for n in (1..20) %}\n    {% capture query %}\n      query {\n        collections(\n          first: 250\n          after: {{ cursor | json }}\n          query: \"collection_type:smart\"\n        ) {\n          pageInfo {\n            hasNextPage\n            endCursor\n          }\n          nodes {\n            id\n          }\n        }\n      }\n    {% endcapture %}\n\n    {% assign result = query | shopify %}\n\n    {% if event.preview %}\n      {% capture result_json %}\n        {\n          \"data\": {\n            \"collections\": {\n              \"nodes\": [\n                {\n                  \"id\": \"gid://shopify/Collection/1234567890\"\n                }\n              ]\n            }\n          }\n        }\n      {% endcapture %}\n\n      {% assign result = result_json | parse_json %}\n    {% endif %}\n\n    {% assign collection_ids\n      = result.data.collections.nodes\n      | map: \"id\"\n      | concat: collection_ids\n    %}\n\n    {% if result.data.collections.pageInfo.hasNextPage %}\n      {% assign cursor = result.data.collections.pageInfo.endCursor %}\n    {% else %}\n      {% break %}\n    {% endif %}\n  {% endfor %}\n\n{% else %}\n  {% comment %}\n    -- add all configured collections to IDs array, but check each one later to make sure it is a smart collection\n  {% endcomment %}\n\n  {% assign collection_ids = collections_to_monitor %}\n{% endif %}\n\n{% comment %}\n  -- process each collection\n{% endcomment %}\n\n{% for collection_id in collection_ids %}\n  {% comment %}\n    -- make sure collection type is smart\n    -- get saved hash of sorted product IDs from collection metafield\n    -- get sorted product IDs in collection (up to 25K)\n  {% endcomment %}\n\n  {% assign cursor = nil %}\n  {% assign product_ids = array %}\n\n  {% for n in (1..100) %}\n    {% capture query %}\n      query {\n        collection(id: {{ collection_id | json }}) {\n          title\n          ruleSet {\n            __typename\n          }\n          metafield(key: \"mechanic.product_ids_hash\") {\n            value\n          }\n          products(\n            first: 250\n            after: {{ cursor | json }}\n            sortKey: ID\n          ) {\n            pageInfo {\n              hasNextPage\n              endCursor\n            }\n            nodes {\n              id\n            }\n          }\n        }\n      }\n    {% endcapture %}\n\n    {% assign result = query | shopify %}\n\n    {% if event.preview %}\n      {% capture result_json %}\n        {\n          \"data\": {\n            \"collection\": {\n              \"ruleSet\": {\n                \"__typename\": \"CollectionRuleSet\"\n              },\n              \"metafield\": {\n                \"value\": \"n0t5r35lh5sh\"\n              },\n              \"products\": {\n                \"nodes\": [\n                  {\n                    \"id\": \"gid://shopify/Product/1234567890\"\n                  }\n                ]\n              }\n            }\n          }\n        }\n      {% endcapture %}\n\n      {% assign result = result_json | parse_json %}\n    {% endif %}\n\n    {% assign collection = result.data.collection | except: \"products\" %}\n    {% assign batch_product_ids = result.data.collection.products.nodes | map: \"id\" %}\n    {% assign product_ids = product_ids | concat: batch_product_ids %}\n\n    {% if result.data.collection.products.pageInfo.hasNextPage %}\n      {% assign cursor = result.data.collection.products.pageInfo.endCursor %}\n    {% else %}\n      {% break %}\n    {% endif %}\n  {% endfor %}\n\n  {% comment %}\n    -- check for smart collection in case these collections were configured manually in the task\n  {% endcomment %}\n\n  {% if collection.ruleSet == blank %}\n    {% log\n      message: \"This collection is not smart collection.\",\n      collection: collection.title,\n      collection_id: collection_id\n    %}\n    {% continue %}\n  {% endif %}\n\n  {% if product_ids == blank and collection.metafield.value == blank %}\n    {% if extra_logging %}\n      {% log\n        message: \"This collection has no products and no previously saved metafield value; skipping.\",\n        collection: collection.title,\n        collection_id: collection_id\n      %}\n    {% endif %}\n\n    {% continue %}\n  {% endif %}\n\n  {% assign product_ids_hash = product_ids | md5 %}\n\n  {% if product_ids_hash == collection.metafield.value %}\n    {% if extra_logging %}\n      {% log\n        message: \"This collection's products match the previously saved metafield value; nothing to do.\",\n        collection: collection.title,\n        collection_id: collection_id\n      %}\n    {% endif %}\n\n    {% continue %}\n  {% endif %}\n\n  {% comment %}\n    -- set collection metafield\n  {% endcomment %}\n\n  {% action \"shopify\" %}\n    mutation {\n      metafieldsSet(\n        metafields: [\n          {\n            ownerId: {{ collection_id | json }},\n            namespace: \"mechanic\"\n            key: \"product_ids_hash\"\n            type: \"single_line_text_field\"\n            value: {{ product_ids_hash | json }}\n          }\n        ]\n      ) {\n        metafields {\n          id\n          namespace\n          key\n          type\n          value\n          owner {\n            ... on Collection {\n              id\n              title\n            }\n          }\n        }\n        userErrors {\n          code\n          field\n          message\n        }\n      }\n    }\n  {% endaction %}\n\n  {% comment %}\n    -- fire custom event if there was a previously saved metafield value\n  {% endcomment %}\n\n  {% if collection.metafield.value != blank %}\n    {% action \"event\" %}\n      {\n        \"topic\": {{ custom_event_topic | json }},\n        \"data\": {\n          \"collection_id\": {{ collection_id | json }}\n        }\n      }\n    {% endaction %}\n  {% endif %}\n{% endfor %}",
  "subscriptions": [
    "mechanic/scheduler/hourly",
    "mechanic/user/trigger"
  ],
  "subscriptions_template": "mechanic/scheduler/{{ options.run_frequency__select_o1_10min_o2_15min_o3_20min_o4_30min_o5_hourly_o6_daily_required }}\nmechanic/user/trigger",
  "tags": [
    "Collections",
    "Products",
    "Watch"
  ]
}
