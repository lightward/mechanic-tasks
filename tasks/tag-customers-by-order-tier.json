{
  "docs": "Use this task to tag customers by tier, based on how many orders they've placed or by the sum of all their order totals (i.e. total spend). Optionally, configure a customer segment query, limiting the set of customers that are processed. You may also configure an order query, specifying for things like a rolling time period, or fulfillment status. This task is useful for rewarding customers who establish or maintain a specific spend level.\n\nConfigure the tier tags on the left-hand side of the \"Customer tags and order minimums\" field, and the corresponding minimium numbers on the right.\n\nThe options for querying customers and orders use the specific query syntax as found in the \"Customers / Segments\" and \"Orders\" sections of the Shopify admin areas respectively.\n\nFor example, to only count customers with enabled online accounts who are tagged with \"qualifies\", use this customer segment query:\n\n```\ncustomer_account_status = 'ENABLED' AND customer_tags CONTAINS 'qualifies'\n```\n\nTo count paid orders from the last 365 days, use this orders query:\n\n```\nfinancial_status:paid created_at:>={{ \"now - 1 year\" | date: \"%Y-%m-%d\" }}\n```\n\n**Important:** The customer segment query must use the **exact** casing and syntax as a query that is run from the customer segments admin screen. More information on the the syntax for these can be found [here](https://shopify.dev/docs/api/shopifyql/segment-query-language-reference).",
  "halt_action_run_sequence_on_error": false,
  "name": "Tag customers by order tier",
  "online_store_javascript": null,
  "options": {
    "customer_tags_and_order_minimums__keyval_number_required": {
      "10-orders": "10",
      "100-orders": "100"
    },
    "only_keep_the_customer_tag_for_the_highest_order_minimum__boolean": true,
    "tag_customers_by__choice_o1_count_of_orders_o2_sum_of_order_totals_required": "count_of_orders",
    "only_process_customers_matching_this_segment_query": "customer_account_status = 'ENABLED' AND customer_tags CONTAINS 'qualifies'",
    "only_count_orders_matching_this_query": "financial_status:paid created_at:>={{ \"now - 1 year\" | date: \"%Y-%m-%d\" }}",
    "run_hourly__boolean": null,
    "run_daily__boolean": null
  },
  "order_status_javascript": null,
  "perform_action_runs_in_sequence": false,
  "script": "{% assign customer_tags_and_order_minimums = options.customer_tags_and_order_minimums__keyval_number_required %}\n{% assign only_tag_the_highest_order_minimum = options.only_keep_the_customer_tag_for_the_highest_order_minimum__boolean %}\n{% assign tag_customers_by = options.tag_customers_by__choice_o1_count_of_orders_o2_sum_of_order_totals_required %}\n{% assign customer_segment_query = options.only_process_customers_matching_this_segment_query %}\n{% assign only_count_orders_matching_this_query = options.only_count_orders_matching_this_query %}\n\n{% if event.topic == \"mechanic/user/trigger\" or event.topic contains \"mechanic/scheduler/\" %}\n  {% comment %}\n    -- get IDs of all customers who match the segment query\n    -- Note: a segment query cannot be null, so if one has not been configured in the task then send an empty string\n  {% endcomment %}\n\n  {% assign cursor = nil %}\n  {% assign customer_segment_member_ids = array %}\n\n  {% for n in (1..100) %}\n    {% capture query %}\n      query {\n        customerSegmentMembers(\n          first: 1000\n          after: {{ cursor | json }}\n          query: {{ customer_segment_query | default: \"\" | json }}\n        ) {\n          pageInfo {\n            hasNextPage\n            endCursor\n          }\n          edges {\n            node {\n              id\n            }\n          }\n        }\n      }\n    {% endcapture %}\n\n    {% assign result = query | shopify %}\n\n    {% if event.preview %}\n      {% capture result_json %}\n        {\n          \"data\": {\n            \"customerSegmentMembers\": {\n              \"edges\": [\n                {\n                  \"node\": {\n                    \"id\": \"gid://shopify/CustomerSegmentMember/1234567890\"\n                  }\n                }\n              ]\n            }\n          }\n        }\n      {% endcapture %}\n\n      {% assign result = result_json | parse_json %}\n    {% endif %}\n\n    {% assign customer_segment_member_ids\n      = result.data.customerSegmentMembers.edges\n      | map: \"node\"\n      | map: \"id\"\n      | concat: customer_segment_member_ids\n    %}\n\n    {% if result.data.customerSegmentMembers.pageInfo.hasNextPage %}\n      {% assign cursor = result.data.customerSegmentMembers.pageInfo.endCursor %}\n    {% else %}\n      {% break %}\n    {% endif %}\n  {% endfor %}\n\n  {% unless event.preview %}\n    {% log count_of_customers_matching_query: customer_segment_member_ids.size %}\n  {% endunless %}\n\n  {% for customer_segment_member_id in customer_segment_member_ids %}\n    {% comment %}\n      -- get customer tags and all of their orders that meet the optional criteria\n    {% endcomment %}\n\n    {% assign cursor = nil %}\n    {% assign customer_orders = array %}\n\n    {% for n in (1..10) %}\n      {% capture query %}\n        query {\n          customer(id: {{ customer_segment_member_id | remove: \"SegmentMember\" | json }}) {\n            id\n            defaultEmailAddress {\n              emailAddress\n            }\n            tags\n            orders(\n              first: 250\n              after: {{ cursor | json }}\n              query: {{ only_count_orders_matching_this_query | json }}\n            ) {\n              pageInfo {\n                hasNextPage\n                endCursor\n              }\n              nodes {\n                id\n                name\n                totalPriceSet {\n                  shopMoney {\n                    amount\n                  }\n                }\n              }\n            }\n          }\n        }\n      {% endcapture %}\n\n      {% assign result = query | shopify %}\n\n      {% if event.preview %}\n        {% capture result_json %}\n          {\n            \"data\": {\n              \"customer\": {\n                \"id\": \"gid://shopify/Customer/1234567890\",\n                \"orders\": {\n                  \"nodes\": [\n                    {\n                      \"id\": \"gid://shopify/Order/1234567890\",\n                      \"name\": \"#PREVIEW\",\n                      \"totalPriceSet\": {\n                        \"shopMoney\": {\n                          \"amount\": {{ customer_tags_and_order_minimums.first.last | json }}\n                        }\n                      }\n                    }\n                  ]\n                }\n              }\n            }\n          }\n        {% endcapture %}\n\n        {% assign result = result_json | parse_json %}\n      {% endif %}\n\n      {% assign customer = result.data.customer %}\n      {% assign customer_orders = customer_orders | concat: customer.orders.nodes %}\n\n      {% if result.data.customer.orders.pageInfo.hasNextPage %}\n        {% assign cursor = result.data.customer.orders.pageInfo.endCursor %}\n      {% else %}\n        {% break %}\n      {% endif %}\n    {% endfor %}\n\n    {% assign customer_orders_value = nil %}\n\n    {% if tag_customers_by == \"count_of_orders\" %}\n      {% assign customer_orders_value = customer_orders.size %}\n\n      {% if event.preview %}\n        {% assign customer_orders_value = customer_tags_and_order_minimums.first.last %}\n      {% endif %}\n\n    {% elsif tag_customers_by == \"sum_of_order_totals\" %}\n      {% assign customer_orders_value = 0 %}\n\n      {% for order in customer_orders %}\n        {% assign customer_orders_value = customer_orders_value | plus: order.totalPriceSet.shopMoney.amount %}\n      {% endfor %}\n    {% endif %}\n\n    {% unless customer_orders == blank %}\n      {% assign customer_orders_names = customer_orders | map: \"name\" %}\n\n      {% unless event.preview %}\n        {% log\n          customer_id: customer.id,\n          customer_email: customer.defaultEmailAddress.emailAddress,\n          customer_tags: customer.tags,\n          customer_orders_value: customer_orders_value,\n          customer_orders_names: customer_orders_names\n        %}\n      {% endunless %}\n    {% endunless %}\n\n    {% assign best_fitting_tag_minimum = 0 %}\n    {% assign best_fitting_tag = nil %}\n    {% assign all_fitting_tags = array %}\n    {% assign all_possible_tags = array %}\n\n    {% for pair in customer_tags_and_order_minimums %}\n      {% assign tag = pair[0] %}\n      {% assign tag_minimum = pair[1] %}\n\n      {% assign all_possible_tags[all_possible_tags.size] = tag %}\n\n      {% if customer_orders_value >= tag_minimum %}\n        {% assign all_fitting_tags[all_fitting_tags.size] = tag %}\n\n        {% if tag_minimum >= best_fitting_tag_minimum %}\n          {% assign best_fitting_tag = tag %}\n          {% assign best_fitting_tag_minimum = tag_minimum %}\n        {% endif %}\n      {% endif %}\n    {% endfor %}\n\n    {% assign tags_to_add = array %}\n    {% assign tags_to_remove = array %}\n\n    {% if best_fitting_tag %}\n      {% unless customer.tags contains best_fitting_tag %}\n        {% assign tags_to_add[tags_to_add.size] = best_fitting_tag %}\n      {% endunless %}\n    {% endif %}\n\n    {% if only_tag_the_highest_order_minimum %}\n      {% for tag in all_possible_tags %}\n        {% if tag != best_fitting_tag and customer.tags contains tag %}\n          {% assign tags_to_remove[tags_to_remove.size] = tag %}\n        {% endif %}\n      {% endfor %}\n\n    {% else %}\n      {% for tag in all_fitting_tags %}\n        {% unless tag == best_fitting_tag or customer.tags contains tag %}\n          {% assign tags_to_add[tags_to_add.size] = tag %}\n        {% endunless %}\n      {% endfor %}\n    {% endif %}\n\n    {% if tags_to_add != blank or tags_to_remove != blank %}\n      {% action \"shopify\" %}\n        mutation {\n          {% if tags_to_add != blank %}\n            tagsAdd(\n              id: {{ customer.id | json }}\n              tags: {{ tags_to_add | json }}\n            ) {\n              node {\n                ... on Customer {\n                  id\n                  defaultEmailAddress {\n                    emailAddress\n                  }\n                  tags\n                }\n              }\n              userErrors {\n                field\n                message\n              }\n            }\n          {% endif %}\n\n          {% if tags_to_remove != blank %}\n            tagsRemove(\n              id: {{ customer.id | json }}\n              tags: {{ tags_to_remove | json }}\n            ) {\n              node {\n                ... on Customer {\n                  id\n                  defaultEmailAddress {\n                    emailAddress\n                  }\n                  tags\n                }\n              }\n              userErrors {\n                field\n                message\n              }\n            }\n          {% endif %}\n        }\n      {% endaction %}\n    {% endif %}\n  {% endfor %}\n{% endif %}\n",
  "subscriptions": [
    "mechanic/user/trigger"
  ],
  "subscriptions_template": "mechanic/user/trigger\n{% if options.run_hourly__boolean %}\n  mechanic/scheduler/hourly\n{% elsif options.run_daily__boolean %}\n  mechanic/scheduler/daily\n{% endif %}",
  "tags": [
    "Customers",
    "Loyalty",
    "Retention",
    "Tag"
  ]
}
