{
  "docs": "This task watches for new orders, and checks each line item for that variant's total inventory quantity. If any are found with an inventory level of 0 or less, the task will add the tag of your choice to the order, and optionally will add a tag to the customer and to each product related to an out-of-stock line item.\n\nBy default, this task will disregard the inventory levels of any variants which have the \"Continue selling when out of stock\" option enabled. Uncheck the \"Ignore variants marked for oversell\" task option to disable this exclusion.",
  "halt_action_run_sequence_on_error": false,
  "name": "Auto-tag orders that contain an out of stock item",
  "online_store_javascript": null,
  "options": {
    "apply_this_order_tag__required": "",
    "ignore_variants_marked_for_oversell__boolean": true,
    "apply_this_customer_tag": null,
    "apply_this_product_tag_for_each_out_of_stock_line_item": null
  },
  "order_status_javascript": null,
  "perform_action_runs_in_sequence": false,
  "preview_event_definitions": [],
  "script": "{% assign apply_this_order_tag = options.apply_this_order_tag__required %}\n{% assign ignore_variants_marked_for_oversell = options.ignore_variants_marked_for_oversell__boolean %}\n{% assign apply_this_customer_tag = options.apply_this_customer_tag %}\n{% assign apply_this_product_tag = options.apply_this_product_tag_for_each_out_of_stock_line_item %}\n\n{% comment %}\n  -- get product and variant data for all line items on this order\n{% endcomment %}\n\n{% assign out_of_stock_products = array %}\n\n{% capture query %}\n  query {\n    order(id: {{ order.admin_graphql_api_id | json }}) {\n      id\n      tags\n      {% if apply_this_customer_tag != blank %}\n        customer {\n          id\n          tags\n        }\n      {% endif %}\n      lineItems(first: 250) {\n        nodes {\n          name\n          product {\n            id\n            title\n            tags\n            tracksInventory\n          }\n          variant {\n            inventoryQuantity\n            inventoryPolicy\n          }\n        }\n      }\n    }\n  }\n{% endcapture %}\n\n{% assign result = query | shopify %}\n\n{% if event.preview %}\n  {% capture result_json %}\n    {\n      \"data\": {\n        \"order\": {\n          \"id\": \"gid://shopify/Order/1234567890\",\n          \"customer\": {\n            \"id\": \"gid://shopify/Customer/1234567890\"\n          },\n          \"lineItems\": {\n            \"nodes\": [\n              {\n                \"name\": \"An out of stock product\",\n                \"product\": {\n                  \"id\": \"gid://shopify/Product/1234567890\",\n                  \"title\": \"An out of stock product\",\n                  \"tracksInventory\" : true\n                },\n                \"variant\": {\n                  \"inventoryQuantity\": -1,\n                  \"inventoryPolicy\": \"DENY\"\n                }\n              }\n            ]\n          }\n        }\n      }\n    }\n  {% endcapture %}\n\n  {% assign result = result_json | parse_json %}\n{% endif %}\n\n{% assign order = result.data.order %}\n\n{% for line_item in order.lineItems.nodes %}\n  {% assign product = line_item.product %}\n  {% assign variant = line_item.variant %}\n\n  {% comment %}\n    -- skip custom line items (i.e. not attached to a product in the shop), and products that do not track inventory\n  {% endcomment %}\n\n  {% if product == blank %}\n    {% continue %}\n  {% endif %}\n\n  {% unless product.tracksInventory %}\n    {% continue %}\n  {% endunless %}\n\n  {% if variant.inventoryQuantity < 0 %}\n    {% comment %}\n      -- ignore variants with negative inventory if they are set to oversell and that option is enabled in the task\n    {% endcomment %}\n\n    {% if ignore_variants_marked_for_oversell and variant.inventoryPolicy == \"CONTINUE\" %}\n      {%- capture log_output -%}\n        {{ line_item.name }} was purchased while at stock level {{ variant.inventoryQuantity }}; however, the variant's inventory policy allows overselling and the \"Ignore variants marked for oversell\" task option is enabled; skipping.\n      {%- endcapture -%}\n\n      {% log log_output %}\n\n      {% continue %}\n    {% endif %}\n\n    {% assign out_of_stock_products = out_of_stock_products | push: product | uniq %}\n  {% endif %}\n{% endfor %}\n\n{% if out_of_stock_products == blank %}\n  {% log \"No out of stock products for this order.\" %}\n  {% break %}\n{% endif %}\n\n{% comment %}\n  -- apply the order tag\n{% endcomment %}\n\n{% action \"shopify\" %}\n  mutation {\n    tagsAdd(\n      id: {{ order.id | json }}\n      tags: {{ apply_this_order_tag | json }}\n    ) {\n      node {\n        ... on Order {\n          id\n          name\n        }\n      }\n      userErrors {\n        field\n        message\n      }\n    }\n  }\n{% endaction %}\n\n{% comment %}\n  -- apply the customer tag if it is configured, there is a customer for the order, and they do not yet have the tag\n{% endcomment %}\n\n{% unless apply_this_customer_tag == blank or order.customer == blank %}\n  {% if order.customer.tags contains apply_this_customer_tag %}\n    {% log \"This customer already has the configured tag.\" %}\n\n  {% else %}\n    {% action \"shopify\" %}\n      mutation {\n        tagsAdd(\n          id: {{ order.customer.id | json }}\n          tags: {{ apply_this_customer_tag | json }}\n        ) {\n          node {\n            ... on Customer {\n              id\n              displayName\n            }\n          }\n          userErrors {\n            field\n            message\n          }\n        }\n      }\n    {% endaction %}\n  {% endif %}\n{% endunless %}\n\n{% comment %}\n  -- apply product tag if it is configured, for any products that do not yet have the tag\n{% endcomment %}\n\n{% if apply_this_product_tag != blank %}\n  {% for product in out_of_stock_products %}\n    {% if product.tags contains apply_this_product_tag %}\n      {%- capture log_output -%}\n        The product \"{{ product.title }}\" already has the configured tag.\n      {%- endcapture -%}\n\n      {% log log_output %}\n\n    {% else %}\n      {% action \"shopify\" %}\n        mutation {\n          tagsAdd(\n            id: {{ product.id | json }}\n            tags: {{ apply_this_product_tag | json }}\n          ) {\n            node {\n              ... on Product {\n                id\n                title\n              }\n            }\n            userErrors {\n              field\n              message\n            }\n          }\n        }\n      {% endaction %}\n    {% endif %}\n  {% endfor %}\n{% endif %}\n",
  "subscriptions": [
    "shopify/orders/create"
  ],
  "subscriptions_template": "shopify/orders/create",
  "tags": [
    "Auto-Tag",
    "Orders",
    "Out of Stock"
  ]
}
