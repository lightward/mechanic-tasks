{
  "name": "Tag products by their price ranges",
  "options": {
    "tag_prefix__required": "rprice-",
    "range_maximum__required_number": "200",
    "range_minimum__required_number": "0",
    "range_increment__required_number": "25",
    "use_only_the_single_smallest_range_that_applies_to_each_variant__boolean": null,
    "use_every_range_that_applies_to_each_variant__boolean": null
  },
  "subscriptions": [
    "mechanic/user/trigger",
    "shopify/products/create",
    "shopify/products/update"
  ],
  "subscriptions_template": "mechanic/user/trigger\nshopify/products/create\nshopify/products/update",
  "script": "{% assign tag_prefix = options.tag_prefix__required %}\n\n{% assign range_max = options.range_maximum__required_number | round %}\n{% assign range_min = options.range_minimum__required_number | round %}\n{% assign range_increment = options.range_increment__required_number | round %}\n{% assign range_steps = range_max | minus: range_min | divided_by: range_increment %}\n\n{% if range_max <= range_min %}\n  {% error \"'Range maximum' is smaller than or equal to 'Range minimum'. Try again!\" %}\n{% endif %}\n\n{% assign range_max_mod = range_max | minus: range_min | modulo: range_increment %}\n\n{% if range_max_mod != 0 %}\n  {% error %}\n    \"Ensure both 'Range maximum' is an even multiple of {{ range_increment }} away from 'Range minimum'.\"\n  {% enderror %}\n{% endif %}\n\n{% if options.use_only_the_single_smallest_range_that_applies_to_each_variant__boolean and options.use_every_range_that_applies_to_each_variant__boolean %}\n  {% error \"Use only one of the 'Use only...' options. :)\" %}\n{% elsif options.use_only_the_single_smallest_range_that_applies_to_each_variant__boolean == false and options.use_every_range_that_applies_to_each_variant__boolean == false %}\n  {% error \"Use exactly one of the 'Use only...' options. :)\" %}\n{% endif %}\n\n{% assign products = array %}\n\n{% if event.preview %}\n  {% assign products[0] = hash %}\n  {% assign products[0][\"admin_graphql_api_id\"] = \"gid://shopify/Product/1234567890\" %}\n\n  {% assign tags = array %}\n  {% assign tags[tags.size] = \"red\" %}\n  {% assign tags[tags.size] = \"blue\" %}\n  {% assign tags[tags.size] = tag_prefix | append: \"1-99999999999999999\" %}\n\n  {% assign products[0][\"tags\"] = tags | join: \", \" %}\n  {% assign products[0][\"variants\"] = array %}\n  {% assign products[0][\"variants\"][0] = hash %}\n  {% assign products[0][\"variants\"][0][\"price\"] = options.range_minimum__required_number | plus: 0.01 %}\n  {% assign products[0][\"variants\"][1] = hash %}\n  {% assign products[0][\"variants\"][1][\"price\"] = options.range_maximum__required_number | minus: 0.01 %}\n{% elsif event.topic == \"mechanic/user/trigger\" %}\n  {% assign products = shop.products %}\n{% elsif event.topic == \"shopify/products/create\" or event.topic == \"shopify/products/update\" %}\n  {% assign products[0] = product %}\n{% endif %}\n\n{% for product in products %}\n  {% assign product_tags = product.tags | split: \", \" %}\n  {% assign existing_price_range_tags = array %}\n  {% assign applicable_price_range_tags = array %}\n\n  {% for tag in product_tags %}\n    {% assign possible_prefix = tag | slice: 0, tag_prefix.size %}\n    {% if possible_prefix == tag_prefix %}\n      {% assign existing_price_range_tags[existing_price_range_tags.size] = tag %}\n    {% endif %}\n  {% endfor %}\n\n  {% if options.use_only_the_single_smallest_range_that_applies_to_each_variant__boolean %}\n    {% for variant in product.variants %}\n      {% assign variant_price = variant.price | times: 1 %}\n      {% assign variant_price_left = variant_price | divided_by: range_increment | floor | times: range_increment %}\n      {% assign variant_price_right = variant_price_left | plus: range_increment %}\n      {% capture tag %}{{ tag_prefix }}{{ variant_price_left }}-{{ variant_price_right }}{% endcapture %}\n      {% unless applicable_price_range_tags contains tag %}\n        {% assign applicable_price_range_tags[applicable_price_range_tags.size] = tag %}\n      {% endunless %}\n    {% endfor %}\n  {% elsif options.use_every_range_that_applies_to_each_variant__boolean %}\n    {% for i in (0..range_steps) %}\n      {% for j in (i..range_steps) %}\n        {% if j <= i %}\n          {% continue %}\n        {% endif %}\n\n        {% assign step_min = i | times: range_increment | plus: range_min %}\n        {% assign step_max = j | times: range_increment | plus: range_min %}\n\n        {% for variant in product.variants %}\n          {% assign variant_price = variant.price | times: 1 %}\n          {% if variant_price >= step_min and variant_price <= step_max %}\n            {% capture tag %}{{ tag_prefix }}{{ step_min }}-{{ step_max }}{% endcapture %}\n            {% unless applicable_price_range_tags contains tag %}\n              {% assign applicable_price_range_tags[applicable_price_range_tags.size] = tag %}\n            {% endunless %}\n          {% endif %}\n        {% endfor %}\n      {% endfor %}\n    {% endfor %}\n  {% endif %}\n\n  {% assign tags_to_add = array %}\n  {% assign tags_to_remove = array %}\n\n  {% for tag in applicable_price_range_tags %}\n    {% unless existing_price_range_tags contains tag %}\n      {% assign tags_to_add[tags_to_add.size] = tag %}\n    {% endunless %}\n  {% endfor %}\n\n  {% for tag in existing_price_range_tags %}\n    {% unless applicable_price_range_tags contains tag %}\n      {% assign tags_to_remove[tags_to_remove.size] = tag %}\n    {% endunless %}\n  {% endfor %}\n\n  {% if tags_to_add != empty or tags_to_remove != empty %}\n    {% action \"shopify\" %}\n      mutation {\n\n        {% if tags_to_add != empty %}\n          tagsAdd(\n            id: {{ product.admin_graphql_api_id | json }}\n            tags: {{ tags_to_add | json }}\n          ) {\n            userErrors {\n              field\n              message\n            }\n          }\n        {% endif %}\n\n        {% if tags_to_remove != empty %}\n          tagsRemove(\n            id: {{ product.admin_graphql_api_id | json }}\n            tags: {{ tags_to_remove | json }}\n          ) {\n            userErrors {\n              field\n              message\n            }\n          }\n        {% endif %}\n\n      }\n    {% endaction %}\n  {% endif %}\n{% endfor %}",
  "docs": "Some themes (like Mogo!) support browsing products by price range. Under the hood, this functionality is powered by tags that look like \"rprice-1-100\". This task watches for new and updated products, making sure that the product range tags stay in sync with prices available for each product. And, if you run the task manually, it'll update the tags for all products in your shop.\n\nThis task adds tags that specify the price ranges that describe the product. Then, choose between tagging with _every_ applicable price range (e.g. a product with price $50 might be tagged for the ranges 0-50, 0-75, 0-100, 25-50, 25-75, 25-100, 50-75, and 50-100), or between tagging with only the smallest applicable price ranges (e.g. only 50-75).\r\n\r\nOut of the box, this task will run on product create and update. You can also use the \"Run Task\" button to request a run across all products in your shop.",
  "halt_action_run_sequence_on_error": false,
  "online_store_javascript": null,
  "order_status_javascript": null,
  "perform_action_runs_in_sequence": false
}
