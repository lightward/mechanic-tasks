{
  "docs": "Some themes (like Mogo!) support browsing products by price range. Under the hood, this functionality is powered by tags that look like \"rprice-1-100\". This task watches for new and updated products, making sure that the product range tags stay in sync with prices available for each product.\n\nChoose between tagging with _every_ applicable price range (e.g. a product with price $50 might be tagged for the ranges 0-50, 0-75, 0-100, 25-50, 25-75, 25-100, 50-75, and 50-100), or between tagging with only the smallest applicable price ranges (e.g. only 50-75).\n\nRun the task manually to update the tags for all active and draft products in your shop.",
  "halt_action_run_sequence_on_error": false,
  "name": "Tag products by their price ranges",
  "online_store_javascript": null,
  "options": {
    "tag_prefix__required": "rprice-",
    "range_maximum__required_number": "200",
    "range_minimum__required_number": "0",
    "range_increment__required_number": "25",
    "use_only_the_single_smallest_range_that_applies_to_each_variant__boolean": null,
    "use_every_range_that_applies_to_each_variant__boolean": null
  },
  "order_status_javascript": null,
  "perform_action_runs_in_sequence": false,
  "script": "{% assign tag_prefix = options.tag_prefix__required %}\n{% assign range_max = options.range_maximum__required_number | round %}\n{% assign range_min = options.range_minimum__required_number | round %}\n{% assign range_increment = options.range_increment__required_number | round %}\n{% assign use_only_the_single_smallest_range = options.use_only_the_single_smallest_range_that_applies_to_each_variant__boolean %}\n{% assign use_every_range = options.use_every_range_that_applies_to_each_variant__boolean %}\n\n{% assign range_steps = range_max | minus: range_min | divided_by: range_increment %}\n\n{% if range_max <= range_min %}\n  {% error \"'Range maximum' is smaller than or equal to 'Range minimum'. Try again!\" %}\n{% endif %}\n\n{% assign range_max_mod = range_max | minus: range_min | modulo: range_increment %}\n\n{% if range_max_mod != 0 %}\n  {% error %}\n    \"Ensure both 'Range maximum' is an even multiple of {{ range_increment }} away from 'Range minimum'.\"\n  {% enderror %}\n{% endif %}\n\n{% if use_only_the_single_smallest_range and use_every_range %}\n  {% error \"Use only one of the 'Use only...' options. :)\" %}\n\n{% elsif use_only_the_single_smallest_range == false and use_every_range == false %}\n  {% error \"Use exactly one of the 'Use only...' options. :)\" %}\n{% endif %}\n\n{% if event.topic == \"shopify/products/create\" or event.topic == \"shopify/products/update\" %}\n  {% comment %}\n    -- query product and variant data, up to 2K variants\n  {% endcomment %}\n\n  {% assign products = array %}\n  {% assign variants = array %}\n  {% assign cursor = nil %}\n\n  {% for n in (1..8) %}\n    {% capture query %}\n      query {\n        product(id: {{ product.admin_graphql_api_id | json }}) {\n          id\n          variants(\n            first: 250\n            after: {{ cursor | json }}\n          ) {\n            pageInfo {\n              hasNextPage\n              endCursor\n            }\n            nodes {\n              price\n            }\n          }\n        }\n      }\n    {% endcapture %}\n\n    {% assign result = query | shopify %}\n\n    {% if event.preview %}\n      {% capture result_json %}\n        {\n          \"data\": {\n            \"product\": {\n              \"id\": \"gid://shopify/Product/1234567890\",\n              \"tags\": {{ tag_prefix | append: \"1-99999999999999999\" | json }},\n              \"variants\": {\n                \"nodes\": [\n                  {\n                    \"price\": {{ range_min | plus: 0.01 | json }}\n                  },\n                  {\n                    \"price\": {{ range_max | minus: 0.01 | json }}\n                  }\n                ]\n              }\n            }\n          }\n        }\n      {% endcapture %}\n\n      {% assign result = result_json | parse_json %}\n    {% endif %}\n\n    {% comment %}\n      -- only save the product ID and tags from the product object; a separate array is used to support 2K variants\n    {% endcomment %}\n\n    {% assign products[0] = result.data.product | except: \"variants\" %}\n    {% assign variants = variants | concat: result.data.product.variants.nodes %}\n\n    {% if result.data.product.variants.pageInfo.hasNextPage %}\n      {% assign cursor = result.data.product.variants.pageInfo.endCursor %}\n    {% else %}\n      {% break %}\n    {% endif %}\n  {% endfor %}\n\n{% elsif event.topic == \"mechanic/user/trigger\" %}\n  {% comment %}\n    -- get all active and draft products in the shop, and all of their variant prices\n  {% endcomment %}\n\n  {% capture bulk_operation_query %}\n    query {\n      products(\n        query: \"-status:archived\"\n      ) {\n        edges {\n          node {\n            __typename\n            id\n            tags\n            variants {\n              edges {\n                node {\n                  __typename\n                  id\n                  price\n                }\n              }\n            }\n          }\n        }\n      }\n    }\n  {% endcapture %}\n\n  {% action \"shopify\" %}\n    mutation {\n      bulkOperationRunQuery(\n        query: {{ bulk_operation_query | json }}\n      ) {\n        bulkOperation {\n          id\n          status\n        }\n        userErrors {\n          field\n          message\n        }\n      }\n    }\n  {% endaction %}\n\n  {% break %}\n\n{% elsif event.topic == \"mechanic/shopify/bulk_operation\" %}\n  {% if event.preview %}\n    {% capture jsonl_string %}\n      {\"__typename\":\"Product\",\"id\":\"gid://shopify/Product/1234567890\",\"tags\":[{{ tag_prefix | append: \"1-99999999999999999\" | json }}]}\n      {\"__typename\":\"ProductVariant\",\"id\":\"gid://shopify/ProductVariant/1234567890\",\"price\":{{ range_min | plus: 0.01 | json }},\"__parentId\":\"gid://shopify/Product/1234567890\"}\n      {\"__typename\":\"ProductVariant\",\"id\":\"gid://shopify/ProductVariant/2345678901\",\"price\":{{ range_max | minus: 0.01 | json }},\"__parentId\":\"gid://shopify/Product/1234567890\"}\n    {% endcapture %}\n\n    {% assign bulkOperation = hash %}\n    {% assign bulkOperation[\"objects\"] = jsonl_string | parse_jsonl %}\n  {% endif %}\n\n  {% assign products = bulkOperation.objects | where: \"__typename\", \"Product\" %}\n  {% assign bulk_variants = bulkOperation.objects | where: \"__typename\", \"ProductVariant\" %}\n{% endif %}\n\n{% comment %}\n  -- using products array, either process the product which triggered the event, or all products from bulk op query\n{% endcomment %}\n\n{% for product in products %}\n  {% if event.topic == \"mechanic/shopify/bulk_operation\" %}\n    {% assign variants = bulk_variants | where: \"__parentId\", product.id %}\n  {% endif %}\n\n  {% assign existing_price_range_tags = array %}\n  {% assign applicable_price_range_tags = array %}\n\n  {% for tag in product.tags %}\n    {% assign possible_prefix = tag | slice: 0, tag_prefix.size %}\n\n    {% if possible_prefix == tag_prefix %}\n      {% assign existing_price_range_tags = existing_price_range_tags | push: tag %}\n    {% endif %}\n  {% endfor %}\n\n  {% if use_only_the_single_smallest_range %}\n    {% for variant in variants %}\n      {% assign variant_price = variant.price | times: 1 %}\n      {% assign variant_price_left = variant_price | divided_by: range_increment | floor | times: range_increment %}\n      {% assign variant_price_right = variant_price_left | plus: range_increment %}\n\n      {% capture tag %}{{ tag_prefix }}{{ variant_price_left }}-{{ variant_price_right }}{% endcapture %}\n\n      {% unless applicable_price_range_tags contains tag %}\n        {% assign applicable_price_range_tags = applicable_price_range_tags | push: tag %}\n      {% endunless %}\n    {% endfor %}\n\n  {% elsif use_every_range %}\n    {% for i in (0..range_steps) %}\n      {% for j in (i..range_steps) %}\n        {% if j <= i %}\n          {% continue %}\n        {% endif %}\n\n        {% assign step_min = i | times: range_increment | plus: range_min %}\n        {% assign step_max = j | times: range_increment | plus: range_min %}\n\n        {% for variant in variants %}\n          {% assign variant_price = variant.price | times: 1 %}\n\n          {% if variant_price >= step_min and variant_price <= step_max %}\n            {% capture tag %}{{ tag_prefix }}{{ step_min }}-{{ step_max }}{% endcapture %}\n\n            {% unless applicable_price_range_tags contains tag %}\n              {% assign applicable_price_range_tags = applicable_price_range_tags | push: tag %}\n            {% endunless %}\n          {% endif %}\n        {% endfor %}\n      {% endfor %}\n    {% endfor %}\n  {% endif %}\n\n  {% assign tags_to_add = array %}\n  {% assign tags_to_remove = array %}\n\n  {% for tag in applicable_price_range_tags %}\n    {% unless existing_price_range_tags contains tag %}\n      {% assign tags_to_add = tags_to_add | push: tag %}\n    {% endunless %}\n  {% endfor %}\n\n  {% for tag in existing_price_range_tags %}\n    {% unless applicable_price_range_tags contains tag %}\n      {% assign tags_to_remove = tags_to_remove | push: tag %}\n    {% endunless %}\n  {% endfor %}\n\n  {% if tags_to_add != blank or tags_to_remove != blank %}\n    {% action \"shopify\" %}\n      mutation {\n        {% if tags_to_add != blank %}\n          tagsAdd(\n            id: {{ product.id | json }}\n            tags: {{ tags_to_add | json }}\n          ) {\n            userErrors {\n              field\n              message\n            }\n          }\n        {% endif %}\n        {% if tags_to_remove != blank %}\n          tagsRemove(\n            id: {{ product.id | json }}\n            tags: {{ tags_to_remove | json }}\n          ) {\n            userErrors {\n              field\n              message\n            }\n          }\n        {% endif %}\n      }\n    {% endaction %}\n  {% endif %}\n{% endfor %}\n",
  "subscriptions": [
    "shopify/products/create",
    "shopify/products/update",
    "mechanic/user/trigger",
    "mechanic/shopify/bulk_operation"
  ],
  "subscriptions_template": "shopify/products/create\nshopify/products/update\nmechanic/user/trigger\nmechanic/shopify/bulk_operation",
  "tags": [
    "Auto-Tag",
    "Price",
    "Products"
  ]
}
